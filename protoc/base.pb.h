// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef PROTOBUF_base_2eproto__INCLUDED
#define PROTOBUF_base_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_base_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[50];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsSymbolBlock3X5Impl();
void InitDefaultsSymbolBlock3X5();
void InitDefaultsSymbolBlockImpl();
void InitDefaultsSymbolBlock();
void InitDefaultsStaticCascadingRandomResult3X5Impl();
void InitDefaultsStaticCascadingRandomResult3X5();
void InitDefaultsNormalReelsRandomResult3X5Impl();
void InitDefaultsNormalReelsRandomResult3X5();
void InitDefaultsRandomResultImpl();
void InitDefaultsRandomResult();
void InitDefaultsPosition2DImpl();
void InitDefaultsPosition2D();
void InitDefaultsGameResultInfoImpl();
void InitDefaultsGameResultInfo();
void InitDefaultsSpinResultImpl();
void InitDefaultsSpinResult();
void InitDefaultsGameCtrlIDImpl();
void InitDefaultsGameCtrlID();
void InitDefaultsBaseCascadingInfoImpl();
void InitDefaultsBaseCascadingInfo();
void InitDefaultsFGCacheImpl();
void InitDefaultsFGCache();
void InitDefaultsBaseFreeInfoImpl();
void InitDefaultsBaseFreeInfo();
void InitDefaultsRespinHistoryImpl();
void InitDefaultsRespinHistory();
void InitDefaultsRespinHistoryListImpl();
void InitDefaultsRespinHistoryList();
void InitDefaultsUserGameModInfoImpl();
void InitDefaultsUserGameModInfo();
void InitDefaultsUserGameLogicInfoImpl();
void InitDefaultsUserGameLogicInfo();
void InitDefaultsGameCtrlSpinImpl();
void InitDefaultsGameCtrlSpin();
void InitDefaultsGameCtrlSelectFreeImpl();
void InitDefaultsGameCtrlSelectFree();
void InitDefaultsGameCtrlBonusImpl();
void InitDefaultsGameCtrlBonus();
void InitDefaultsGameCtrlJackpotImpl();
void InitDefaultsGameCtrlJackpot();
void InitDefaultsGameCtrlCommonJackpotImpl();
void InitDefaultsGameCtrlCommonJackpot();
void InitDefaultsGameCtrlAwardSpinImpl();
void InitDefaultsGameCtrlAwardSpin();
void InitDefaultsGameCtrlDebugImpl();
void InitDefaultsGameCtrlDebug();
void InitDefaultsGameCtrlImpl();
void InitDefaultsGameCtrl();
void InitDefaultsStartFreeGameImpl();
void InitDefaultsStartFreeGame();
void InitDefaultsStartGameModImpl();
void InitDefaultsStartGameMod();
void InitDefaultsSymbolRTPImpl();
void InitDefaultsSymbolRTP();
void InitDefaultsSymbolRTPListImpl();
void InitDefaultsSymbolRTPList();
void InitDefaultsBonusRTPImpl();
void InitDefaultsBonusRTP();
void InitDefaultsBonusRTPListImpl();
void InitDefaultsBonusRTPList();
void InitDefaultsGameModuleRTP_BonusEntry_DoNotUseImpl();
void InitDefaultsGameModuleRTP_BonusEntry_DoNotUse();
void InitDefaultsGameModuleRTPImpl();
void InitDefaultsGameModuleRTP();
void InitDefaultsRTP_GameModulesEntry_DoNotUseImpl();
void InitDefaultsRTP_GameModulesEntry_DoNotUse();
void InitDefaultsRTPImpl();
void InitDefaultsRTP();
void InitDefaultsNormalReelstriptConfigImpl();
void InitDefaultsNormalReelstriptConfig();
void InitDefaultsStaticSymbolsImpl();
void InitDefaultsStaticSymbols();
void InitDefaultsStaticCascadingReelsImpl();
void InitDefaultsStaticCascadingReels();
void InitDefaultsReelstriptConfigImpl();
void InitDefaultsReelstriptConfig();
void InitDefaultsWeightConfigImpl();
void InitDefaultsWeightConfig();
void InitDefaultsMuseumRTPConfigImpl();
void InitDefaultsMuseumRTPConfig();
void InitDefaultsMuseumConfig_ReelstriptsEntry_DoNotUseImpl();
void InitDefaultsMuseumConfig_ReelstriptsEntry_DoNotUse();
void InitDefaultsMuseumConfig_RtpEntry_DoNotUseImpl();
void InitDefaultsMuseumConfig_RtpEntry_DoNotUse();
void InitDefaultsMuseumConfigImpl();
void InitDefaultsMuseumConfig();
void InitDefaultsTLODRTPConfigImpl();
void InitDefaultsTLODRTPConfig();
void InitDefaultsTLODConfig_ReelstriptsEntry_DoNotUseImpl();
void InitDefaultsTLODConfig_ReelstriptsEntry_DoNotUse();
void InitDefaultsTLODConfig_RtpEntry_DoNotUseImpl();
void InitDefaultsTLODConfig_RtpEntry_DoNotUse();
void InitDefaultsTLODConfigImpl();
void InitDefaultsTLODConfig();
void InitDefaultsGameConfig_ReelstriptsEntry_DoNotUseImpl();
void InitDefaultsGameConfig_ReelstriptsEntry_DoNotUse();
void InitDefaultsGameConfig_RtpEntry_DoNotUseImpl();
void InitDefaultsGameConfig_RtpEntry_DoNotUse();
void InitDefaultsGameConfigImpl();
void InitDefaultsGameConfig();
inline void InitDefaults() {
  InitDefaultsSymbolBlock3X5();
  InitDefaultsSymbolBlock();
  InitDefaultsStaticCascadingRandomResult3X5();
  InitDefaultsNormalReelsRandomResult3X5();
  InitDefaultsRandomResult();
  InitDefaultsPosition2D();
  InitDefaultsGameResultInfo();
  InitDefaultsSpinResult();
  InitDefaultsGameCtrlID();
  InitDefaultsBaseCascadingInfo();
  InitDefaultsFGCache();
  InitDefaultsBaseFreeInfo();
  InitDefaultsRespinHistory();
  InitDefaultsRespinHistoryList();
  InitDefaultsUserGameModInfo();
  InitDefaultsUserGameLogicInfo();
  InitDefaultsGameCtrlSpin();
  InitDefaultsGameCtrlSelectFree();
  InitDefaultsGameCtrlBonus();
  InitDefaultsGameCtrlJackpot();
  InitDefaultsGameCtrlCommonJackpot();
  InitDefaultsGameCtrlAwardSpin();
  InitDefaultsGameCtrlDebug();
  InitDefaultsGameCtrl();
  InitDefaultsStartFreeGame();
  InitDefaultsStartGameMod();
  InitDefaultsSymbolRTP();
  InitDefaultsSymbolRTPList();
  InitDefaultsBonusRTP();
  InitDefaultsBonusRTPList();
  InitDefaultsGameModuleRTP_BonusEntry_DoNotUse();
  InitDefaultsGameModuleRTP();
  InitDefaultsRTP_GameModulesEntry_DoNotUse();
  InitDefaultsRTP();
  InitDefaultsNormalReelstriptConfig();
  InitDefaultsStaticSymbols();
  InitDefaultsStaticCascadingReels();
  InitDefaultsReelstriptConfig();
  InitDefaultsWeightConfig();
  InitDefaultsMuseumRTPConfig();
  InitDefaultsMuseumConfig_ReelstriptsEntry_DoNotUse();
  InitDefaultsMuseumConfig_RtpEntry_DoNotUse();
  InitDefaultsMuseumConfig();
  InitDefaultsTLODRTPConfig();
  InitDefaultsTLODConfig_ReelstriptsEntry_DoNotUse();
  InitDefaultsTLODConfig_RtpEntry_DoNotUse();
  InitDefaultsTLODConfig();
  InitDefaultsGameConfig_ReelstriptsEntry_DoNotUse();
  InitDefaultsGameConfig_RtpEntry_DoNotUse();
  InitDefaultsGameConfig();
}
}  // namespace protobuf_base_2eproto
namespace natashapb {
class BaseCascadingInfo;
class BaseCascadingInfoDefaultTypeInternal;
extern BaseCascadingInfoDefaultTypeInternal _BaseCascadingInfo_default_instance_;
class BaseFreeInfo;
class BaseFreeInfoDefaultTypeInternal;
extern BaseFreeInfoDefaultTypeInternal _BaseFreeInfo_default_instance_;
class BonusRTP;
class BonusRTPDefaultTypeInternal;
extern BonusRTPDefaultTypeInternal _BonusRTP_default_instance_;
class BonusRTPList;
class BonusRTPListDefaultTypeInternal;
extern BonusRTPListDefaultTypeInternal _BonusRTPList_default_instance_;
class FGCache;
class FGCacheDefaultTypeInternal;
extern FGCacheDefaultTypeInternal _FGCache_default_instance_;
class GameConfig;
class GameConfigDefaultTypeInternal;
extern GameConfigDefaultTypeInternal _GameConfig_default_instance_;
class GameConfig_ReelstriptsEntry_DoNotUse;
class GameConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal;
extern GameConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal _GameConfig_ReelstriptsEntry_DoNotUse_default_instance_;
class GameConfig_RtpEntry_DoNotUse;
class GameConfig_RtpEntry_DoNotUseDefaultTypeInternal;
extern GameConfig_RtpEntry_DoNotUseDefaultTypeInternal _GameConfig_RtpEntry_DoNotUse_default_instance_;
class GameCtrl;
class GameCtrlDefaultTypeInternal;
extern GameCtrlDefaultTypeInternal _GameCtrl_default_instance_;
class GameCtrlAwardSpin;
class GameCtrlAwardSpinDefaultTypeInternal;
extern GameCtrlAwardSpinDefaultTypeInternal _GameCtrlAwardSpin_default_instance_;
class GameCtrlBonus;
class GameCtrlBonusDefaultTypeInternal;
extern GameCtrlBonusDefaultTypeInternal _GameCtrlBonus_default_instance_;
class GameCtrlCommonJackpot;
class GameCtrlCommonJackpotDefaultTypeInternal;
extern GameCtrlCommonJackpotDefaultTypeInternal _GameCtrlCommonJackpot_default_instance_;
class GameCtrlDebug;
class GameCtrlDebugDefaultTypeInternal;
extern GameCtrlDebugDefaultTypeInternal _GameCtrlDebug_default_instance_;
class GameCtrlID;
class GameCtrlIDDefaultTypeInternal;
extern GameCtrlIDDefaultTypeInternal _GameCtrlID_default_instance_;
class GameCtrlJackpot;
class GameCtrlJackpotDefaultTypeInternal;
extern GameCtrlJackpotDefaultTypeInternal _GameCtrlJackpot_default_instance_;
class GameCtrlSelectFree;
class GameCtrlSelectFreeDefaultTypeInternal;
extern GameCtrlSelectFreeDefaultTypeInternal _GameCtrlSelectFree_default_instance_;
class GameCtrlSpin;
class GameCtrlSpinDefaultTypeInternal;
extern GameCtrlSpinDefaultTypeInternal _GameCtrlSpin_default_instance_;
class GameModuleRTP;
class GameModuleRTPDefaultTypeInternal;
extern GameModuleRTPDefaultTypeInternal _GameModuleRTP_default_instance_;
class GameModuleRTP_BonusEntry_DoNotUse;
class GameModuleRTP_BonusEntry_DoNotUseDefaultTypeInternal;
extern GameModuleRTP_BonusEntry_DoNotUseDefaultTypeInternal _GameModuleRTP_BonusEntry_DoNotUse_default_instance_;
class GameResultInfo;
class GameResultInfoDefaultTypeInternal;
extern GameResultInfoDefaultTypeInternal _GameResultInfo_default_instance_;
class MuseumConfig;
class MuseumConfigDefaultTypeInternal;
extern MuseumConfigDefaultTypeInternal _MuseumConfig_default_instance_;
class MuseumConfig_ReelstriptsEntry_DoNotUse;
class MuseumConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal;
extern MuseumConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal _MuseumConfig_ReelstriptsEntry_DoNotUse_default_instance_;
class MuseumConfig_RtpEntry_DoNotUse;
class MuseumConfig_RtpEntry_DoNotUseDefaultTypeInternal;
extern MuseumConfig_RtpEntry_DoNotUseDefaultTypeInternal _MuseumConfig_RtpEntry_DoNotUse_default_instance_;
class MuseumRTPConfig;
class MuseumRTPConfigDefaultTypeInternal;
extern MuseumRTPConfigDefaultTypeInternal _MuseumRTPConfig_default_instance_;
class NormalReelsRandomResult3X5;
class NormalReelsRandomResult3X5DefaultTypeInternal;
extern NormalReelsRandomResult3X5DefaultTypeInternal _NormalReelsRandomResult3X5_default_instance_;
class NormalReelstriptConfig;
class NormalReelstriptConfigDefaultTypeInternal;
extern NormalReelstriptConfigDefaultTypeInternal _NormalReelstriptConfig_default_instance_;
class Position2D;
class Position2DDefaultTypeInternal;
extern Position2DDefaultTypeInternal _Position2D_default_instance_;
class RTP;
class RTPDefaultTypeInternal;
extern RTPDefaultTypeInternal _RTP_default_instance_;
class RTP_GameModulesEntry_DoNotUse;
class RTP_GameModulesEntry_DoNotUseDefaultTypeInternal;
extern RTP_GameModulesEntry_DoNotUseDefaultTypeInternal _RTP_GameModulesEntry_DoNotUse_default_instance_;
class RandomResult;
class RandomResultDefaultTypeInternal;
extern RandomResultDefaultTypeInternal _RandomResult_default_instance_;
class ReelstriptConfig;
class ReelstriptConfigDefaultTypeInternal;
extern ReelstriptConfigDefaultTypeInternal _ReelstriptConfig_default_instance_;
class RespinHistory;
class RespinHistoryDefaultTypeInternal;
extern RespinHistoryDefaultTypeInternal _RespinHistory_default_instance_;
class RespinHistoryList;
class RespinHistoryListDefaultTypeInternal;
extern RespinHistoryListDefaultTypeInternal _RespinHistoryList_default_instance_;
class SpinResult;
class SpinResultDefaultTypeInternal;
extern SpinResultDefaultTypeInternal _SpinResult_default_instance_;
class StartFreeGame;
class StartFreeGameDefaultTypeInternal;
extern StartFreeGameDefaultTypeInternal _StartFreeGame_default_instance_;
class StartGameMod;
class StartGameModDefaultTypeInternal;
extern StartGameModDefaultTypeInternal _StartGameMod_default_instance_;
class StaticCascadingRandomResult3X5;
class StaticCascadingRandomResult3X5DefaultTypeInternal;
extern StaticCascadingRandomResult3X5DefaultTypeInternal _StaticCascadingRandomResult3X5_default_instance_;
class StaticCascadingReels;
class StaticCascadingReelsDefaultTypeInternal;
extern StaticCascadingReelsDefaultTypeInternal _StaticCascadingReels_default_instance_;
class StaticSymbols;
class StaticSymbolsDefaultTypeInternal;
extern StaticSymbolsDefaultTypeInternal _StaticSymbols_default_instance_;
class SymbolBlock;
class SymbolBlockDefaultTypeInternal;
extern SymbolBlockDefaultTypeInternal _SymbolBlock_default_instance_;
class SymbolBlock3X5;
class SymbolBlock3X5DefaultTypeInternal;
extern SymbolBlock3X5DefaultTypeInternal _SymbolBlock3X5_default_instance_;
class SymbolRTP;
class SymbolRTPDefaultTypeInternal;
extern SymbolRTPDefaultTypeInternal _SymbolRTP_default_instance_;
class SymbolRTPList;
class SymbolRTPListDefaultTypeInternal;
extern SymbolRTPListDefaultTypeInternal _SymbolRTPList_default_instance_;
class TLODConfig;
class TLODConfigDefaultTypeInternal;
extern TLODConfigDefaultTypeInternal _TLODConfig_default_instance_;
class TLODConfig_ReelstriptsEntry_DoNotUse;
class TLODConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal;
extern TLODConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal _TLODConfig_ReelstriptsEntry_DoNotUse_default_instance_;
class TLODConfig_RtpEntry_DoNotUse;
class TLODConfig_RtpEntry_DoNotUseDefaultTypeInternal;
extern TLODConfig_RtpEntry_DoNotUseDefaultTypeInternal _TLODConfig_RtpEntry_DoNotUse_default_instance_;
class TLODRTPConfig;
class TLODRTPConfigDefaultTypeInternal;
extern TLODRTPConfigDefaultTypeInternal _TLODRTPConfig_default_instance_;
class UserGameLogicInfo;
class UserGameLogicInfoDefaultTypeInternal;
extern UserGameLogicInfoDefaultTypeInternal _UserGameLogicInfo_default_instance_;
class UserGameModInfo;
class UserGameModInfoDefaultTypeInternal;
extern UserGameModInfoDefaultTypeInternal _UserGameModInfo_default_instance_;
class WeightConfig;
class WeightConfigDefaultTypeInternal;
extern WeightConfigDefaultTypeInternal _WeightConfig_default_instance_;
}  // namespace natashapb
namespace google {
namespace protobuf {
template<> ::natashapb::BaseCascadingInfo* Arena::Create< ::natashapb::BaseCascadingInfo>(Arena*);
template<> ::natashapb::BaseFreeInfo* Arena::Create< ::natashapb::BaseFreeInfo>(Arena*);
template<> ::natashapb::BonusRTP* Arena::Create< ::natashapb::BonusRTP>(Arena*);
template<> ::natashapb::BonusRTPList* Arena::Create< ::natashapb::BonusRTPList>(Arena*);
template<> ::natashapb::FGCache* Arena::Create< ::natashapb::FGCache>(Arena*);
template<> ::natashapb::GameConfig* Arena::Create< ::natashapb::GameConfig>(Arena*);
template<> ::natashapb::GameConfig_ReelstriptsEntry_DoNotUse* Arena::Create< ::natashapb::GameConfig_ReelstriptsEntry_DoNotUse>(Arena*);
template<> ::natashapb::GameConfig_RtpEntry_DoNotUse* Arena::Create< ::natashapb::GameConfig_RtpEntry_DoNotUse>(Arena*);
template<> ::natashapb::GameCtrl* Arena::Create< ::natashapb::GameCtrl>(Arena*);
template<> ::natashapb::GameCtrlAwardSpin* Arena::Create< ::natashapb::GameCtrlAwardSpin>(Arena*);
template<> ::natashapb::GameCtrlBonus* Arena::Create< ::natashapb::GameCtrlBonus>(Arena*);
template<> ::natashapb::GameCtrlCommonJackpot* Arena::Create< ::natashapb::GameCtrlCommonJackpot>(Arena*);
template<> ::natashapb::GameCtrlDebug* Arena::Create< ::natashapb::GameCtrlDebug>(Arena*);
template<> ::natashapb::GameCtrlID* Arena::Create< ::natashapb::GameCtrlID>(Arena*);
template<> ::natashapb::GameCtrlJackpot* Arena::Create< ::natashapb::GameCtrlJackpot>(Arena*);
template<> ::natashapb::GameCtrlSelectFree* Arena::Create< ::natashapb::GameCtrlSelectFree>(Arena*);
template<> ::natashapb::GameCtrlSpin* Arena::Create< ::natashapb::GameCtrlSpin>(Arena*);
template<> ::natashapb::GameModuleRTP* Arena::Create< ::natashapb::GameModuleRTP>(Arena*);
template<> ::natashapb::GameModuleRTP_BonusEntry_DoNotUse* Arena::Create< ::natashapb::GameModuleRTP_BonusEntry_DoNotUse>(Arena*);
template<> ::natashapb::GameResultInfo* Arena::Create< ::natashapb::GameResultInfo>(Arena*);
template<> ::natashapb::MuseumConfig* Arena::Create< ::natashapb::MuseumConfig>(Arena*);
template<> ::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse* Arena::Create< ::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse>(Arena*);
template<> ::natashapb::MuseumConfig_RtpEntry_DoNotUse* Arena::Create< ::natashapb::MuseumConfig_RtpEntry_DoNotUse>(Arena*);
template<> ::natashapb::MuseumRTPConfig* Arena::Create< ::natashapb::MuseumRTPConfig>(Arena*);
template<> ::natashapb::NormalReelsRandomResult3X5* Arena::Create< ::natashapb::NormalReelsRandomResult3X5>(Arena*);
template<> ::natashapb::NormalReelstriptConfig* Arena::Create< ::natashapb::NormalReelstriptConfig>(Arena*);
template<> ::natashapb::Position2D* Arena::Create< ::natashapb::Position2D>(Arena*);
template<> ::natashapb::RTP* Arena::Create< ::natashapb::RTP>(Arena*);
template<> ::natashapb::RTP_GameModulesEntry_DoNotUse* Arena::Create< ::natashapb::RTP_GameModulesEntry_DoNotUse>(Arena*);
template<> ::natashapb::RandomResult* Arena::Create< ::natashapb::RandomResult>(Arena*);
template<> ::natashapb::ReelstriptConfig* Arena::Create< ::natashapb::ReelstriptConfig>(Arena*);
template<> ::natashapb::RespinHistory* Arena::Create< ::natashapb::RespinHistory>(Arena*);
template<> ::natashapb::RespinHistoryList* Arena::Create< ::natashapb::RespinHistoryList>(Arena*);
template<> ::natashapb::SpinResult* Arena::Create< ::natashapb::SpinResult>(Arena*);
template<> ::natashapb::StartFreeGame* Arena::Create< ::natashapb::StartFreeGame>(Arena*);
template<> ::natashapb::StartGameMod* Arena::Create< ::natashapb::StartGameMod>(Arena*);
template<> ::natashapb::StaticCascadingRandomResult3X5* Arena::Create< ::natashapb::StaticCascadingRandomResult3X5>(Arena*);
template<> ::natashapb::StaticCascadingReels* Arena::Create< ::natashapb::StaticCascadingReels>(Arena*);
template<> ::natashapb::StaticSymbols* Arena::Create< ::natashapb::StaticSymbols>(Arena*);
template<> ::natashapb::SymbolBlock* Arena::Create< ::natashapb::SymbolBlock>(Arena*);
template<> ::natashapb::SymbolBlock3X5* Arena::Create< ::natashapb::SymbolBlock3X5>(Arena*);
template<> ::natashapb::SymbolRTP* Arena::Create< ::natashapb::SymbolRTP>(Arena*);
template<> ::natashapb::SymbolRTPList* Arena::Create< ::natashapb::SymbolRTPList>(Arena*);
template<> ::natashapb::TLODConfig* Arena::Create< ::natashapb::TLODConfig>(Arena*);
template<> ::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse* Arena::Create< ::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse>(Arena*);
template<> ::natashapb::TLODConfig_RtpEntry_DoNotUse* Arena::Create< ::natashapb::TLODConfig_RtpEntry_DoNotUse>(Arena*);
template<> ::natashapb::TLODRTPConfig* Arena::Create< ::natashapb::TLODRTPConfig>(Arena*);
template<> ::natashapb::UserGameLogicInfo* Arena::Create< ::natashapb::UserGameLogicInfo>(Arena*);
template<> ::natashapb::UserGameModInfo* Arena::Create< ::natashapb::UserGameModInfo>(Arena*);
template<> ::natashapb::WeightConfig* Arena::Create< ::natashapb::WeightConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace natashapb {

enum CODE {
  OK = 0,
  INVALID_PAYTABLES_CFG = 10000,
  INVALID_LINES_CFG = 10001,
  INVALID_REELS_CFG = 10002,
  INVALID_START_GAMEMOD_TO_START = 20000,
  INVALID_START_FREEGAME_NUMS = 20001,
  INVALID_START_BET = 20002,
  INVALID_START_LINES = 20003,
  INVALID_START_TIMES = 20004,
  ALREADY_IN_FREEGAME = 20005,
  INVALID_PARENTID = 20006,
  INVALID_PARENT_GAMEMOD = 20007,
  INVALID_BET = 30000,
  INVALID_LINES = 30001,
  INVALID_TIMES = 30002,
  INVALID_GAMECTRL_GAMEMOD = 30003,
  INVALID_CASCADING_FREESTATE = 40000,
  ERR_MAKE_INITIAL_SCENARIO = 50000,
  ERR_NO_OVERLOADED_INTERFACE = 90000,
  ERR_INVALID_JS_PARAMS = 90001,
  ERR_PROTOBUF_PARSE = 90002,
  ERR_JS_BUILD_RET_OBJECT = 90003,
  CODE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CODE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CODE_IsValid(int value);
const CODE CODE_MIN = OK;
const CODE CODE_MAX = ERR_JS_BUILD_RET_OBJECT;
const int CODE_ARRAYSIZE = CODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CODE_descriptor();
inline const ::std::string& CODE_Name(CODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CODE_descriptor(), value);
}
inline bool CODE_Parse(
    const ::std::string& name, CODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CODE>(
    CODE_descriptor(), name, value);
}
enum GAMERESULTTYPE {
  NO_WIN = 0,
  LINE_LEFT = 1,
  LINE_RIGHT = 2,
  SCATTER_LEFT = 3,
  SCATTER_RIGHT = 4,
  SCATTEREX_LEFT = 5,
  SCATTEREX_RIGHT = 6,
  WAY_LEFT = 7,
  WAY_RIGHT = 8,
  SPECIAL = 9,
  GAMERESULTTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GAMERESULTTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GAMERESULTTYPE_IsValid(int value);
const GAMERESULTTYPE GAMERESULTTYPE_MIN = NO_WIN;
const GAMERESULTTYPE GAMERESULTTYPE_MAX = SPECIAL;
const int GAMERESULTTYPE_ARRAYSIZE = GAMERESULTTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAMERESULTTYPE_descriptor();
inline const ::std::string& GAMERESULTTYPE_Name(GAMERESULTTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAMERESULTTYPE_descriptor(), value);
}
inline bool GAMERESULTTYPE_Parse(
    const ::std::string& name, GAMERESULTTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAMERESULTTYPE>(
    GAMERESULTTYPE_descriptor(), name, value);
}
enum GAMEMODTYPE {
  NULL_MOD = 0,
  BASE_GAME = 1,
  FREE_GAME = 2,
  BONUS_GAME = 3,
  JACKPOT_GAME = 4,
  COMMON_JACKPOT_GAME = 5,
  GAMEMODTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GAMEMODTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GAMEMODTYPE_IsValid(int value);
const GAMEMODTYPE GAMEMODTYPE_MIN = NULL_MOD;
const GAMEMODTYPE GAMEMODTYPE_MAX = COMMON_JACKPOT_GAME;
const int GAMEMODTYPE_ARRAYSIZE = GAMEMODTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAMEMODTYPE_descriptor();
inline const ::std::string& GAMEMODTYPE_Name(GAMEMODTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAMEMODTYPE_descriptor(), value);
}
inline bool GAMEMODTYPE_Parse(
    const ::std::string& name, GAMEMODTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAMEMODTYPE>(
    GAMEMODTYPE_descriptor(), name, value);
}
enum CASCADINGFREESTATE {
  NO_FREEGAME = 0,
  CHG_TO_FREEGAME = 1,
  END_FREEGAME = 2,
  CASCADINGFREESTATE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CASCADINGFREESTATE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CASCADINGFREESTATE_IsValid(int value);
const CASCADINGFREESTATE CASCADINGFREESTATE_MIN = NO_FREEGAME;
const CASCADINGFREESTATE CASCADINGFREESTATE_MAX = END_FREEGAME;
const int CASCADINGFREESTATE_ARRAYSIZE = CASCADINGFREESTATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* CASCADINGFREESTATE_descriptor();
inline const ::std::string& CASCADINGFREESTATE_Name(CASCADINGFREESTATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    CASCADINGFREESTATE_descriptor(), value);
}
inline bool CASCADINGFREESTATE_Parse(
    const ::std::string& name, CASCADINGFREESTATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CASCADINGFREESTATE>(
    CASCADINGFREESTATE_descriptor(), name, value);
}
enum DEBUGSTATE {
  NO_DEBUG = 0,
  SMALL_WIN = 1,
  MEDIUM_WIN = 2,
  BIG_WIN = 3,
  ANY_WIN = 4,
  DEBUG_FREEGAME = 5,
  DEBUG_BONUS = 6,
  DEBUG_COMMONJACKPOT = 7,
  DEBUG_RANDOM = 8,
  DEBUGSTATE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DEBUGSTATE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DEBUGSTATE_IsValid(int value);
const DEBUGSTATE DEBUGSTATE_MIN = NO_DEBUG;
const DEBUGSTATE DEBUGSTATE_MAX = DEBUG_RANDOM;
const int DEBUGSTATE_ARRAYSIZE = DEBUGSTATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DEBUGSTATE_descriptor();
inline const ::std::string& DEBUGSTATE_Name(DEBUGSTATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DEBUGSTATE_descriptor(), value);
}
inline bool DEBUGSTATE_Parse(
    const ::std::string& name, DEBUGSTATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DEBUGSTATE>(
    DEBUGSTATE_descriptor(), name, value);
}
// ===================================================================

class SymbolBlock3X5 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.SymbolBlock3X5) */ {
 public:
  SymbolBlock3X5();
  virtual ~SymbolBlock3X5();

  SymbolBlock3X5(const SymbolBlock3X5& from);

  inline SymbolBlock3X5& operator=(const SymbolBlock3X5& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymbolBlock3X5(SymbolBlock3X5&& from) noexcept
    : SymbolBlock3X5() {
    *this = ::std::move(from);
  }

  inline SymbolBlock3X5& operator=(SymbolBlock3X5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SymbolBlock3X5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolBlock3X5* internal_default_instance() {
    return reinterpret_cast<const SymbolBlock3X5*>(
               &_SymbolBlock3X5_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(SymbolBlock3X5* other);
  friend void swap(SymbolBlock3X5& a, SymbolBlock3X5& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymbolBlock3X5* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SymbolBlock3X5>(NULL);
  }

  SymbolBlock3X5* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SymbolBlock3X5>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SymbolBlock3X5& from);
  void MergeFrom(const SymbolBlock3X5& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SymbolBlock3X5* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 dat0_0 = 1;
  void clear_dat0_0();
  static const int kDat00FieldNumber = 1;
  ::google::protobuf::int32 dat0_0() const;
  void set_dat0_0(::google::protobuf::int32 value);

  // int32 dat0_1 = 2;
  void clear_dat0_1();
  static const int kDat01FieldNumber = 2;
  ::google::protobuf::int32 dat0_1() const;
  void set_dat0_1(::google::protobuf::int32 value);

  // int32 dat0_2 = 3;
  void clear_dat0_2();
  static const int kDat02FieldNumber = 3;
  ::google::protobuf::int32 dat0_2() const;
  void set_dat0_2(::google::protobuf::int32 value);

  // int32 dat0_3 = 4;
  void clear_dat0_3();
  static const int kDat03FieldNumber = 4;
  ::google::protobuf::int32 dat0_3() const;
  void set_dat0_3(::google::protobuf::int32 value);

  // int32 dat0_4 = 5;
  void clear_dat0_4();
  static const int kDat04FieldNumber = 5;
  ::google::protobuf::int32 dat0_4() const;
  void set_dat0_4(::google::protobuf::int32 value);

  // int32 dat1_0 = 6;
  void clear_dat1_0();
  static const int kDat10FieldNumber = 6;
  ::google::protobuf::int32 dat1_0() const;
  void set_dat1_0(::google::protobuf::int32 value);

  // int32 dat1_1 = 7;
  void clear_dat1_1();
  static const int kDat11FieldNumber = 7;
  ::google::protobuf::int32 dat1_1() const;
  void set_dat1_1(::google::protobuf::int32 value);

  // int32 dat1_2 = 8;
  void clear_dat1_2();
  static const int kDat12FieldNumber = 8;
  ::google::protobuf::int32 dat1_2() const;
  void set_dat1_2(::google::protobuf::int32 value);

  // int32 dat1_3 = 9;
  void clear_dat1_3();
  static const int kDat13FieldNumber = 9;
  ::google::protobuf::int32 dat1_3() const;
  void set_dat1_3(::google::protobuf::int32 value);

  // int32 dat1_4 = 10;
  void clear_dat1_4();
  static const int kDat14FieldNumber = 10;
  ::google::protobuf::int32 dat1_4() const;
  void set_dat1_4(::google::protobuf::int32 value);

  // int32 dat2_0 = 11;
  void clear_dat2_0();
  static const int kDat20FieldNumber = 11;
  ::google::protobuf::int32 dat2_0() const;
  void set_dat2_0(::google::protobuf::int32 value);

  // int32 dat2_1 = 12;
  void clear_dat2_1();
  static const int kDat21FieldNumber = 12;
  ::google::protobuf::int32 dat2_1() const;
  void set_dat2_1(::google::protobuf::int32 value);

  // int32 dat2_2 = 13;
  void clear_dat2_2();
  static const int kDat22FieldNumber = 13;
  ::google::protobuf::int32 dat2_2() const;
  void set_dat2_2(::google::protobuf::int32 value);

  // int32 dat2_3 = 14;
  void clear_dat2_3();
  static const int kDat23FieldNumber = 14;
  ::google::protobuf::int32 dat2_3() const;
  void set_dat2_3(::google::protobuf::int32 value);

  // int32 dat2_4 = 15;
  void clear_dat2_4();
  static const int kDat24FieldNumber = 15;
  ::google::protobuf::int32 dat2_4() const;
  void set_dat2_4(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.SymbolBlock3X5)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 dat0_0_;
  ::google::protobuf::int32 dat0_1_;
  ::google::protobuf::int32 dat0_2_;
  ::google::protobuf::int32 dat0_3_;
  ::google::protobuf::int32 dat0_4_;
  ::google::protobuf::int32 dat1_0_;
  ::google::protobuf::int32 dat1_1_;
  ::google::protobuf::int32 dat1_2_;
  ::google::protobuf::int32 dat1_3_;
  ::google::protobuf::int32 dat1_4_;
  ::google::protobuf::int32 dat2_0_;
  ::google::protobuf::int32 dat2_1_;
  ::google::protobuf::int32 dat2_2_;
  ::google::protobuf::int32 dat2_3_;
  ::google::protobuf::int32 dat2_4_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsSymbolBlock3X5Impl();
};
// -------------------------------------------------------------------

class SymbolBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.SymbolBlock) */ {
 public:
  SymbolBlock();
  virtual ~SymbolBlock();

  SymbolBlock(const SymbolBlock& from);

  inline SymbolBlock& operator=(const SymbolBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymbolBlock(SymbolBlock&& from) noexcept
    : SymbolBlock() {
    *this = ::std::move(from);
  }

  inline SymbolBlock& operator=(SymbolBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SymbolBlock& default_instance();

  enum BlockCase {
    kSb3X5 = 1,
    BLOCK_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolBlock* internal_default_instance() {
    return reinterpret_cast<const SymbolBlock*>(
               &_SymbolBlock_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(SymbolBlock* other);
  friend void swap(SymbolBlock& a, SymbolBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymbolBlock* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SymbolBlock>(NULL);
  }

  SymbolBlock* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SymbolBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SymbolBlock& from);
  void MergeFrom(const SymbolBlock& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SymbolBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .natashapb.SymbolBlock3X5 sb3x5 = 1;
  bool has_sb3x5() const;
  void clear_sb3x5();
  static const int kSb3X5FieldNumber = 1;
  const ::natashapb::SymbolBlock3X5& sb3x5() const;
  ::natashapb::SymbolBlock3X5* release_sb3x5();
  ::natashapb::SymbolBlock3X5* mutable_sb3x5();
  void set_allocated_sb3x5(::natashapb::SymbolBlock3X5* sb3x5);

  BlockCase block_case() const;
  // @@protoc_insertion_point(class_scope:natashapb.SymbolBlock)
 private:
  void set_has_sb3x5();

  inline bool has_block() const;
  void clear_block();
  inline void clear_has_block();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union BlockUnion {
    BlockUnion() {}
    ::natashapb::SymbolBlock3X5* sb3x5_;
  } block_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsSymbolBlockImpl();
};
// -------------------------------------------------------------------

class StaticCascadingRandomResult3X5 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.StaticCascadingRandomResult3X5) */ {
 public:
  StaticCascadingRandomResult3X5();
  virtual ~StaticCascadingRandomResult3X5();

  StaticCascadingRandomResult3X5(const StaticCascadingRandomResult3X5& from);

  inline StaticCascadingRandomResult3X5& operator=(const StaticCascadingRandomResult3X5& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticCascadingRandomResult3X5(StaticCascadingRandomResult3X5&& from) noexcept
    : StaticCascadingRandomResult3X5() {
    *this = ::std::move(from);
  }

  inline StaticCascadingRandomResult3X5& operator=(StaticCascadingRandomResult3X5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticCascadingRandomResult3X5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticCascadingRandomResult3X5* internal_default_instance() {
    return reinterpret_cast<const StaticCascadingRandomResult3X5*>(
               &_StaticCascadingRandomResult3X5_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(StaticCascadingRandomResult3X5* other);
  friend void swap(StaticCascadingRandomResult3X5& a, StaticCascadingRandomResult3X5& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticCascadingRandomResult3X5* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StaticCascadingRandomResult3X5>(NULL);
  }

  StaticCascadingRandomResult3X5* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StaticCascadingRandomResult3X5>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StaticCascadingRandomResult3X5& from);
  void MergeFrom(const StaticCascadingRandomResult3X5& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StaticCascadingRandomResult3X5* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .natashapb.SymbolBlock symbolblock = 3;
  bool has_symbolblock() const;
  void clear_symbolblock();
  static const int kSymbolblockFieldNumber = 3;
  const ::natashapb::SymbolBlock& symbolblock() const;
  ::natashapb::SymbolBlock* release_symbolblock();
  ::natashapb::SymbolBlock* mutable_symbolblock();
  void set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock);

  // int32 reelsIndex = 1;
  void clear_reelsindex();
  static const int kReelsIndexFieldNumber = 1;
  ::google::protobuf::int32 reelsindex() const;
  void set_reelsindex(::google::protobuf::int32 value);

  // int32 downNums = 2;
  void clear_downnums();
  static const int kDownNumsFieldNumber = 2;
  ::google::protobuf::int32 downnums() const;
  void set_downnums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.StaticCascadingRandomResult3X5)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::natashapb::SymbolBlock* symbolblock_;
  ::google::protobuf::int32 reelsindex_;
  ::google::protobuf::int32 downnums_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsStaticCascadingRandomResult3X5Impl();
};
// -------------------------------------------------------------------

class NormalReelsRandomResult3X5 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.NormalReelsRandomResult3X5) */ {
 public:
  NormalReelsRandomResult3X5();
  virtual ~NormalReelsRandomResult3X5();

  NormalReelsRandomResult3X5(const NormalReelsRandomResult3X5& from);

  inline NormalReelsRandomResult3X5& operator=(const NormalReelsRandomResult3X5& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NormalReelsRandomResult3X5(NormalReelsRandomResult3X5&& from) noexcept
    : NormalReelsRandomResult3X5() {
    *this = ::std::move(from);
  }

  inline NormalReelsRandomResult3X5& operator=(NormalReelsRandomResult3X5&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalReelsRandomResult3X5& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalReelsRandomResult3X5* internal_default_instance() {
    return reinterpret_cast<const NormalReelsRandomResult3X5*>(
               &_NormalReelsRandomResult3X5_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(NormalReelsRandomResult3X5* other);
  friend void swap(NormalReelsRandomResult3X5& a, NormalReelsRandomResult3X5& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NormalReelsRandomResult3X5* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<NormalReelsRandomResult3X5>(NULL);
  }

  NormalReelsRandomResult3X5* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<NormalReelsRandomResult3X5>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NormalReelsRandomResult3X5& from);
  void MergeFrom(const NormalReelsRandomResult3X5& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NormalReelsRandomResult3X5* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 reelsIndex = 1;
  int reelsindex_size() const;
  void clear_reelsindex();
  static const int kReelsIndexFieldNumber = 1;
  ::google::protobuf::int32 reelsindex(int index) const;
  void set_reelsindex(int index, ::google::protobuf::int32 value);
  void add_reelsindex(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      reelsindex() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_reelsindex();

  // .natashapb.SymbolBlock symbolblock = 2;
  bool has_symbolblock() const;
  void clear_symbolblock();
  static const int kSymbolblockFieldNumber = 2;
  const ::natashapb::SymbolBlock& symbolblock() const;
  ::natashapb::SymbolBlock* release_symbolblock();
  ::natashapb::SymbolBlock* mutable_symbolblock();
  void set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock);

  // @@protoc_insertion_point(class_scope:natashapb.NormalReelsRandomResult3X5)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > reelsindex_;
  mutable int _reelsindex_cached_byte_size_;
  ::natashapb::SymbolBlock* symbolblock_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsNormalReelsRandomResult3X5Impl();
};
// -------------------------------------------------------------------

class RandomResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.RandomResult) */ {
 public:
  RandomResult();
  virtual ~RandomResult();

  RandomResult(const RandomResult& from);

  inline RandomResult& operator=(const RandomResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RandomResult(RandomResult&& from) noexcept
    : RandomResult() {
    *this = ::std::move(from);
  }

  inline RandomResult& operator=(RandomResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RandomResult& default_instance();

  enum ResultCase {
    kScrr3X5 = 1,
    kNrrr3X5 = 2,
    RESULT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RandomResult* internal_default_instance() {
    return reinterpret_cast<const RandomResult*>(
               &_RandomResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RandomResult* other);
  friend void swap(RandomResult& a, RandomResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RandomResult* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RandomResult>(NULL);
  }

  RandomResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RandomResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RandomResult& from);
  void MergeFrom(const RandomResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RandomResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Any info = 1000;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1000;
  const ::google::protobuf::Any& info() const;
  ::google::protobuf::Any* release_info();
  ::google::protobuf::Any* mutable_info();
  void set_allocated_info(::google::protobuf::Any* info);

  // .natashapb.StaticCascadingRandomResult3X5 scrr3x5 = 1;
  bool has_scrr3x5() const;
  void clear_scrr3x5();
  static const int kScrr3X5FieldNumber = 1;
  const ::natashapb::StaticCascadingRandomResult3X5& scrr3x5() const;
  ::natashapb::StaticCascadingRandomResult3X5* release_scrr3x5();
  ::natashapb::StaticCascadingRandomResult3X5* mutable_scrr3x5();
  void set_allocated_scrr3x5(::natashapb::StaticCascadingRandomResult3X5* scrr3x5);

  // .natashapb.NormalReelsRandomResult3X5 nrrr3X5 = 2;
  bool has_nrrr3x5() const;
  void clear_nrrr3x5();
  static const int kNrrr3X5FieldNumber = 2;
  const ::natashapb::NormalReelsRandomResult3X5& nrrr3x5() const;
  ::natashapb::NormalReelsRandomResult3X5* release_nrrr3x5();
  ::natashapb::NormalReelsRandomResult3X5* mutable_nrrr3x5();
  void set_allocated_nrrr3x5(::natashapb::NormalReelsRandomResult3X5* nrrr3x5);

  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:natashapb.RandomResult)
 private:
  void set_has_scrr3x5();
  void set_has_nrrr3x5();

  inline bool has_result() const;
  void clear_result();
  inline void clear_has_result();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Any* info_;
  union ResultUnion {
    ResultUnion() {}
    ::natashapb::StaticCascadingRandomResult3X5* scrr3x5_;
    ::natashapb::NormalReelsRandomResult3X5* nrrr3x5_;
  } result_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsRandomResultImpl();
};
// -------------------------------------------------------------------

class Position2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.Position2D) */ {
 public:
  Position2D();
  virtual ~Position2D();

  Position2D(const Position2D& from);

  inline Position2D& operator=(const Position2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position2D(Position2D&& from) noexcept
    : Position2D() {
    *this = ::std::move(from);
  }

  inline Position2D& operator=(Position2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Position2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position2D* internal_default_instance() {
    return reinterpret_cast<const Position2D*>(
               &_Position2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Position2D* other);
  friend void swap(Position2D& a, Position2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position2D* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Position2D>(NULL);
  }

  Position2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<Position2D>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Position2D& from);
  void MergeFrom(const Position2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Position2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.Position2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsPosition2DImpl();
};
// -------------------------------------------------------------------

class GameResultInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameResultInfo) */ {
 public:
  GameResultInfo();
  virtual ~GameResultInfo();

  GameResultInfo(const GameResultInfo& from);

  inline GameResultInfo& operator=(const GameResultInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameResultInfo(GameResultInfo&& from) noexcept
    : GameResultInfo() {
    *this = ::std::move(from);
  }

  inline GameResultInfo& operator=(GameResultInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameResultInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameResultInfo* internal_default_instance() {
    return reinterpret_cast<const GameResultInfo*>(
               &_GameResultInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(GameResultInfo* other);
  friend void swap(GameResultInfo& a, GameResultInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameResultInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameResultInfo>(NULL);
  }

  GameResultInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameResultInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameResultInfo& from);
  void MergeFrom(const GameResultInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameResultInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .natashapb.Position2D lstPos = 2;
  int lstpos_size() const;
  void clear_lstpos();
  static const int kLstPosFieldNumber = 2;
  ::natashapb::Position2D* mutable_lstpos(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::Position2D >*
      mutable_lstpos();
  const ::natashapb::Position2D& lstpos(int index) const;
  ::natashapb::Position2D* add_lstpos();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::Position2D >&
      lstpos() const;

  // repeated int32 lstSymbol = 4;
  int lstsymbol_size() const;
  void clear_lstsymbol();
  static const int kLstSymbolFieldNumber = 4;
  ::google::protobuf::int32 lstsymbol(int index) const;
  void set_lstsymbol(int index, ::google::protobuf::int32 value);
  void add_lstsymbol(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      lstsymbol() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_lstsymbol();

  // .google.protobuf.Any exDat = 1000;
  bool has_exdat() const;
  void clear_exdat();
  static const int kExDatFieldNumber = 1000;
  const ::google::protobuf::Any& exdat() const;
  ::google::protobuf::Any* release_exdat();
  ::google::protobuf::Any* mutable_exdat();
  void set_allocated_exdat(::google::protobuf::Any* exdat);

  // .natashapb.GAMERESULTTYPE typeGameResult = 1;
  void clear_typegameresult();
  static const int kTypeGameResultFieldNumber = 1;
  ::natashapb::GAMERESULTTYPE typegameresult() const;
  void set_typegameresult(::natashapb::GAMERESULTTYPE value);

  // int32 symbol = 3;
  void clear_symbol();
  static const int kSymbolFieldNumber = 3;
  ::google::protobuf::int32 symbol() const;
  void set_symbol(::google::protobuf::int32 value);

  // int64 win = 5;
  void clear_win();
  static const int kWinFieldNumber = 5;
  ::google::protobuf::int64 win() const;
  void set_win(::google::protobuf::int64 value);

  // int64 realWin = 6;
  void clear_realwin();
  static const int kRealWinFieldNumber = 6;
  ::google::protobuf::int64 realwin() const;
  void set_realwin(::google::protobuf::int64 value);

  // int64 mul = 7;
  void clear_mul();
  static const int kMulFieldNumber = 7;
  ::google::protobuf::int64 mul() const;
  void set_mul(::google::protobuf::int64 value);

  // int64 prize = 8;
  void clear_prize();
  static const int kPrizeFieldNumber = 8;
  ::google::protobuf::int64 prize() const;
  void set_prize(::google::protobuf::int64 value);

  // int32 lineIndex = 9;
  void clear_lineindex();
  static const int kLineIndexFieldNumber = 9;
  ::google::protobuf::int32 lineindex() const;
  void set_lineindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.GameResultInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::Position2D > lstpos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > lstsymbol_;
  mutable int _lstsymbol_cached_byte_size_;
  ::google::protobuf::Any* exdat_;
  int typegameresult_;
  ::google::protobuf::int32 symbol_;
  ::google::protobuf::int64 win_;
  ::google::protobuf::int64 realwin_;
  ::google::protobuf::int64 mul_;
  ::google::protobuf::int64 prize_;
  ::google::protobuf::int32 lineindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameResultInfoImpl();
};
// -------------------------------------------------------------------

class SpinResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.SpinResult) */ {
 public:
  SpinResult();
  virtual ~SpinResult();

  SpinResult(const SpinResult& from);

  inline SpinResult& operator=(const SpinResult& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SpinResult(SpinResult&& from) noexcept
    : SpinResult() {
    *this = ::std::move(from);
  }

  inline SpinResult& operator=(SpinResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SpinResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpinResult* internal_default_instance() {
    return reinterpret_cast<const SpinResult*>(
               &_SpinResult_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(SpinResult* other);
  friend void swap(SpinResult& a, SpinResult& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SpinResult* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SpinResult>(NULL);
  }

  SpinResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SpinResult>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SpinResult& from);
  void MergeFrom(const SpinResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SpinResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .natashapb.GameResultInfo lstGRI = 3;
  int lstgri_size() const;
  void clear_lstgri();
  static const int kLstGRIFieldNumber = 3;
  ::natashapb::GameResultInfo* mutable_lstgri(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::GameResultInfo >*
      mutable_lstgri();
  const ::natashapb::GameResultInfo& lstgri(int index) const;
  ::natashapb::GameResultInfo* add_lstgri();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::GameResultInfo >&
      lstgri() const;

  // .natashapb.SymbolBlock symbolblock = 100;
  bool has_symbolblock() const;
  void clear_symbolblock();
  static const int kSymbolblockFieldNumber = 100;
  const ::natashapb::SymbolBlock& symbolblock() const;
  ::natashapb::SymbolBlock* release_symbolblock();
  ::natashapb::SymbolBlock* mutable_symbolblock();
  void set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock);

  // .natashapb.GameCtrlSpin spin = 101;
  bool has_spin() const;
  void clear_spin();
  static const int kSpinFieldNumber = 101;
  const ::natashapb::GameCtrlSpin& spin() const;
  ::natashapb::GameCtrlSpin* release_spin();
  ::natashapb::GameCtrlSpin* mutable_spin();
  void set_allocated_spin(::natashapb::GameCtrlSpin* spin);

  // .google.protobuf.Any exDat = 1000;
  bool has_exdat() const;
  void clear_exdat();
  static const int kExDatFieldNumber = 1000;
  const ::google::protobuf::Any& exdat() const;
  ::google::protobuf::Any* release_exdat();
  ::google::protobuf::Any* mutable_exdat();
  void set_allocated_exdat(::google::protobuf::Any* exdat);

  // int64 win = 1;
  void clear_win();
  static const int kWinFieldNumber = 1;
  ::google::protobuf::int64 win() const;
  void set_win(::google::protobuf::int64 value);

  // int64 realWin = 2;
  void clear_realwin();
  static const int kRealWinFieldNumber = 2;
  ::google::protobuf::int64 realwin() const;
  void set_realwin(::google::protobuf::int64 value);

  // int32 fgNums = 4;
  void clear_fgnums();
  static const int kFgNumsFieldNumber = 4;
  ::google::protobuf::int32 fgnums() const;
  void set_fgnums(::google::protobuf::int32 value);

  // bool inFG = 5;
  void clear_infg();
  static const int kInFGFieldNumber = 5;
  bool infg() const;
  void set_infg(bool value);

  // bool inBonus = 6;
  void clear_inbonus();
  static const int kInBonusFieldNumber = 6;
  bool inbonus() const;
  void set_inbonus(bool value);

  // bool inJackpot = 7;
  void clear_injackpot();
  static const int kInJackpotFieldNumber = 7;
  bool injackpot() const;
  void set_injackpot(bool value);

  // bool inCommonJackpot = 8;
  void clear_incommonjackpot();
  static const int kInCommonJackpotFieldNumber = 8;
  bool incommonjackpot() const;
  void set_incommonjackpot(bool value);

  // int64 awardMul = 10;
  void clear_awardmul();
  static const int kAwardMulFieldNumber = 10;
  ::google::protobuf::int64 awardmul() const;
  void set_awardmul(::google::protobuf::int64 value);

  // bool inRespin = 9;
  void clear_inrespin();
  static const int kInRespinFieldNumber = 9;
  bool inrespin() const;
  void set_inrespin(bool value);

  // int32 realFGNums = 11;
  void clear_realfgnums();
  static const int kRealFGNumsFieldNumber = 11;
  ::google::protobuf::int32 realfgnums() const;
  void set_realfgnums(::google::protobuf::int32 value);

  // int32 specialTriggered = 12;
  void clear_specialtriggered();
  static const int kSpecialTriggeredFieldNumber = 12;
  ::google::protobuf::int32 specialtriggered() const;
  void set_specialtriggered(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.SpinResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::GameResultInfo > lstgri_;
  ::natashapb::SymbolBlock* symbolblock_;
  ::natashapb::GameCtrlSpin* spin_;
  ::google::protobuf::Any* exdat_;
  ::google::protobuf::int64 win_;
  ::google::protobuf::int64 realwin_;
  ::google::protobuf::int32 fgnums_;
  bool infg_;
  bool inbonus_;
  bool injackpot_;
  bool incommonjackpot_;
  ::google::protobuf::int64 awardmul_;
  bool inrespin_;
  ::google::protobuf::int32 realfgnums_;
  ::google::protobuf::int32 specialtriggered_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsSpinResultImpl();
};
// -------------------------------------------------------------------

class GameCtrlID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrlID) */ {
 public:
  GameCtrlID();
  virtual ~GameCtrlID();

  GameCtrlID(const GameCtrlID& from);

  inline GameCtrlID& operator=(const GameCtrlID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrlID(GameCtrlID&& from) noexcept
    : GameCtrlID() {
    *this = ::std::move(from);
  }

  inline GameCtrlID& operator=(GameCtrlID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrlID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrlID* internal_default_instance() {
    return reinterpret_cast<const GameCtrlID*>(
               &_GameCtrlID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(GameCtrlID* other);
  friend void swap(GameCtrlID& a, GameCtrlID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrlID* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlID>(NULL);
  }

  GameCtrlID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlID>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrlID& from);
  void MergeFrom(const GameCtrlID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrlID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 ctrlID = 1;
  void clear_ctrlid();
  static const int kCtrlIDFieldNumber = 1;
  ::google::protobuf::int64 ctrlid() const;
  void set_ctrlid(::google::protobuf::int64 value);

  // int64 baseID = 2;
  void clear_baseid();
  static const int kBaseIDFieldNumber = 2;
  ::google::protobuf::int64 baseid() const;
  void set_baseid(::google::protobuf::int64 value);

  // int64 parentID = 3;
  void clear_parentid();
  static const int kParentIDFieldNumber = 3;
  ::google::protobuf::int64 parentid() const;
  void set_parentid(::google::protobuf::int64 value);

  // .natashapb.GAMEMODTYPE gameMod = 4;
  void clear_gamemod();
  static const int kGameModFieldNumber = 4;
  ::natashapb::GAMEMODTYPE gamemod() const;
  void set_gamemod(::natashapb::GAMEMODTYPE value);

  // @@protoc_insertion_point(class_scope:natashapb.GameCtrlID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 ctrlid_;
  ::google::protobuf::int64 baseid_;
  ::google::protobuf::int64 parentid_;
  int gamemod_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlIDImpl();
};
// -------------------------------------------------------------------

class BaseCascadingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.BaseCascadingInfo) */ {
 public:
  BaseCascadingInfo();
  virtual ~BaseCascadingInfo();

  BaseCascadingInfo(const BaseCascadingInfo& from);

  inline BaseCascadingInfo& operator=(const BaseCascadingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseCascadingInfo(BaseCascadingInfo&& from) noexcept
    : BaseCascadingInfo() {
    *this = ::std::move(from);
  }

  inline BaseCascadingInfo& operator=(BaseCascadingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseCascadingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseCascadingInfo* internal_default_instance() {
    return reinterpret_cast<const BaseCascadingInfo*>(
               &_BaseCascadingInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(BaseCascadingInfo* other);
  friend void swap(BaseCascadingInfo& a, BaseCascadingInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseCascadingInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BaseCascadingInfo>(NULL);
  }

  BaseCascadingInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BaseCascadingInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseCascadingInfo& from);
  void MergeFrom(const BaseCascadingInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseCascadingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .natashapb.SymbolBlock symbolblock = 100;
  bool has_symbolblock() const;
  void clear_symbolblock();
  static const int kSymbolblockFieldNumber = 100;
  const ::natashapb::SymbolBlock& symbolblock() const;
  ::natashapb::SymbolBlock* release_symbolblock();
  ::natashapb::SymbolBlock* mutable_symbolblock();
  void set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock);

  // int64 curBet = 1;
  void clear_curbet();
  static const int kCurBetFieldNumber = 1;
  ::google::protobuf::int64 curbet() const;
  void set_curbet(::google::protobuf::int64 value);

  // int32 curLines = 2;
  void clear_curlines();
  static const int kCurLinesFieldNumber = 2;
  ::google::protobuf::int32 curlines() const;
  void set_curlines(::google::protobuf::int32 value);

  // int32 curTimes = 3;
  void clear_curtimes();
  static const int kCurTimesFieldNumber = 3;
  ::google::protobuf::int32 curtimes() const;
  void set_curtimes(::google::protobuf::int32 value);

  // int64 turnWin = 5;
  void clear_turnwin();
  static const int kTurnWinFieldNumber = 5;
  ::google::protobuf::int64 turnwin() const;
  void set_turnwin(::google::protobuf::int64 value);

  // int32 turnNums = 4;
  void clear_turnnums();
  static const int kTurnNumsFieldNumber = 4;
  ::google::protobuf::int32 turnnums() const;
  void set_turnnums(::google::protobuf::int32 value);

  // .natashapb.CASCADINGFREESTATE freeState = 6;
  void clear_freestate();
  static const int kFreeStateFieldNumber = 6;
  ::natashapb::CASCADINGFREESTATE freestate() const;
  void set_freestate(::natashapb::CASCADINGFREESTATE value);

  // bool isEnd = 7;
  void clear_isend();
  static const int kIsEndFieldNumber = 7;
  bool isend() const;
  void set_isend(bool value);

  // @@protoc_insertion_point(class_scope:natashapb.BaseCascadingInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::natashapb::SymbolBlock* symbolblock_;
  ::google::protobuf::int64 curbet_;
  ::google::protobuf::int32 curlines_;
  ::google::protobuf::int32 curtimes_;
  ::google::protobuf::int64 turnwin_;
  ::google::protobuf::int32 turnnums_;
  int freestate_;
  bool isend_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsBaseCascadingInfoImpl();
};
// -------------------------------------------------------------------

class FGCache : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.FGCache) */ {
 public:
  FGCache();
  virtual ~FGCache();

  FGCache(const FGCache& from);

  inline FGCache& operator=(const FGCache& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FGCache(FGCache&& from) noexcept
    : FGCache() {
    *this = ::std::move(from);
  }

  inline FGCache& operator=(FGCache&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FGCache& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FGCache* internal_default_instance() {
    return reinterpret_cast<const FGCache*>(
               &_FGCache_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(FGCache* other);
  friend void swap(FGCache& a, FGCache& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FGCache* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FGCache>(NULL);
  }

  FGCache* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<FGCache>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FGCache& from);
  void MergeFrom(const FGCache& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FGCache* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 fgNums = 1;
  void clear_fgnums();
  static const int kFgNumsFieldNumber = 1;
  ::google::protobuf::int32 fgnums() const;
  void set_fgnums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.FGCache)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 fgnums_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsFGCacheImpl();
};
// -------------------------------------------------------------------

class BaseFreeInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.BaseFreeInfo) */ {
 public:
  BaseFreeInfo();
  virtual ~BaseFreeInfo();

  BaseFreeInfo(const BaseFreeInfo& from);

  inline BaseFreeInfo& operator=(const BaseFreeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BaseFreeInfo(BaseFreeInfo&& from) noexcept
    : BaseFreeInfo() {
    *this = ::std::move(from);
  }

  inline BaseFreeInfo& operator=(BaseFreeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseFreeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseFreeInfo* internal_default_instance() {
    return reinterpret_cast<const BaseFreeInfo*>(
               &_BaseFreeInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(BaseFreeInfo* other);
  friend void swap(BaseFreeInfo& a, BaseFreeInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BaseFreeInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BaseFreeInfo>(NULL);
  }

  BaseFreeInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BaseFreeInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BaseFreeInfo& from);
  void MergeFrom(const BaseFreeInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BaseFreeInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 curBet = 1;
  void clear_curbet();
  static const int kCurBetFieldNumber = 1;
  ::google::protobuf::int64 curbet() const;
  void set_curbet(::google::protobuf::int64 value);

  // int32 curLines = 2;
  void clear_curlines();
  static const int kCurLinesFieldNumber = 2;
  ::google::protobuf::int32 curlines() const;
  void set_curlines(::google::protobuf::int32 value);

  // int32 curTimes = 3;
  void clear_curtimes();
  static const int kCurTimesFieldNumber = 3;
  ::google::protobuf::int32 curtimes() const;
  void set_curtimes(::google::protobuf::int32 value);

  // int64 totalWin = 4;
  void clear_totalwin();
  static const int kTotalWinFieldNumber = 4;
  ::google::protobuf::int64 totalwin() const;
  void set_totalwin(::google::protobuf::int64 value);

  // int32 lastNums = 5;
  void clear_lastnums();
  static const int kLastNumsFieldNumber = 5;
  ::google::protobuf::int32 lastnums() const;
  void set_lastnums(::google::protobuf::int32 value);

  // int32 curNums = 6;
  void clear_curnums();
  static const int kCurNumsFieldNumber = 6;
  ::google::protobuf::int32 curnums() const;
  void set_curnums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.BaseFreeInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 curbet_;
  ::google::protobuf::int32 curlines_;
  ::google::protobuf::int32 curtimes_;
  ::google::protobuf::int64 totalwin_;
  ::google::protobuf::int32 lastnums_;
  ::google::protobuf::int32 curnums_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsBaseFreeInfoImpl();
};
// -------------------------------------------------------------------

class RespinHistory : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.RespinHistory) */ {
 public:
  RespinHistory();
  virtual ~RespinHistory();

  RespinHistory(const RespinHistory& from);

  inline RespinHistory& operator=(const RespinHistory& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RespinHistory(RespinHistory&& from) noexcept
    : RespinHistory() {
    *this = ::std::move(from);
  }

  inline RespinHistory& operator=(RespinHistory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RespinHistory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespinHistory* internal_default_instance() {
    return reinterpret_cast<const RespinHistory*>(
               &_RespinHistory_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(RespinHistory* other);
  friend void swap(RespinHistory& a, RespinHistory& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RespinHistory* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RespinHistory>(NULL);
  }

  RespinHistory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RespinHistory>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RespinHistory& from);
  void MergeFrom(const RespinHistory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RespinHistory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 realWin = 1;
  void clear_realwin();
  static const int kRealWinFieldNumber = 1;
  ::google::protobuf::int64 realwin() const;
  void set_realwin(::google::protobuf::int64 value);

  // int64 win = 2;
  void clear_win();
  static const int kWinFieldNumber = 2;
  ::google::protobuf::int64 win() const;
  void set_win(::google::protobuf::int64 value);

  // int64 mul = 3;
  void clear_mul();
  static const int kMulFieldNumber = 3;
  ::google::protobuf::int64 mul() const;
  void set_mul(::google::protobuf::int64 value);

  // bool isSpecial = 4;
  void clear_isspecial();
  static const int kIsSpecialFieldNumber = 4;
  bool isspecial() const;
  void set_isspecial(bool value);

  // @@protoc_insertion_point(class_scope:natashapb.RespinHistory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 realwin_;
  ::google::protobuf::int64 win_;
  ::google::protobuf::int64 mul_;
  bool isspecial_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsRespinHistoryImpl();
};
// -------------------------------------------------------------------

class RespinHistoryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.RespinHistoryList) */ {
 public:
  RespinHistoryList();
  virtual ~RespinHistoryList();

  RespinHistoryList(const RespinHistoryList& from);

  inline RespinHistoryList& operator=(const RespinHistoryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RespinHistoryList(RespinHistoryList&& from) noexcept
    : RespinHistoryList() {
    *this = ::std::move(from);
  }

  inline RespinHistoryList& operator=(RespinHistoryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RespinHistoryList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespinHistoryList* internal_default_instance() {
    return reinterpret_cast<const RespinHistoryList*>(
               &_RespinHistoryList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(RespinHistoryList* other);
  friend void swap(RespinHistoryList& a, RespinHistoryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RespinHistoryList* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RespinHistoryList>(NULL);
  }

  RespinHistoryList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RespinHistoryList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RespinHistoryList& from);
  void MergeFrom(const RespinHistoryList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RespinHistoryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .natashapb.RespinHistory lst = 1;
  int lst_size() const;
  void clear_lst();
  static const int kLstFieldNumber = 1;
  ::natashapb::RespinHistory* mutable_lst(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::RespinHistory >*
      mutable_lst();
  const ::natashapb::RespinHistory& lst(int index) const;
  ::natashapb::RespinHistory* add_lst();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::RespinHistory >&
      lst() const;

  // @@protoc_insertion_point(class_scope:natashapb.RespinHistoryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::RespinHistory > lst_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsRespinHistoryListImpl();
};
// -------------------------------------------------------------------

class UserGameModInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.UserGameModInfo) */ {
 public:
  UserGameModInfo();
  virtual ~UserGameModInfo();

  UserGameModInfo(const UserGameModInfo& from);

  inline UserGameModInfo& operator=(const UserGameModInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserGameModInfo(UserGameModInfo&& from) noexcept
    : UserGameModInfo() {
    *this = ::std::move(from);
  }

  inline UserGameModInfo& operator=(UserGameModInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGameModInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserGameModInfo* internal_default_instance() {
    return reinterpret_cast<const UserGameModInfo*>(
               &_UserGameModInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(UserGameModInfo* other);
  friend void swap(UserGameModInfo& a, UserGameModInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserGameModInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserGameModInfo>(NULL);
  }

  UserGameModInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserGameModInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserGameModInfo& from);
  void MergeFrom(const UserGameModInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserGameModInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .natashapb.RandomResult randomResult = 10;
  bool has_randomresult() const;
  void clear_randomresult();
  static const int kRandomResultFieldNumber = 10;
  const ::natashapb::RandomResult& randomresult() const;
  ::natashapb::RandomResult* release_randomresult();
  ::natashapb::RandomResult* mutable_randomresult();
  void set_allocated_randomresult(::natashapb::RandomResult* randomresult);

  // .natashapb.SpinResult spinResult = 11;
  bool has_spinresult() const;
  void clear_spinresult();
  static const int kSpinResultFieldNumber = 11;
  const ::natashapb::SpinResult& spinresult() const;
  ::natashapb::SpinResult* release_spinresult();
  ::natashapb::SpinResult* mutable_spinresult();
  void set_allocated_spinresult(::natashapb::SpinResult* spinresult);

  // .natashapb.GameCtrlID gameCtrlID = 12;
  bool has_gamectrlid() const;
  void clear_gamectrlid();
  static const int kGameCtrlIDFieldNumber = 12;
  const ::natashapb::GameCtrlID& gamectrlid() const;
  ::natashapb::GameCtrlID* release_gamectrlid();
  ::natashapb::GameCtrlID* mutable_gamectrlid();
  void set_allocated_gamectrlid(::natashapb::GameCtrlID* gamectrlid);

  // .natashapb.BaseCascadingInfo cascadingInfo = 13;
  bool has_cascadinginfo() const;
  void clear_cascadinginfo();
  static const int kCascadingInfoFieldNumber = 13;
  const ::natashapb::BaseCascadingInfo& cascadinginfo() const;
  ::natashapb::BaseCascadingInfo* release_cascadinginfo();
  ::natashapb::BaseCascadingInfo* mutable_cascadinginfo();
  void set_allocated_cascadinginfo(::natashapb::BaseCascadingInfo* cascadinginfo);

  // .natashapb.RespinHistoryList lstHistory = 14;
  bool has_lsthistory() const;
  void clear_lsthistory();
  static const int kLstHistoryFieldNumber = 14;
  const ::natashapb::RespinHistoryList& lsthistory() const;
  ::natashapb::RespinHistoryList* release_lsthistory();
  ::natashapb::RespinHistoryList* mutable_lsthistory();
  void set_allocated_lsthistory(::natashapb::RespinHistoryList* lsthistory);

  // .natashapb.BaseFreeInfo freeInfo = 15;
  bool has_freeinfo() const;
  void clear_freeinfo();
  static const int kFreeInfoFieldNumber = 15;
  const ::natashapb::BaseFreeInfo& freeinfo() const;
  ::natashapb::BaseFreeInfo* release_freeinfo();
  ::natashapb::BaseFreeInfo* mutable_freeinfo();
  void set_allocated_freeinfo(::natashapb::BaseFreeInfo* freeinfo);

  // .natashapb.FGCache fgCache = 16;
  bool has_fgcache() const;
  void clear_fgcache();
  static const int kFgCacheFieldNumber = 16;
  const ::natashapb::FGCache& fgcache() const;
  ::natashapb::FGCache* release_fgcache();
  ::natashapb::FGCache* mutable_fgcache();
  void set_allocated_fgcache(::natashapb::FGCache* fgcache);

  // .natashapb.SymbolBlock symbolblock = 100;
  bool has_symbolblock() const;
  void clear_symbolblock();
  static const int kSymbolblockFieldNumber = 100;
  const ::natashapb::SymbolBlock& symbolblock() const;
  ::natashapb::SymbolBlock* release_symbolblock();
  ::natashapb::SymbolBlock* mutable_symbolblock();
  void set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock);

  // .google.protobuf.Any exDat = 1000;
  bool has_exdat() const;
  void clear_exdat();
  static const int kExDatFieldNumber = 1000;
  const ::google::protobuf::Any& exdat() const;
  ::google::protobuf::Any* release_exdat();
  ::google::protobuf::Any* mutable_exdat();
  void set_allocated_exdat(::google::protobuf::Any* exdat);

  // int32 ver = 1;
  void clear_ver();
  static const int kVerFieldNumber = 1;
  ::google::protobuf::int32 ver() const;
  void set_ver(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.UserGameModInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::natashapb::RandomResult* randomresult_;
  ::natashapb::SpinResult* spinresult_;
  ::natashapb::GameCtrlID* gamectrlid_;
  ::natashapb::BaseCascadingInfo* cascadinginfo_;
  ::natashapb::RespinHistoryList* lsthistory_;
  ::natashapb::BaseFreeInfo* freeinfo_;
  ::natashapb::FGCache* fgcache_;
  ::natashapb::SymbolBlock* symbolblock_;
  ::google::protobuf::Any* exdat_;
  ::google::protobuf::int32 ver_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsUserGameModInfoImpl();
};
// -------------------------------------------------------------------

class UserGameLogicInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.UserGameLogicInfo) */ {
 public:
  UserGameLogicInfo();
  virtual ~UserGameLogicInfo();

  UserGameLogicInfo(const UserGameLogicInfo& from);

  inline UserGameLogicInfo& operator=(const UserGameLogicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UserGameLogicInfo(UserGameLogicInfo&& from) noexcept
    : UserGameLogicInfo() {
    *this = ::std::move(from);
  }

  inline UserGameLogicInfo& operator=(UserGameLogicInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserGameLogicInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserGameLogicInfo* internal_default_instance() {
    return reinterpret_cast<const UserGameLogicInfo*>(
               &_UserGameLogicInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(UserGameLogicInfo* other);
  friend void swap(UserGameLogicInfo& a, UserGameLogicInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UserGameLogicInfo* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserGameLogicInfo>(NULL);
  }

  UserGameLogicInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<UserGameLogicInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UserGameLogicInfo& from);
  void MergeFrom(const UserGameLogicInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UserGameLogicInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string configName = 50;
  void clear_configname();
  static const int kConfigNameFieldNumber = 50;
  const ::std::string& configname() const;
  void set_configname(const ::std::string& value);
  #if LANG_CXX11
  void set_configname(::std::string&& value);
  #endif
  void set_configname(const char* value);
  void set_configname(const char* value, size_t size);
  ::std::string* mutable_configname();
  ::std::string* release_configname();
  void set_allocated_configname(::std::string* configname);

  // .natashapb.UserGameModInfo basegame = 1;
  bool has_basegame() const;
  void clear_basegame();
  static const int kBasegameFieldNumber = 1;
  const ::natashapb::UserGameModInfo& basegame() const;
  ::natashapb::UserGameModInfo* release_basegame();
  ::natashapb::UserGameModInfo* mutable_basegame();
  void set_allocated_basegame(::natashapb::UserGameModInfo* basegame);

  // .natashapb.UserGameModInfo freegame = 2;
  bool has_freegame() const;
  void clear_freegame();
  static const int kFreegameFieldNumber = 2;
  const ::natashapb::UserGameModInfo& freegame() const;
  ::natashapb::UserGameModInfo* release_freegame();
  ::natashapb::UserGameModInfo* mutable_freegame();
  void set_allocated_freegame(::natashapb::UserGameModInfo* freegame);

  // .natashapb.UserGameModInfo bonus = 3;
  bool has_bonus() const;
  void clear_bonus();
  static const int kBonusFieldNumber = 3;
  const ::natashapb::UserGameModInfo& bonus() const;
  ::natashapb::UserGameModInfo* release_bonus();
  ::natashapb::UserGameModInfo* mutable_bonus();
  void set_allocated_bonus(::natashapb::UserGameModInfo* bonus);

  // .natashapb.UserGameModInfo jackpot = 4;
  bool has_jackpot() const;
  void clear_jackpot();
  static const int kJackpotFieldNumber = 4;
  const ::natashapb::UserGameModInfo& jackpot() const;
  ::natashapb::UserGameModInfo* release_jackpot();
  ::natashapb::UserGameModInfo* mutable_jackpot();
  void set_allocated_jackpot(::natashapb::UserGameModInfo* jackpot);

  // .natashapb.UserGameModInfo commonjackpot = 5;
  bool has_commonjackpot() const;
  void clear_commonjackpot();
  static const int kCommonjackpotFieldNumber = 5;
  const ::natashapb::UserGameModInfo& commonjackpot() const;
  ::natashapb::UserGameModInfo* release_commonjackpot();
  ::natashapb::UserGameModInfo* mutable_commonjackpot();
  void set_allocated_commonjackpot(::natashapb::UserGameModInfo* commonjackpot);

  // .natashapb.UserGameModInfo respin = 6;
  bool has_respin() const;
  void clear_respin();
  static const int kRespinFieldNumber = 6;
  const ::natashapb::UserGameModInfo& respin() const;
  ::natashapb::UserGameModInfo* release_respin();
  ::natashapb::UserGameModInfo* mutable_respin();
  void set_allocated_respin(::natashapb::UserGameModInfo* respin);

  // .natashapb.GAMEMODTYPE nextGameModType = 101;
  void clear_nextgamemodtype();
  static const int kNextGameModTypeFieldNumber = 101;
  ::natashapb::GAMEMODTYPE nextgamemodtype() const;
  void set_nextgamemodtype(::natashapb::GAMEMODTYPE value);

  // int64 curBet = 31;
  void clear_curbet();
  static const int kCurBetFieldNumber = 31;
  ::google::protobuf::int64 curbet() const;
  void set_curbet(::google::protobuf::int64 value);

  // int64 realWin = 32;
  void clear_realwin();
  static const int kRealWinFieldNumber = 32;
  ::google::protobuf::int64 realwin() const;
  void set_realwin(::google::protobuf::int64 value);

  // bool isCompleted = 30;
  void clear_iscompleted();
  static const int kIsCompletedFieldNumber = 30;
  bool iscompleted() const;
  void set_iscompleted(bool value);

  // .natashapb.GAMEMODTYPE curGameModType = 100;
  void clear_curgamemodtype();
  static const int kCurGameModTypeFieldNumber = 100;
  ::natashapb::GAMEMODTYPE curgamemodtype() const;
  void set_curgamemodtype(::natashapb::GAMEMODTYPE value);

  // @@protoc_insertion_point(class_scope:natashapb.UserGameLogicInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr configname_;
  ::natashapb::UserGameModInfo* basegame_;
  ::natashapb::UserGameModInfo* freegame_;
  ::natashapb::UserGameModInfo* bonus_;
  ::natashapb::UserGameModInfo* jackpot_;
  ::natashapb::UserGameModInfo* commonjackpot_;
  ::natashapb::UserGameModInfo* respin_;
  int nextgamemodtype_;
  ::google::protobuf::int64 curbet_;
  ::google::protobuf::int64 realwin_;
  bool iscompleted_;
  int curgamemodtype_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsUserGameLogicInfoImpl();
};
// -------------------------------------------------------------------

class GameCtrlSpin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrlSpin) */ {
 public:
  GameCtrlSpin();
  virtual ~GameCtrlSpin();

  GameCtrlSpin(const GameCtrlSpin& from);

  inline GameCtrlSpin& operator=(const GameCtrlSpin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrlSpin(GameCtrlSpin&& from) noexcept
    : GameCtrlSpin() {
    *this = ::std::move(from);
  }

  inline GameCtrlSpin& operator=(GameCtrlSpin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrlSpin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrlSpin* internal_default_instance() {
    return reinterpret_cast<const GameCtrlSpin*>(
               &_GameCtrlSpin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(GameCtrlSpin* other);
  friend void swap(GameCtrlSpin& a, GameCtrlSpin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrlSpin* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlSpin>(NULL);
  }

  GameCtrlSpin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlSpin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrlSpin& from);
  void MergeFrom(const GameCtrlSpin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrlSpin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 bet = 1;
  void clear_bet();
  static const int kBetFieldNumber = 1;
  ::google::protobuf::int64 bet() const;
  void set_bet(::google::protobuf::int64 value);

  // int32 lines = 2;
  void clear_lines();
  static const int kLinesFieldNumber = 2;
  ::google::protobuf::int32 lines() const;
  void set_lines(::google::protobuf::int32 value);

  // int32 times = 3;
  void clear_times();
  static const int kTimesFieldNumber = 3;
  ::google::protobuf::int32 times() const;
  void set_times(::google::protobuf::int32 value);

  // int64 totalBet = 4;
  void clear_totalbet();
  static const int kTotalBetFieldNumber = 4;
  ::google::protobuf::int64 totalbet() const;
  void set_totalbet(::google::protobuf::int64 value);

  // int64 realBet = 5;
  void clear_realbet();
  static const int kRealBetFieldNumber = 5;
  ::google::protobuf::int64 realbet() const;
  void set_realbet(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:natashapb.GameCtrlSpin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 bet_;
  ::google::protobuf::int32 lines_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int64 totalbet_;
  ::google::protobuf::int64 realbet_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlSpinImpl();
};
// -------------------------------------------------------------------

class GameCtrlSelectFree : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrlSelectFree) */ {
 public:
  GameCtrlSelectFree();
  virtual ~GameCtrlSelectFree();

  GameCtrlSelectFree(const GameCtrlSelectFree& from);

  inline GameCtrlSelectFree& operator=(const GameCtrlSelectFree& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrlSelectFree(GameCtrlSelectFree&& from) noexcept
    : GameCtrlSelectFree() {
    *this = ::std::move(from);
  }

  inline GameCtrlSelectFree& operator=(GameCtrlSelectFree&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrlSelectFree& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrlSelectFree* internal_default_instance() {
    return reinterpret_cast<const GameCtrlSelectFree*>(
               &_GameCtrlSelectFree_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(GameCtrlSelectFree* other);
  friend void swap(GameCtrlSelectFree& a, GameCtrlSelectFree& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrlSelectFree* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlSelectFree>(NULL);
  }

  GameCtrlSelectFree* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlSelectFree>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrlSelectFree& from);
  void MergeFrom(const GameCtrlSelectFree& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrlSelectFree* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 typeIndex = 1;
  void clear_typeindex();
  static const int kTypeIndexFieldNumber = 1;
  ::google::protobuf::int32 typeindex() const;
  void set_typeindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.GameCtrlSelectFree)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 typeindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlSelectFreeImpl();
};
// -------------------------------------------------------------------

class GameCtrlBonus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrlBonus) */ {
 public:
  GameCtrlBonus();
  virtual ~GameCtrlBonus();

  GameCtrlBonus(const GameCtrlBonus& from);

  inline GameCtrlBonus& operator=(const GameCtrlBonus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrlBonus(GameCtrlBonus&& from) noexcept
    : GameCtrlBonus() {
    *this = ::std::move(from);
  }

  inline GameCtrlBonus& operator=(GameCtrlBonus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrlBonus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrlBonus* internal_default_instance() {
    return reinterpret_cast<const GameCtrlBonus*>(
               &_GameCtrlBonus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(GameCtrlBonus* other);
  friend void swap(GameCtrlBonus& a, GameCtrlBonus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrlBonus* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlBonus>(NULL);
  }

  GameCtrlBonus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlBonus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrlBonus& from);
  void MergeFrom(const GameCtrlBonus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrlBonus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 itemIndex = 1;
  void clear_itemindex();
  static const int kItemIndexFieldNumber = 1;
  ::google::protobuf::int32 itemindex() const;
  void set_itemindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.GameCtrlBonus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 itemindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlBonusImpl();
};
// -------------------------------------------------------------------

class GameCtrlJackpot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrlJackpot) */ {
 public:
  GameCtrlJackpot();
  virtual ~GameCtrlJackpot();

  GameCtrlJackpot(const GameCtrlJackpot& from);

  inline GameCtrlJackpot& operator=(const GameCtrlJackpot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrlJackpot(GameCtrlJackpot&& from) noexcept
    : GameCtrlJackpot() {
    *this = ::std::move(from);
  }

  inline GameCtrlJackpot& operator=(GameCtrlJackpot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrlJackpot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrlJackpot* internal_default_instance() {
    return reinterpret_cast<const GameCtrlJackpot*>(
               &_GameCtrlJackpot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(GameCtrlJackpot* other);
  friend void swap(GameCtrlJackpot& a, GameCtrlJackpot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrlJackpot* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlJackpot>(NULL);
  }

  GameCtrlJackpot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlJackpot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrlJackpot& from);
  void MergeFrom(const GameCtrlJackpot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrlJackpot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 itemIndex = 1;
  void clear_itemindex();
  static const int kItemIndexFieldNumber = 1;
  ::google::protobuf::int32 itemindex() const;
  void set_itemindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.GameCtrlJackpot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 itemindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlJackpotImpl();
};
// -------------------------------------------------------------------

class GameCtrlCommonJackpot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrlCommonJackpot) */ {
 public:
  GameCtrlCommonJackpot();
  virtual ~GameCtrlCommonJackpot();

  GameCtrlCommonJackpot(const GameCtrlCommonJackpot& from);

  inline GameCtrlCommonJackpot& operator=(const GameCtrlCommonJackpot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrlCommonJackpot(GameCtrlCommonJackpot&& from) noexcept
    : GameCtrlCommonJackpot() {
    *this = ::std::move(from);
  }

  inline GameCtrlCommonJackpot& operator=(GameCtrlCommonJackpot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrlCommonJackpot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrlCommonJackpot* internal_default_instance() {
    return reinterpret_cast<const GameCtrlCommonJackpot*>(
               &_GameCtrlCommonJackpot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GameCtrlCommonJackpot* other);
  friend void swap(GameCtrlCommonJackpot& a, GameCtrlCommonJackpot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrlCommonJackpot* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlCommonJackpot>(NULL);
  }

  GameCtrlCommonJackpot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlCommonJackpot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrlCommonJackpot& from);
  void MergeFrom(const GameCtrlCommonJackpot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrlCommonJackpot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 itemIndex = 1;
  void clear_itemindex();
  static const int kItemIndexFieldNumber = 1;
  ::google::protobuf::int32 itemindex() const;
  void set_itemindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.GameCtrlCommonJackpot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 itemindex_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlCommonJackpotImpl();
};
// -------------------------------------------------------------------

class GameCtrlAwardSpin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrlAwardSpin) */ {
 public:
  GameCtrlAwardSpin();
  virtual ~GameCtrlAwardSpin();

  GameCtrlAwardSpin(const GameCtrlAwardSpin& from);

  inline GameCtrlAwardSpin& operator=(const GameCtrlAwardSpin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrlAwardSpin(GameCtrlAwardSpin&& from) noexcept
    : GameCtrlAwardSpin() {
    *this = ::std::move(from);
  }

  inline GameCtrlAwardSpin& operator=(GameCtrlAwardSpin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrlAwardSpin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrlAwardSpin* internal_default_instance() {
    return reinterpret_cast<const GameCtrlAwardSpin*>(
               &_GameCtrlAwardSpin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(GameCtrlAwardSpin* other);
  friend void swap(GameCtrlAwardSpin& a, GameCtrlAwardSpin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrlAwardSpin* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlAwardSpin>(NULL);
  }

  GameCtrlAwardSpin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlAwardSpin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrlAwardSpin& from);
  void MergeFrom(const GameCtrlAwardSpin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrlAwardSpin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 bet = 1;
  void clear_bet();
  static const int kBetFieldNumber = 1;
  ::google::protobuf::int64 bet() const;
  void set_bet(::google::protobuf::int64 value);

  // int32 lines = 2;
  void clear_lines();
  static const int kLinesFieldNumber = 2;
  ::google::protobuf::int32 lines() const;
  void set_lines(::google::protobuf::int32 value);

  // int32 times = 3;
  void clear_times();
  static const int kTimesFieldNumber = 3;
  ::google::protobuf::int32 times() const;
  void set_times(::google::protobuf::int32 value);

  // int64 totalBet = 4;
  void clear_totalbet();
  static const int kTotalBetFieldNumber = 4;
  ::google::protobuf::int64 totalbet() const;
  void set_totalbet(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:natashapb.GameCtrlAwardSpin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 bet_;
  ::google::protobuf::int32 lines_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int64 totalbet_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlAwardSpinImpl();
};
// -------------------------------------------------------------------

class GameCtrlDebug : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrlDebug) */ {
 public:
  GameCtrlDebug();
  virtual ~GameCtrlDebug();

  GameCtrlDebug(const GameCtrlDebug& from);

  inline GameCtrlDebug& operator=(const GameCtrlDebug& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrlDebug(GameCtrlDebug&& from) noexcept
    : GameCtrlDebug() {
    *this = ::std::move(from);
  }

  inline GameCtrlDebug& operator=(GameCtrlDebug&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrlDebug& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrlDebug* internal_default_instance() {
    return reinterpret_cast<const GameCtrlDebug*>(
               &_GameCtrlDebug_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(GameCtrlDebug* other);
  friend void swap(GameCtrlDebug& a, GameCtrlDebug& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrlDebug* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlDebug>(NULL);
  }

  GameCtrlDebug* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrlDebug>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrlDebug& from);
  void MergeFrom(const GameCtrlDebug& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrlDebug* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 lstRandom = 2;
  int lstrandom_size() const;
  void clear_lstrandom();
  static const int kLstRandomFieldNumber = 2;
  ::google::protobuf::int64 lstrandom(int index) const;
  void set_lstrandom(int index, ::google::protobuf::int64 value);
  void add_lstrandom(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      lstrandom() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_lstrandom();

  // .natashapb.DEBUGSTATE debugState = 1;
  void clear_debugstate();
  static const int kDebugStateFieldNumber = 1;
  ::natashapb::DEBUGSTATE debugstate() const;
  void set_debugstate(::natashapb::DEBUGSTATE value);

  // @@protoc_insertion_point(class_scope:natashapb.GameCtrlDebug)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > lstrandom_;
  mutable int _lstrandom_cached_byte_size_;
  int debugstate_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlDebugImpl();
};
// -------------------------------------------------------------------

class GameCtrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameCtrl) */ {
 public:
  GameCtrl();
  virtual ~GameCtrl();

  GameCtrl(const GameCtrl& from);

  inline GameCtrl& operator=(const GameCtrl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameCtrl(GameCtrl&& from) noexcept
    : GameCtrl() {
    *this = ::std::move(from);
  }

  inline GameCtrl& operator=(GameCtrl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameCtrl& default_instance();

  enum CtrlCase {
    kSpin = 10,
    kSelectFree = 11,
    kFreeSpin = 12,
    kBonus = 13,
    kJackpot = 14,
    kCommonJackpot = 15,
    kAwardSpin = 16,
    kRespin = 17,
    CTRL_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameCtrl* internal_default_instance() {
    return reinterpret_cast<const GameCtrl*>(
               &_GameCtrl_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(GameCtrl* other);
  friend void swap(GameCtrl& a, GameCtrl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameCtrl* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrl>(NULL);
  }

  GameCtrl* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameCtrl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameCtrl& from);
  void MergeFrom(const GameCtrl& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameCtrl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .natashapb.GameCtrlDebug debug = 100;
  bool has_debug() const;
  void clear_debug();
  static const int kDebugFieldNumber = 100;
  const ::natashapb::GameCtrlDebug& debug() const;
  ::natashapb::GameCtrlDebug* release_debug();
  ::natashapb::GameCtrlDebug* mutable_debug();
  void set_allocated_debug(::natashapb::GameCtrlDebug* debug);

  // .google.protobuf.Any exDat = 1000;
  bool has_exdat() const;
  void clear_exdat();
  static const int kExDatFieldNumber = 1000;
  const ::google::protobuf::Any& exdat() const;
  ::google::protobuf::Any* release_exdat();
  ::google::protobuf::Any* mutable_exdat();
  void set_allocated_exdat(::google::protobuf::Any* exdat);

  // int64 ctrlID = 1;
  void clear_ctrlid();
  static const int kCtrlIDFieldNumber = 1;
  ::google::protobuf::int64 ctrlid() const;
  void set_ctrlid(::google::protobuf::int64 value);

  // int64 realBet = 2;
  void clear_realbet();
  static const int kRealBetFieldNumber = 2;
  ::google::protobuf::int64 realbet() const;
  void set_realbet(::google::protobuf::int64 value);

  // .natashapb.GameCtrlSpin spin = 10;
  bool has_spin() const;
  void clear_spin();
  static const int kSpinFieldNumber = 10;
  const ::natashapb::GameCtrlSpin& spin() const;
  ::natashapb::GameCtrlSpin* release_spin();
  ::natashapb::GameCtrlSpin* mutable_spin();
  void set_allocated_spin(::natashapb::GameCtrlSpin* spin);

  // .natashapb.GameCtrlSelectFree selectFree = 11;
  bool has_selectfree() const;
  void clear_selectfree();
  static const int kSelectFreeFieldNumber = 11;
  const ::natashapb::GameCtrlSelectFree& selectfree() const;
  ::natashapb::GameCtrlSelectFree* release_selectfree();
  ::natashapb::GameCtrlSelectFree* mutable_selectfree();
  void set_allocated_selectfree(::natashapb::GameCtrlSelectFree* selectfree);

  // .natashapb.GameCtrlSpin freeSpin = 12;
  bool has_freespin() const;
  void clear_freespin();
  static const int kFreeSpinFieldNumber = 12;
  const ::natashapb::GameCtrlSpin& freespin() const;
  ::natashapb::GameCtrlSpin* release_freespin();
  ::natashapb::GameCtrlSpin* mutable_freespin();
  void set_allocated_freespin(::natashapb::GameCtrlSpin* freespin);

  // .natashapb.GameCtrlBonus bonus = 13;
  bool has_bonus() const;
  void clear_bonus();
  static const int kBonusFieldNumber = 13;
  const ::natashapb::GameCtrlBonus& bonus() const;
  ::natashapb::GameCtrlBonus* release_bonus();
  ::natashapb::GameCtrlBonus* mutable_bonus();
  void set_allocated_bonus(::natashapb::GameCtrlBonus* bonus);

  // .natashapb.GameCtrlJackpot jackpot = 14;
  bool has_jackpot() const;
  void clear_jackpot();
  static const int kJackpotFieldNumber = 14;
  const ::natashapb::GameCtrlJackpot& jackpot() const;
  ::natashapb::GameCtrlJackpot* release_jackpot();
  ::natashapb::GameCtrlJackpot* mutable_jackpot();
  void set_allocated_jackpot(::natashapb::GameCtrlJackpot* jackpot);

  // .natashapb.GameCtrlCommonJackpot commonJackpot = 15;
  bool has_commonjackpot() const;
  void clear_commonjackpot();
  static const int kCommonJackpotFieldNumber = 15;
  const ::natashapb::GameCtrlCommonJackpot& commonjackpot() const;
  ::natashapb::GameCtrlCommonJackpot* release_commonjackpot();
  ::natashapb::GameCtrlCommonJackpot* mutable_commonjackpot();
  void set_allocated_commonjackpot(::natashapb::GameCtrlCommonJackpot* commonjackpot);

  // .natashapb.GameCtrlAwardSpin awardSpin = 16;
  bool has_awardspin() const;
  void clear_awardspin();
  static const int kAwardSpinFieldNumber = 16;
  const ::natashapb::GameCtrlAwardSpin& awardspin() const;
  ::natashapb::GameCtrlAwardSpin* release_awardspin();
  ::natashapb::GameCtrlAwardSpin* mutable_awardspin();
  void set_allocated_awardspin(::natashapb::GameCtrlAwardSpin* awardspin);

  // .natashapb.GameCtrlSpin respin = 17;
  bool has_respin() const;
  void clear_respin();
  static const int kRespinFieldNumber = 17;
  const ::natashapb::GameCtrlSpin& respin() const;
  ::natashapb::GameCtrlSpin* release_respin();
  ::natashapb::GameCtrlSpin* mutable_respin();
  void set_allocated_respin(::natashapb::GameCtrlSpin* respin);

  CtrlCase ctrl_case() const;
  // @@protoc_insertion_point(class_scope:natashapb.GameCtrl)
 private:
  void set_has_spin();
  void set_has_selectfree();
  void set_has_freespin();
  void set_has_bonus();
  void set_has_jackpot();
  void set_has_commonjackpot();
  void set_has_awardspin();
  void set_has_respin();

  inline bool has_ctrl() const;
  void clear_ctrl();
  inline void clear_has_ctrl();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::natashapb::GameCtrlDebug* debug_;
  ::google::protobuf::Any* exdat_;
  ::google::protobuf::int64 ctrlid_;
  ::google::protobuf::int64 realbet_;
  union CtrlUnion {
    CtrlUnion() {}
    ::natashapb::GameCtrlSpin* spin_;
    ::natashapb::GameCtrlSelectFree* selectfree_;
    ::natashapb::GameCtrlSpin* freespin_;
    ::natashapb::GameCtrlBonus* bonus_;
    ::natashapb::GameCtrlJackpot* jackpot_;
    ::natashapb::GameCtrlCommonJackpot* commonjackpot_;
    ::natashapb::GameCtrlAwardSpin* awardspin_;
    ::natashapb::GameCtrlSpin* respin_;
  } ctrl_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameCtrlImpl();
};
// -------------------------------------------------------------------

class StartFreeGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.StartFreeGame) */ {
 public:
  StartFreeGame();
  virtual ~StartFreeGame();

  StartFreeGame(const StartFreeGame& from);

  inline StartFreeGame& operator=(const StartFreeGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartFreeGame(StartFreeGame&& from) noexcept
    : StartFreeGame() {
    *this = ::std::move(from);
  }

  inline StartFreeGame& operator=(StartFreeGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartFreeGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartFreeGame* internal_default_instance() {
    return reinterpret_cast<const StartFreeGame*>(
               &_StartFreeGame_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(StartFreeGame* other);
  friend void swap(StartFreeGame& a, StartFreeGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartFreeGame* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StartFreeGame>(NULL);
  }

  StartFreeGame* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StartFreeGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartFreeGame& from);
  void MergeFrom(const StartFreeGame& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartFreeGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 bet = 1;
  void clear_bet();
  static const int kBetFieldNumber = 1;
  ::google::protobuf::int64 bet() const;
  void set_bet(::google::protobuf::int64 value);

  // int32 lines = 2;
  void clear_lines();
  static const int kLinesFieldNumber = 2;
  ::google::protobuf::int32 lines() const;
  void set_lines(::google::protobuf::int32 value);

  // int32 times = 3;
  void clear_times();
  static const int kTimesFieldNumber = 3;
  ::google::protobuf::int32 times() const;
  void set_times(::google::protobuf::int32 value);

  // int64 avgBet = 5;
  void clear_avgbet();
  static const int kAvgBetFieldNumber = 5;
  ::google::protobuf::int64 avgbet() const;
  void set_avgbet(::google::protobuf::int64 value);

  // int32 freeNums = 4;
  void clear_freenums();
  static const int kFreeNumsFieldNumber = 4;
  ::google::protobuf::int32 freenums() const;
  void set_freenums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.StartFreeGame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 bet_;
  ::google::protobuf::int32 lines_;
  ::google::protobuf::int32 times_;
  ::google::protobuf::int64 avgbet_;
  ::google::protobuf::int32 freenums_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsStartFreeGameImpl();
};
// -------------------------------------------------------------------

class StartGameMod : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.StartGameMod) */ {
 public:
  StartGameMod();
  virtual ~StartGameMod();

  StartGameMod(const StartGameMod& from);

  inline StartGameMod& operator=(const StartGameMod& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartGameMod(StartGameMod&& from) noexcept
    : StartGameMod() {
    *this = ::std::move(from);
  }

  inline StartGameMod& operator=(StartGameMod&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartGameMod& default_instance();

  enum StartParamsCase {
    kFreegame = 1,
    STARTPARAMS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartGameMod* internal_default_instance() {
    return reinterpret_cast<const StartGameMod*>(
               &_StartGameMod_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(StartGameMod* other);
  friend void swap(StartGameMod& a, StartGameMod& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartGameMod* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StartGameMod>(NULL);
  }

  StartGameMod* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StartGameMod>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartGameMod& from);
  void MergeFrom(const StartGameMod& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartGameMod* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .natashapb.GameCtrlID parentCtrlID = 100;
  bool has_parentctrlid() const;
  void clear_parentctrlid();
  static const int kParentCtrlIDFieldNumber = 100;
  const ::natashapb::GameCtrlID& parentctrlid() const;
  ::natashapb::GameCtrlID* release_parentctrlid();
  ::natashapb::GameCtrlID* mutable_parentctrlid();
  void set_allocated_parentctrlid(::natashapb::GameCtrlID* parentctrlid);

  // .google.protobuf.Any exDat = 1000;
  bool has_exdat() const;
  void clear_exdat();
  static const int kExDatFieldNumber = 1000;
  const ::google::protobuf::Any& exdat() const;
  ::google::protobuf::Any* release_exdat();
  ::google::protobuf::Any* mutable_exdat();
  void set_allocated_exdat(::google::protobuf::Any* exdat);

  // .natashapb.StartFreeGame freegame = 1;
  bool has_freegame() const;
  void clear_freegame();
  static const int kFreegameFieldNumber = 1;
  const ::natashapb::StartFreeGame& freegame() const;
  ::natashapb::StartFreeGame* release_freegame();
  ::natashapb::StartFreeGame* mutable_freegame();
  void set_allocated_freegame(::natashapb::StartFreeGame* freegame);

  StartParamsCase startParams_case() const;
  // @@protoc_insertion_point(class_scope:natashapb.StartGameMod)
 private:
  void set_has_freegame();

  inline bool has_startParams() const;
  void clear_startParams();
  inline void clear_has_startParams();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::natashapb::GameCtrlID* parentctrlid_;
  ::google::protobuf::Any* exdat_;
  union StartParamsUnion {
    StartParamsUnion() {}
    ::natashapb::StartFreeGame* freegame_;
  } startParams_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsStartGameModImpl();
};
// -------------------------------------------------------------------

class SymbolRTP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.SymbolRTP) */ {
 public:
  SymbolRTP();
  virtual ~SymbolRTP();

  SymbolRTP(const SymbolRTP& from);

  inline SymbolRTP& operator=(const SymbolRTP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymbolRTP(SymbolRTP&& from) noexcept
    : SymbolRTP() {
    *this = ::std::move(from);
  }

  inline SymbolRTP& operator=(SymbolRTP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SymbolRTP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolRTP* internal_default_instance() {
    return reinterpret_cast<const SymbolRTP*>(
               &_SymbolRTP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(SymbolRTP* other);
  friend void swap(SymbolRTP& a, SymbolRTP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymbolRTP* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SymbolRTP>(NULL);
  }

  SymbolRTP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SymbolRTP>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SymbolRTP& from);
  void MergeFrom(const SymbolRTP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SymbolRTP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 totalWin = 1;
  void clear_totalwin();
  static const int kTotalWinFieldNumber = 1;
  ::google::protobuf::int64 totalwin() const;
  void set_totalwin(::google::protobuf::int64 value);

  // int64 winNums = 2;
  void clear_winnums();
  static const int kWinNumsFieldNumber = 2;
  ::google::protobuf::int64 winnums() const;
  void set_winnums(::google::protobuf::int64 value);

  // int64 realWin = 3;
  void clear_realwin();
  static const int kRealWinFieldNumber = 3;
  ::google::protobuf::int64 realwin() const;
  void set_realwin(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:natashapb.SymbolRTP)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 totalwin_;
  ::google::protobuf::int64 winnums_;
  ::google::protobuf::int64 realwin_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsSymbolRTPImpl();
};
// -------------------------------------------------------------------

class SymbolRTPList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.SymbolRTPList) */ {
 public:
  SymbolRTPList();
  virtual ~SymbolRTPList();

  SymbolRTPList(const SymbolRTPList& from);

  inline SymbolRTPList& operator=(const SymbolRTPList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymbolRTPList(SymbolRTPList&& from) noexcept
    : SymbolRTPList() {
    *this = ::std::move(from);
  }

  inline SymbolRTPList& operator=(SymbolRTPList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SymbolRTPList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolRTPList* internal_default_instance() {
    return reinterpret_cast<const SymbolRTPList*>(
               &_SymbolRTPList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(SymbolRTPList* other);
  friend void swap(SymbolRTPList& a, SymbolRTPList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymbolRTPList* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SymbolRTPList>(NULL);
  }

  SymbolRTPList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<SymbolRTPList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SymbolRTPList& from);
  void MergeFrom(const SymbolRTPList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SymbolRTPList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .natashapb.SymbolRTP lst = 1;
  int lst_size() const;
  void clear_lst();
  static const int kLstFieldNumber = 1;
  ::natashapb::SymbolRTP* mutable_lst(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTP >*
      mutable_lst();
  const ::natashapb::SymbolRTP& lst(int index) const;
  ::natashapb::SymbolRTP* add_lst();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTP >&
      lst() const;

  // @@protoc_insertion_point(class_scope:natashapb.SymbolRTPList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTP > lst_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsSymbolRTPListImpl();
};
// -------------------------------------------------------------------

class BonusRTP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.BonusRTP) */ {
 public:
  BonusRTP();
  virtual ~BonusRTP();

  BonusRTP(const BonusRTP& from);

  inline BonusRTP& operator=(const BonusRTP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BonusRTP(BonusRTP&& from) noexcept
    : BonusRTP() {
    *this = ::std::move(from);
  }

  inline BonusRTP& operator=(BonusRTP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BonusRTP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BonusRTP* internal_default_instance() {
    return reinterpret_cast<const BonusRTP*>(
               &_BonusRTP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(BonusRTP* other);
  friend void swap(BonusRTP& a, BonusRTP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BonusRTP* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BonusRTP>(NULL);
  }

  BonusRTP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BonusRTP>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BonusRTP& from);
  void MergeFrom(const BonusRTP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BonusRTP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 totalWin = 1;
  void clear_totalwin();
  static const int kTotalWinFieldNumber = 1;
  ::google::protobuf::int64 totalwin() const;
  void set_totalwin(::google::protobuf::int64 value);

  // int64 winNums = 2;
  void clear_winnums();
  static const int kWinNumsFieldNumber = 2;
  ::google::protobuf::int64 winnums() const;
  void set_winnums(::google::protobuf::int64 value);

  // int64 realWin = 3;
  void clear_realwin();
  static const int kRealWinFieldNumber = 3;
  ::google::protobuf::int64 realwin() const;
  void set_realwin(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:natashapb.BonusRTP)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 totalwin_;
  ::google::protobuf::int64 winnums_;
  ::google::protobuf::int64 realwin_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsBonusRTPImpl();
};
// -------------------------------------------------------------------

class BonusRTPList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.BonusRTPList) */ {
 public:
  BonusRTPList();
  virtual ~BonusRTPList();

  BonusRTPList(const BonusRTPList& from);

  inline BonusRTPList& operator=(const BonusRTPList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BonusRTPList(BonusRTPList&& from) noexcept
    : BonusRTPList() {
    *this = ::std::move(from);
  }

  inline BonusRTPList& operator=(BonusRTPList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BonusRTPList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BonusRTPList* internal_default_instance() {
    return reinterpret_cast<const BonusRTPList*>(
               &_BonusRTPList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(BonusRTPList* other);
  friend void swap(BonusRTPList& a, BonusRTPList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BonusRTPList* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BonusRTPList>(NULL);
  }

  BonusRTPList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<BonusRTPList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BonusRTPList& from);
  void MergeFrom(const BonusRTPList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BonusRTPList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .natashapb.BonusRTP lst = 1;
  int lst_size() const;
  void clear_lst();
  static const int kLstFieldNumber = 1;
  ::natashapb::BonusRTP* mutable_lst(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::BonusRTP >*
      mutable_lst();
  const ::natashapb::BonusRTP& lst(int index) const;
  ::natashapb::BonusRTP* add_lst();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::BonusRTP >&
      lst() const;

  // @@protoc_insertion_point(class_scope:natashapb.BonusRTPList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::BonusRTP > lst_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsBonusRTPListImpl();
};
// -------------------------------------------------------------------

class GameModuleRTP_BonusEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GameModuleRTP_BonusEntry_DoNotUse, 
    ::std::string, ::natashapb::BonusRTPList,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GameModuleRTP_BonusEntry_DoNotUse, 
    ::std::string, ::natashapb::BonusRTPList,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GameModuleRTP_BonusEntry_DoNotUse();
  GameModuleRTP_BonusEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GameModuleRTP_BonusEntry_DoNotUse& other);
  static const GameModuleRTP_BonusEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameModuleRTP_BonusEntry_DoNotUse*>(&_GameModuleRTP_BonusEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GameModuleRTP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameModuleRTP) */ {
 public:
  GameModuleRTP();
  virtual ~GameModuleRTP();

  GameModuleRTP(const GameModuleRTP& from);

  inline GameModuleRTP& operator=(const GameModuleRTP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameModuleRTP(GameModuleRTP&& from) noexcept
    : GameModuleRTP() {
    *this = ::std::move(from);
  }

  inline GameModuleRTP& operator=(GameModuleRTP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameModuleRTP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameModuleRTP* internal_default_instance() {
    return reinterpret_cast<const GameModuleRTP*>(
               &_GameModuleRTP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(GameModuleRTP* other);
  friend void swap(GameModuleRTP& a, GameModuleRTP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameModuleRTP* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameModuleRTP>(NULL);
  }

  GameModuleRTP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameModuleRTP>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameModuleRTP& from);
  void MergeFrom(const GameModuleRTP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameModuleRTP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .natashapb.SymbolRTPList symbols = 100;
  int symbols_size() const;
  void clear_symbols();
  static const int kSymbolsFieldNumber = 100;
  ::natashapb::SymbolRTPList* mutable_symbols(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTPList >*
      mutable_symbols();
  const ::natashapb::SymbolRTPList& symbols(int index) const;
  ::natashapb::SymbolRTPList* add_symbols();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTPList >&
      symbols() const;

  // map<string, .natashapb.BonusRTPList> bonus = 101;
  int bonus_size() const;
  void clear_bonus();
  static const int kBonusFieldNumber = 101;
  const ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >&
      bonus() const;
  ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >*
      mutable_bonus();

  // int64 totalBet = 1;
  void clear_totalbet();
  static const int kTotalBetFieldNumber = 1;
  ::google::protobuf::int64 totalbet() const;
  void set_totalbet(::google::protobuf::int64 value);

  // int64 totalWin = 2;
  void clear_totalwin();
  static const int kTotalWinFieldNumber = 2;
  ::google::protobuf::int64 totalwin() const;
  void set_totalwin(::google::protobuf::int64 value);

  // int64 spinNums = 3;
  void clear_spinnums();
  static const int kSpinNumsFieldNumber = 3;
  ::google::protobuf::int64 spinnums() const;
  void set_spinnums(::google::protobuf::int64 value);

  // int64 winNums = 4;
  void clear_winnums();
  static const int kWinNumsFieldNumber = 4;
  ::google::protobuf::int64 winnums() const;
  void set_winnums(::google::protobuf::int64 value);

  // int64 inNums = 5;
  void clear_innums();
  static const int kInNumsFieldNumber = 5;
  ::google::protobuf::int64 innums() const;
  void set_innums(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:natashapb.GameModuleRTP)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTPList > symbols_;
  ::google::protobuf::internal::MapField<
      GameModuleRTP_BonusEntry_DoNotUse,
      ::std::string, ::natashapb::BonusRTPList,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > bonus_;
  ::google::protobuf::int64 totalbet_;
  ::google::protobuf::int64 totalwin_;
  ::google::protobuf::int64 spinnums_;
  ::google::protobuf::int64 winnums_;
  ::google::protobuf::int64 innums_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameModuleRTPImpl();
};
// -------------------------------------------------------------------

class RTP_GameModulesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RTP_GameModulesEntry_DoNotUse, 
    ::std::string, ::natashapb::GameModuleRTP,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RTP_GameModulesEntry_DoNotUse, 
    ::std::string, ::natashapb::GameModuleRTP,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  RTP_GameModulesEntry_DoNotUse();
  RTP_GameModulesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RTP_GameModulesEntry_DoNotUse& other);
  static const RTP_GameModulesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RTP_GameModulesEntry_DoNotUse*>(&_RTP_GameModulesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RTP : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.RTP) */ {
 public:
  RTP();
  virtual ~RTP();

  RTP(const RTP& from);

  inline RTP& operator=(const RTP& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RTP(RTP&& from) noexcept
    : RTP() {
    *this = ::std::move(from);
  }

  inline RTP& operator=(RTP&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RTP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RTP* internal_default_instance() {
    return reinterpret_cast<const RTP*>(
               &_RTP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(RTP* other);
  friend void swap(RTP& a, RTP& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RTP* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RTP>(NULL);
  }

  RTP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<RTP>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RTP& from);
  void MergeFrom(const RTP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RTP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .natashapb.GameModuleRTP> gameModules = 100;
  int gamemodules_size() const;
  void clear_gamemodules();
  static const int kGameModulesFieldNumber = 100;
  const ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >&
      gamemodules() const;
  ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >*
      mutable_gamemodules();

  // int64 totalBet = 1;
  void clear_totalbet();
  static const int kTotalBetFieldNumber = 1;
  ::google::protobuf::int64 totalbet() const;
  void set_totalbet(::google::protobuf::int64 value);

  // int64 totalWin = 2;
  void clear_totalwin();
  static const int kTotalWinFieldNumber = 2;
  ::google::protobuf::int64 totalwin() const;
  void set_totalwin(::google::protobuf::int64 value);

  // int64 spinNums = 3;
  void clear_spinnums();
  static const int kSpinNumsFieldNumber = 3;
  ::google::protobuf::int64 spinnums() const;
  void set_spinnums(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:natashapb.RTP)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      RTP_GameModulesEntry_DoNotUse,
      ::std::string, ::natashapb::GameModuleRTP,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > gamemodules_;
  ::google::protobuf::int64 totalbet_;
  ::google::protobuf::int64 totalwin_;
  ::google::protobuf::int64 spinnums_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsRTPImpl();
};
// -------------------------------------------------------------------

class NormalReelstriptConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.NormalReelstriptConfig) */ {
 public:
  NormalReelstriptConfig();
  virtual ~NormalReelstriptConfig();

  NormalReelstriptConfig(const NormalReelstriptConfig& from);

  inline NormalReelstriptConfig& operator=(const NormalReelstriptConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NormalReelstriptConfig(NormalReelstriptConfig&& from) noexcept
    : NormalReelstriptConfig() {
    *this = ::std::move(from);
  }

  inline NormalReelstriptConfig& operator=(NormalReelstriptConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NormalReelstriptConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NormalReelstriptConfig* internal_default_instance() {
    return reinterpret_cast<const NormalReelstriptConfig*>(
               &_NormalReelstriptConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(NormalReelstriptConfig* other);
  friend void swap(NormalReelstriptConfig& a, NormalReelstriptConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NormalReelstriptConfig* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<NormalReelstriptConfig>(NULL);
  }

  NormalReelstriptConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<NormalReelstriptConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NormalReelstriptConfig& from);
  void MergeFrom(const NormalReelstriptConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NormalReelstriptConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:natashapb.NormalReelstriptConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsNormalReelstriptConfigImpl();
};
// -------------------------------------------------------------------

class StaticSymbols : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.StaticSymbols) */ {
 public:
  StaticSymbols();
  virtual ~StaticSymbols();

  StaticSymbols(const StaticSymbols& from);

  inline StaticSymbols& operator=(const StaticSymbols& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticSymbols(StaticSymbols&& from) noexcept
    : StaticSymbols() {
    *this = ::std::move(from);
  }

  inline StaticSymbols& operator=(StaticSymbols&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticSymbols& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticSymbols* internal_default_instance() {
    return reinterpret_cast<const StaticSymbols*>(
               &_StaticSymbols_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(StaticSymbols* other);
  friend void swap(StaticSymbols& a, StaticSymbols& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticSymbols* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StaticSymbols>(NULL);
  }

  StaticSymbols* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StaticSymbols>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StaticSymbols& from);
  void MergeFrom(const StaticSymbols& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StaticSymbols* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 symbols = 1;
  int symbols_size() const;
  void clear_symbols();
  static const int kSymbolsFieldNumber = 1;
  ::google::protobuf::int32 symbols(int index) const;
  void set_symbols(int index, ::google::protobuf::int32 value);
  void add_symbols(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      symbols() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_symbols();

  // @@protoc_insertion_point(class_scope:natashapb.StaticSymbols)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > symbols_;
  mutable int _symbols_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsStaticSymbolsImpl();
};
// -------------------------------------------------------------------

class StaticCascadingReels : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.StaticCascadingReels) */ {
 public:
  StaticCascadingReels();
  virtual ~StaticCascadingReels();

  StaticCascadingReels(const StaticCascadingReels& from);

  inline StaticCascadingReels& operator=(const StaticCascadingReels& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StaticCascadingReels(StaticCascadingReels&& from) noexcept
    : StaticCascadingReels() {
    *this = ::std::move(from);
  }

  inline StaticCascadingReels& operator=(StaticCascadingReels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticCascadingReels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticCascadingReels* internal_default_instance() {
    return reinterpret_cast<const StaticCascadingReels*>(
               &_StaticCascadingReels_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(StaticCascadingReels* other);
  friend void swap(StaticCascadingReels& a, StaticCascadingReels& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StaticCascadingReels* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StaticCascadingReels>(NULL);
  }

  StaticCascadingReels* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<StaticCascadingReels>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StaticCascadingReels& from);
  void MergeFrom(const StaticCascadingReels& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StaticCascadingReels* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .natashapb.StaticSymbols scenarios = 1;
  int scenarios_size() const;
  void clear_scenarios();
  static const int kScenariosFieldNumber = 1;
  ::natashapb::StaticSymbols* mutable_scenarios(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::StaticSymbols >*
      mutable_scenarios();
  const ::natashapb::StaticSymbols& scenarios(int index) const;
  ::natashapb::StaticSymbols* add_scenarios();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::StaticSymbols >&
      scenarios() const;

  // repeated int32 weights = 2;
  int weights_size() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 2;
  ::google::protobuf::int32 weights(int index) const;
  void set_weights(int index, ::google::protobuf::int32 value);
  void add_weights(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      weights() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_weights();

  // @@protoc_insertion_point(class_scope:natashapb.StaticCascadingReels)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::StaticSymbols > scenarios_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > weights_;
  mutable int _weights_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsStaticCascadingReelsImpl();
};
// -------------------------------------------------------------------

class ReelstriptConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.ReelstriptConfig) */ {
 public:
  ReelstriptConfig();
  virtual ~ReelstriptConfig();

  ReelstriptConfig(const ReelstriptConfig& from);

  inline ReelstriptConfig& operator=(const ReelstriptConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReelstriptConfig(ReelstriptConfig&& from) noexcept
    : ReelstriptConfig() {
    *this = ::std::move(from);
  }

  inline ReelstriptConfig& operator=(ReelstriptConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReelstriptConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReelstriptConfig* internal_default_instance() {
    return reinterpret_cast<const ReelstriptConfig*>(
               &_ReelstriptConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(ReelstriptConfig* other);
  friend void swap(ReelstriptConfig& a, ReelstriptConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReelstriptConfig* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReelstriptConfig>(NULL);
  }

  ReelstriptConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReelstriptConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReelstriptConfig& from);
  void MergeFrom(const ReelstriptConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReelstriptConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .natashapb.NormalReelstriptConfig normal = 1;
  bool has_normal() const;
  void clear_normal();
  static const int kNormalFieldNumber = 1;
  const ::natashapb::NormalReelstriptConfig& normal() const;
  ::natashapb::NormalReelstriptConfig* release_normal();
  ::natashapb::NormalReelstriptConfig* mutable_normal();
  void set_allocated_normal(::natashapb::NormalReelstriptConfig* normal);

  // .natashapb.StaticCascadingReels static = 2;
  bool has_static_() const;
  void clear_static_();
  static const int kStaticFieldNumber = 2;
  const ::natashapb::StaticCascadingReels& static_() const;
  ::natashapb::StaticCascadingReels* release_static_();
  ::natashapb::StaticCascadingReels* mutable_static_();
  void set_allocated_static_(::natashapb::StaticCascadingReels* static_);

  // @@protoc_insertion_point(class_scope:natashapb.ReelstriptConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::natashapb::NormalReelstriptConfig* normal_;
  ::natashapb::StaticCascadingReels* static__;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsReelstriptConfigImpl();
};
// -------------------------------------------------------------------

class WeightConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.WeightConfig) */ {
 public:
  WeightConfig();
  virtual ~WeightConfig();

  WeightConfig(const WeightConfig& from);

  inline WeightConfig& operator=(const WeightConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WeightConfig(WeightConfig&& from) noexcept
    : WeightConfig() {
    *this = ::std::move(from);
  }

  inline WeightConfig& operator=(WeightConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WeightConfig* internal_default_instance() {
    return reinterpret_cast<const WeightConfig*>(
               &_WeightConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(WeightConfig* other);
  friend void swap(WeightConfig& a, WeightConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WeightConfig* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<WeightConfig>(NULL);
  }

  WeightConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<WeightConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const WeightConfig& from);
  void MergeFrom(const WeightConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(WeightConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 weights = 1;
  int weights_size() const;
  void clear_weights();
  static const int kWeightsFieldNumber = 1;
  ::google::protobuf::int32 weights(int index) const;
  void set_weights(int index, ::google::protobuf::int32 value);
  void add_weights(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      weights() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_weights();

  // int32 totalWeight = 2;
  void clear_totalweight();
  static const int kTotalWeightFieldNumber = 2;
  ::google::protobuf::int32 totalweight() const;
  void set_totalweight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.WeightConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > weights_;
  mutable int _weights_cached_byte_size_;
  ::google::protobuf::int32 totalweight_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsWeightConfigImpl();
};
// -------------------------------------------------------------------

class MuseumRTPConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.MuseumRTPConfig) */ {
 public:
  MuseumRTPConfig();
  virtual ~MuseumRTPConfig();

  MuseumRTPConfig(const MuseumRTPConfig& from);

  inline MuseumRTPConfig& operator=(const MuseumRTPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MuseumRTPConfig(MuseumRTPConfig&& from) noexcept
    : MuseumRTPConfig() {
    *this = ::std::move(from);
  }

  inline MuseumRTPConfig& operator=(MuseumRTPConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MuseumRTPConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MuseumRTPConfig* internal_default_instance() {
    return reinterpret_cast<const MuseumRTPConfig*>(
               &_MuseumRTPConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(MuseumRTPConfig* other);
  friend void swap(MuseumRTPConfig& a, MuseumRTPConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MuseumRTPConfig* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<MuseumRTPConfig>(NULL);
  }

  MuseumRTPConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<MuseumRTPConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MuseumRTPConfig& from);
  void MergeFrom(const MuseumRTPConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MuseumRTPConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 bgBonusPrize = 101;
  int bgbonusprize_size() const;
  void clear_bgbonusprize();
  static const int kBgBonusPrizeFieldNumber = 101;
  ::google::protobuf::int32 bgbonusprize(int index) const;
  void set_bgbonusprize(int index, ::google::protobuf::int32 value);
  void add_bgbonusprize(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bgbonusprize() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bgbonusprize();

  // repeated int32 bgMultipliers = 102;
  int bgmultipliers_size() const;
  void clear_bgmultipliers();
  static const int kBgMultipliersFieldNumber = 102;
  ::google::protobuf::int32 bgmultipliers(int index) const;
  void set_bgmultipliers(int index, ::google::protobuf::int32 value);
  void add_bgmultipliers(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bgmultipliers() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bgmultipliers();

  // repeated .natashapb.WeightConfig bgMysteryWild = 103;
  int bgmysterywild_size() const;
  void clear_bgmysterywild();
  static const int kBgMysteryWildFieldNumber = 103;
  ::natashapb::WeightConfig* mutable_bgmysterywild(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig >*
      mutable_bgmysterywild();
  const ::natashapb::WeightConfig& bgmysterywild(int index) const;
  ::natashapb::WeightConfig* add_bgmysterywild();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig >&
      bgmysterywild() const;

  // repeated int32 fgBonusPrize = 301;
  int fgbonusprize_size() const;
  void clear_fgbonusprize();
  static const int kFgBonusPrizeFieldNumber = 301;
  ::google::protobuf::int32 fgbonusprize(int index) const;
  void set_fgbonusprize(int index, ::google::protobuf::int32 value);
  void add_fgbonusprize(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fgbonusprize() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fgbonusprize();

  // repeated int32 fgMultipliers = 302;
  int fgmultipliers_size() const;
  void clear_fgmultipliers();
  static const int kFgMultipliersFieldNumber = 302;
  ::google::protobuf::int32 fgmultipliers(int index) const;
  void set_fgmultipliers(int index, ::google::protobuf::int32 value);
  void add_fgmultipliers(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fgmultipliers() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fgmultipliers();

  // repeated .natashapb.WeightConfig fgMysteryWild = 303;
  int fgmysterywild_size() const;
  void clear_fgmysterywild();
  static const int kFgMysteryWildFieldNumber = 303;
  ::natashapb::WeightConfig* mutable_fgmysterywild(int index);
  ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig >*
      mutable_fgmysterywild();
  const ::natashapb::WeightConfig& fgmysterywild(int index) const;
  ::natashapb::WeightConfig* add_fgmysterywild();
  const ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig >&
      fgmysterywild() const;

  // string bgReelstrips = 100;
  void clear_bgreelstrips();
  static const int kBgReelstripsFieldNumber = 100;
  const ::std::string& bgreelstrips() const;
  void set_bgreelstrips(const ::std::string& value);
  #if LANG_CXX11
  void set_bgreelstrips(::std::string&& value);
  #endif
  void set_bgreelstrips(const char* value);
  void set_bgreelstrips(const char* value, size_t size);
  ::std::string* mutable_bgreelstrips();
  ::std::string* release_bgreelstrips();
  void set_allocated_bgreelstrips(::std::string* bgreelstrips);

  // string fgReelstrips = 300;
  void clear_fgreelstrips();
  static const int kFgReelstripsFieldNumber = 300;
  const ::std::string& fgreelstrips() const;
  void set_fgreelstrips(const ::std::string& value);
  #if LANG_CXX11
  void set_fgreelstrips(::std::string&& value);
  #endif
  void set_fgreelstrips(const char* value);
  void set_fgreelstrips(const char* value, size_t size);
  ::std::string* mutable_fgreelstrips();
  ::std::string* release_fgreelstrips();
  void set_allocated_fgreelstrips(::std::string* fgreelstrips);

  // int32 fgNums = 200;
  void clear_fgnums();
  static const int kFgNumsFieldNumber = 200;
  ::google::protobuf::int32 fgnums() const;
  void set_fgnums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.MuseumRTPConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bgbonusprize_;
  mutable int _bgbonusprize_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bgmultipliers_;
  mutable int _bgmultipliers_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig > bgmysterywild_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fgbonusprize_;
  mutable int _fgbonusprize_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fgmultipliers_;
  mutable int _fgmultipliers_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig > fgmysterywild_;
  ::google::protobuf::internal::ArenaStringPtr bgreelstrips_;
  ::google::protobuf::internal::ArenaStringPtr fgreelstrips_;
  ::google::protobuf::int32 fgnums_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsMuseumRTPConfigImpl();
};
// -------------------------------------------------------------------

class MuseumConfig_ReelstriptsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MuseumConfig_ReelstriptsEntry_DoNotUse, 
    ::std::string, ::natashapb::ReelstriptConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<MuseumConfig_ReelstriptsEntry_DoNotUse, 
    ::std::string, ::natashapb::ReelstriptConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MuseumConfig_ReelstriptsEntry_DoNotUse();
  MuseumConfig_ReelstriptsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MuseumConfig_ReelstriptsEntry_DoNotUse& other);
  static const MuseumConfig_ReelstriptsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MuseumConfig_ReelstriptsEntry_DoNotUse*>(&_MuseumConfig_ReelstriptsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MuseumConfig_RtpEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MuseumConfig_RtpEntry_DoNotUse, 
    ::std::string, ::natashapb::MuseumRTPConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<MuseumConfig_RtpEntry_DoNotUse, 
    ::std::string, ::natashapb::MuseumRTPConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MuseumConfig_RtpEntry_DoNotUse();
  MuseumConfig_RtpEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MuseumConfig_RtpEntry_DoNotUse& other);
  static const MuseumConfig_RtpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MuseumConfig_RtpEntry_DoNotUse*>(&_MuseumConfig_RtpEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MuseumConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.MuseumConfig) */ {
 public:
  MuseumConfig();
  virtual ~MuseumConfig();

  MuseumConfig(const MuseumConfig& from);

  inline MuseumConfig& operator=(const MuseumConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MuseumConfig(MuseumConfig&& from) noexcept
    : MuseumConfig() {
    *this = ::std::move(from);
  }

  inline MuseumConfig& operator=(MuseumConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MuseumConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MuseumConfig* internal_default_instance() {
    return reinterpret_cast<const MuseumConfig*>(
               &_MuseumConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(MuseumConfig* other);
  friend void swap(MuseumConfig& a, MuseumConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MuseumConfig* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<MuseumConfig>(NULL);
  }

  MuseumConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<MuseumConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MuseumConfig& from);
  void MergeFrom(const MuseumConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MuseumConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  int reelstripts_size() const;
  void clear_reelstripts();
  static const int kReelstriptsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >&
      reelstripts() const;
  ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >*
      mutable_reelstripts();

  // map<string, .natashapb.MuseumRTPConfig> rtp = 2;
  int rtp_size() const;
  void clear_rtp();
  static const int kRtpFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >&
      rtp() const;
  ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >*
      mutable_rtp();

  // @@protoc_insertion_point(class_scope:natashapb.MuseumConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      MuseumConfig_ReelstriptsEntry_DoNotUse,
      ::std::string, ::natashapb::ReelstriptConfig,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > reelstripts_;
  ::google::protobuf::internal::MapField<
      MuseumConfig_RtpEntry_DoNotUse,
      ::std::string, ::natashapb::MuseumRTPConfig,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rtp_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsMuseumConfigImpl();
};
// -------------------------------------------------------------------

class TLODRTPConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.TLODRTPConfig) */ {
 public:
  TLODRTPConfig();
  virtual ~TLODRTPConfig();

  TLODRTPConfig(const TLODRTPConfig& from);

  inline TLODRTPConfig& operator=(const TLODRTPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TLODRTPConfig(TLODRTPConfig&& from) noexcept
    : TLODRTPConfig() {
    *this = ::std::move(from);
  }

  inline TLODRTPConfig& operator=(TLODRTPConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TLODRTPConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TLODRTPConfig* internal_default_instance() {
    return reinterpret_cast<const TLODRTPConfig*>(
               &_TLODRTPConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(TLODRTPConfig* other);
  friend void swap(TLODRTPConfig& a, TLODRTPConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TLODRTPConfig* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TLODRTPConfig>(NULL);
  }

  TLODRTPConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TLODRTPConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TLODRTPConfig& from);
  void MergeFrom(const TLODRTPConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TLODRTPConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bgReelstrips = 100;
  void clear_bgreelstrips();
  static const int kBgReelstripsFieldNumber = 100;
  const ::std::string& bgreelstrips() const;
  void set_bgreelstrips(const ::std::string& value);
  #if LANG_CXX11
  void set_bgreelstrips(::std::string&& value);
  #endif
  void set_bgreelstrips(const char* value);
  void set_bgreelstrips(const char* value, size_t size);
  ::std::string* mutable_bgreelstrips();
  ::std::string* release_bgreelstrips();
  void set_allocated_bgreelstrips(::std::string* bgreelstrips);

  // string fgReelstrips = 300;
  void clear_fgreelstrips();
  static const int kFgReelstripsFieldNumber = 300;
  const ::std::string& fgreelstrips() const;
  void set_fgreelstrips(const ::std::string& value);
  #if LANG_CXX11
  void set_fgreelstrips(::std::string&& value);
  #endif
  void set_fgreelstrips(const char* value);
  void set_fgreelstrips(const char* value, size_t size);
  ::std::string* mutable_fgreelstrips();
  ::std::string* release_fgreelstrips();
  void set_allocated_fgreelstrips(::std::string* fgreelstrips);

  // int32 fgNums = 200;
  void clear_fgnums();
  static const int kFgNumsFieldNumber = 200;
  ::google::protobuf::int32 fgnums() const;
  void set_fgnums(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:natashapb.TLODRTPConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bgreelstrips_;
  ::google::protobuf::internal::ArenaStringPtr fgreelstrips_;
  ::google::protobuf::int32 fgnums_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsTLODRTPConfigImpl();
};
// -------------------------------------------------------------------

class TLODConfig_ReelstriptsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TLODConfig_ReelstriptsEntry_DoNotUse, 
    ::std::string, ::natashapb::ReelstriptConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TLODConfig_ReelstriptsEntry_DoNotUse, 
    ::std::string, ::natashapb::ReelstriptConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TLODConfig_ReelstriptsEntry_DoNotUse();
  TLODConfig_ReelstriptsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TLODConfig_ReelstriptsEntry_DoNotUse& other);
  static const TLODConfig_ReelstriptsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TLODConfig_ReelstriptsEntry_DoNotUse*>(&_TLODConfig_ReelstriptsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TLODConfig_RtpEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<TLODConfig_RtpEntry_DoNotUse, 
    ::std::string, ::natashapb::TLODRTPConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<TLODConfig_RtpEntry_DoNotUse, 
    ::std::string, ::natashapb::TLODRTPConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TLODConfig_RtpEntry_DoNotUse();
  TLODConfig_RtpEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const TLODConfig_RtpEntry_DoNotUse& other);
  static const TLODConfig_RtpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TLODConfig_RtpEntry_DoNotUse*>(&_TLODConfig_RtpEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class TLODConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.TLODConfig) */ {
 public:
  TLODConfig();
  virtual ~TLODConfig();

  TLODConfig(const TLODConfig& from);

  inline TLODConfig& operator=(const TLODConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TLODConfig(TLODConfig&& from) noexcept
    : TLODConfig() {
    *this = ::std::move(from);
  }

  inline TLODConfig& operator=(TLODConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TLODConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TLODConfig* internal_default_instance() {
    return reinterpret_cast<const TLODConfig*>(
               &_TLODConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(TLODConfig* other);
  friend void swap(TLODConfig& a, TLODConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TLODConfig* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TLODConfig>(NULL);
  }

  TLODConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<TLODConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TLODConfig& from);
  void MergeFrom(const TLODConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TLODConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  int reelstripts_size() const;
  void clear_reelstripts();
  static const int kReelstriptsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >&
      reelstripts() const;
  ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >*
      mutable_reelstripts();

  // map<string, .natashapb.TLODRTPConfig> rtp = 2;
  int rtp_size() const;
  void clear_rtp();
  static const int kRtpFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >&
      rtp() const;
  ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >*
      mutable_rtp();

  // @@protoc_insertion_point(class_scope:natashapb.TLODConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      TLODConfig_ReelstriptsEntry_DoNotUse,
      ::std::string, ::natashapb::ReelstriptConfig,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > reelstripts_;
  ::google::protobuf::internal::MapField<
      TLODConfig_RtpEntry_DoNotUse,
      ::std::string, ::natashapb::TLODRTPConfig,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rtp_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsTLODConfigImpl();
};
// -------------------------------------------------------------------

class GameConfig_ReelstriptsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GameConfig_ReelstriptsEntry_DoNotUse, 
    ::std::string, ::natashapb::ReelstriptConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GameConfig_ReelstriptsEntry_DoNotUse, 
    ::std::string, ::natashapb::ReelstriptConfig,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GameConfig_ReelstriptsEntry_DoNotUse();
  GameConfig_ReelstriptsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GameConfig_ReelstriptsEntry_DoNotUse& other);
  static const GameConfig_ReelstriptsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameConfig_ReelstriptsEntry_DoNotUse*>(&_GameConfig_ReelstriptsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GameConfig_RtpEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<GameConfig_RtpEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Any,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<GameConfig_RtpEntry_DoNotUse, 
    ::std::string, ::google::protobuf::Any,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GameConfig_RtpEntry_DoNotUse();
  GameConfig_RtpEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const GameConfig_RtpEntry_DoNotUse& other);
  static const GameConfig_RtpEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GameConfig_RtpEntry_DoNotUse*>(&_GameConfig_RtpEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class GameConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:natashapb.GameConfig) */ {
 public:
  GameConfig();
  virtual ~GameConfig();

  GameConfig(const GameConfig& from);

  inline GameConfig& operator=(const GameConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameConfig(GameConfig&& from) noexcept
    : GameConfig() {
    *this = ::std::move(from);
  }

  inline GameConfig& operator=(GameConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameConfig* internal_default_instance() {
    return reinterpret_cast<const GameConfig*>(
               &_GameConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(GameConfig* other);
  friend void swap(GameConfig& a, GameConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameConfig* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameConfig>(NULL);
  }

  GameConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<GameConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GameConfig& from);
  void MergeFrom(const GameConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GameConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  int reelstripts_size() const;
  void clear_reelstripts();
  static const int kReelstriptsFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >&
      reelstripts() const;
  ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >*
      mutable_reelstripts();

  // map<string, .google.protobuf.Any> rtp = 2;
  int rtp_size() const;
  void clear_rtp();
  static const int kRtpFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
      rtp() const;
  ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
      mutable_rtp();

  // @@protoc_insertion_point(class_scope:natashapb.GameConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      GameConfig_ReelstriptsEntry_DoNotUse,
      ::std::string, ::natashapb::ReelstriptConfig,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > reelstripts_;
  ::google::protobuf::internal::MapField<
      GameConfig_RtpEntry_DoNotUse,
      ::std::string, ::google::protobuf::Any,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rtp_;
  mutable int _cached_size_;
  friend struct ::protobuf_base_2eproto::TableStruct;
  friend void ::protobuf_base_2eproto::InitDefaultsGameConfigImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SymbolBlock3X5

// int32 dat0_0 = 1;
inline void SymbolBlock3X5::clear_dat0_0() {
  dat0_0_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat0_0() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat0_0)
  return dat0_0_;
}
inline void SymbolBlock3X5::set_dat0_0(::google::protobuf::int32 value) {
  
  dat0_0_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat0_0)
}

// int32 dat0_1 = 2;
inline void SymbolBlock3X5::clear_dat0_1() {
  dat0_1_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat0_1() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat0_1)
  return dat0_1_;
}
inline void SymbolBlock3X5::set_dat0_1(::google::protobuf::int32 value) {
  
  dat0_1_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat0_1)
}

// int32 dat0_2 = 3;
inline void SymbolBlock3X5::clear_dat0_2() {
  dat0_2_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat0_2() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat0_2)
  return dat0_2_;
}
inline void SymbolBlock3X5::set_dat0_2(::google::protobuf::int32 value) {
  
  dat0_2_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat0_2)
}

// int32 dat0_3 = 4;
inline void SymbolBlock3X5::clear_dat0_3() {
  dat0_3_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat0_3() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat0_3)
  return dat0_3_;
}
inline void SymbolBlock3X5::set_dat0_3(::google::protobuf::int32 value) {
  
  dat0_3_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat0_3)
}

// int32 dat0_4 = 5;
inline void SymbolBlock3X5::clear_dat0_4() {
  dat0_4_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat0_4() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat0_4)
  return dat0_4_;
}
inline void SymbolBlock3X5::set_dat0_4(::google::protobuf::int32 value) {
  
  dat0_4_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat0_4)
}

// int32 dat1_0 = 6;
inline void SymbolBlock3X5::clear_dat1_0() {
  dat1_0_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat1_0() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat1_0)
  return dat1_0_;
}
inline void SymbolBlock3X5::set_dat1_0(::google::protobuf::int32 value) {
  
  dat1_0_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat1_0)
}

// int32 dat1_1 = 7;
inline void SymbolBlock3X5::clear_dat1_1() {
  dat1_1_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat1_1() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat1_1)
  return dat1_1_;
}
inline void SymbolBlock3X5::set_dat1_1(::google::protobuf::int32 value) {
  
  dat1_1_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat1_1)
}

// int32 dat1_2 = 8;
inline void SymbolBlock3X5::clear_dat1_2() {
  dat1_2_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat1_2() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat1_2)
  return dat1_2_;
}
inline void SymbolBlock3X5::set_dat1_2(::google::protobuf::int32 value) {
  
  dat1_2_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat1_2)
}

// int32 dat1_3 = 9;
inline void SymbolBlock3X5::clear_dat1_3() {
  dat1_3_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat1_3() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat1_3)
  return dat1_3_;
}
inline void SymbolBlock3X5::set_dat1_3(::google::protobuf::int32 value) {
  
  dat1_3_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat1_3)
}

// int32 dat1_4 = 10;
inline void SymbolBlock3X5::clear_dat1_4() {
  dat1_4_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat1_4() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat1_4)
  return dat1_4_;
}
inline void SymbolBlock3X5::set_dat1_4(::google::protobuf::int32 value) {
  
  dat1_4_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat1_4)
}

// int32 dat2_0 = 11;
inline void SymbolBlock3X5::clear_dat2_0() {
  dat2_0_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat2_0() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat2_0)
  return dat2_0_;
}
inline void SymbolBlock3X5::set_dat2_0(::google::protobuf::int32 value) {
  
  dat2_0_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat2_0)
}

// int32 dat2_1 = 12;
inline void SymbolBlock3X5::clear_dat2_1() {
  dat2_1_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat2_1() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat2_1)
  return dat2_1_;
}
inline void SymbolBlock3X5::set_dat2_1(::google::protobuf::int32 value) {
  
  dat2_1_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat2_1)
}

// int32 dat2_2 = 13;
inline void SymbolBlock3X5::clear_dat2_2() {
  dat2_2_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat2_2() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat2_2)
  return dat2_2_;
}
inline void SymbolBlock3X5::set_dat2_2(::google::protobuf::int32 value) {
  
  dat2_2_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat2_2)
}

// int32 dat2_3 = 14;
inline void SymbolBlock3X5::clear_dat2_3() {
  dat2_3_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat2_3() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat2_3)
  return dat2_3_;
}
inline void SymbolBlock3X5::set_dat2_3(::google::protobuf::int32 value) {
  
  dat2_3_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat2_3)
}

// int32 dat2_4 = 15;
inline void SymbolBlock3X5::clear_dat2_4() {
  dat2_4_ = 0;
}
inline ::google::protobuf::int32 SymbolBlock3X5::dat2_4() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock3X5.dat2_4)
  return dat2_4_;
}
inline void SymbolBlock3X5::set_dat2_4(::google::protobuf::int32 value) {
  
  dat2_4_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolBlock3X5.dat2_4)
}

// -------------------------------------------------------------------

// SymbolBlock

// .natashapb.SymbolBlock3X5 sb3x5 = 1;
inline bool SymbolBlock::has_sb3x5() const {
  return block_case() == kSb3X5;
}
inline void SymbolBlock::set_has_sb3x5() {
  _oneof_case_[0] = kSb3X5;
}
inline void SymbolBlock::clear_sb3x5() {
  if (has_sb3x5()) {
    delete block_.sb3x5_;
    clear_has_block();
  }
}
inline ::natashapb::SymbolBlock3X5* SymbolBlock::release_sb3x5() {
  // @@protoc_insertion_point(field_release:natashapb.SymbolBlock.sb3x5)
  if (has_sb3x5()) {
    clear_has_block();
      ::natashapb::SymbolBlock3X5* temp = block_.sb3x5_;
    block_.sb3x5_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::SymbolBlock3X5& SymbolBlock::sb3x5() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolBlock.sb3x5)
  return has_sb3x5()
      ? *block_.sb3x5_
      : *reinterpret_cast< ::natashapb::SymbolBlock3X5*>(&::natashapb::_SymbolBlock3X5_default_instance_);
}
inline ::natashapb::SymbolBlock3X5* SymbolBlock::mutable_sb3x5() {
  if (!has_sb3x5()) {
    clear_block();
    set_has_sb3x5();
    block_.sb3x5_ = ::google::protobuf::Arena::Create< ::natashapb::SymbolBlock3X5 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.SymbolBlock.sb3x5)
  return block_.sb3x5_;
}

inline bool SymbolBlock::has_block() const {
  return block_case() != BLOCK_NOT_SET;
}
inline void SymbolBlock::clear_has_block() {
  _oneof_case_[0] = BLOCK_NOT_SET;
}
inline SymbolBlock::BlockCase SymbolBlock::block_case() const {
  return SymbolBlock::BlockCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StaticCascadingRandomResult3X5

// int32 reelsIndex = 1;
inline void StaticCascadingRandomResult3X5::clear_reelsindex() {
  reelsindex_ = 0;
}
inline ::google::protobuf::int32 StaticCascadingRandomResult3X5::reelsindex() const {
  // @@protoc_insertion_point(field_get:natashapb.StaticCascadingRandomResult3X5.reelsIndex)
  return reelsindex_;
}
inline void StaticCascadingRandomResult3X5::set_reelsindex(::google::protobuf::int32 value) {
  
  reelsindex_ = value;
  // @@protoc_insertion_point(field_set:natashapb.StaticCascadingRandomResult3X5.reelsIndex)
}

// int32 downNums = 2;
inline void StaticCascadingRandomResult3X5::clear_downnums() {
  downnums_ = 0;
}
inline ::google::protobuf::int32 StaticCascadingRandomResult3X5::downnums() const {
  // @@protoc_insertion_point(field_get:natashapb.StaticCascadingRandomResult3X5.downNums)
  return downnums_;
}
inline void StaticCascadingRandomResult3X5::set_downnums(::google::protobuf::int32 value) {
  
  downnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.StaticCascadingRandomResult3X5.downNums)
}

// .natashapb.SymbolBlock symbolblock = 3;
inline bool StaticCascadingRandomResult3X5::has_symbolblock() const {
  return this != internal_default_instance() && symbolblock_ != NULL;
}
inline void StaticCascadingRandomResult3X5::clear_symbolblock() {
  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
}
inline const ::natashapb::SymbolBlock& StaticCascadingRandomResult3X5::symbolblock() const {
  const ::natashapb::SymbolBlock* p = symbolblock_;
  // @@protoc_insertion_point(field_get:natashapb.StaticCascadingRandomResult3X5.symbolblock)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::SymbolBlock*>(
      &::natashapb::_SymbolBlock_default_instance_);
}
inline ::natashapb::SymbolBlock* StaticCascadingRandomResult3X5::release_symbolblock() {
  // @@protoc_insertion_point(field_release:natashapb.StaticCascadingRandomResult3X5.symbolblock)
  
  ::natashapb::SymbolBlock* temp = symbolblock_;
  symbolblock_ = NULL;
  return temp;
}
inline ::natashapb::SymbolBlock* StaticCascadingRandomResult3X5::mutable_symbolblock() {
  
  if (symbolblock_ == NULL) {
    symbolblock_ = ::google::protobuf::Arena::Create< ::natashapb::SymbolBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.StaticCascadingRandomResult3X5.symbolblock)
  return symbolblock_;
}
inline void StaticCascadingRandomResult3X5::set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete symbolblock_;
  }
  if (symbolblock) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      symbolblock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbolblock, submessage_arena);
    }
    
  } else {
    
  }
  symbolblock_ = symbolblock;
  // @@protoc_insertion_point(field_set_allocated:natashapb.StaticCascadingRandomResult3X5.symbolblock)
}

// -------------------------------------------------------------------

// NormalReelsRandomResult3X5

// repeated int32 reelsIndex = 1;
inline int NormalReelsRandomResult3X5::reelsindex_size() const {
  return reelsindex_.size();
}
inline void NormalReelsRandomResult3X5::clear_reelsindex() {
  reelsindex_.Clear();
}
inline ::google::protobuf::int32 NormalReelsRandomResult3X5::reelsindex(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.NormalReelsRandomResult3X5.reelsIndex)
  return reelsindex_.Get(index);
}
inline void NormalReelsRandomResult3X5::set_reelsindex(int index, ::google::protobuf::int32 value) {
  reelsindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.NormalReelsRandomResult3X5.reelsIndex)
}
inline void NormalReelsRandomResult3X5::add_reelsindex(::google::protobuf::int32 value) {
  reelsindex_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.NormalReelsRandomResult3X5.reelsIndex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NormalReelsRandomResult3X5::reelsindex() const {
  // @@protoc_insertion_point(field_list:natashapb.NormalReelsRandomResult3X5.reelsIndex)
  return reelsindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NormalReelsRandomResult3X5::mutable_reelsindex() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.NormalReelsRandomResult3X5.reelsIndex)
  return &reelsindex_;
}

// .natashapb.SymbolBlock symbolblock = 2;
inline bool NormalReelsRandomResult3X5::has_symbolblock() const {
  return this != internal_default_instance() && symbolblock_ != NULL;
}
inline void NormalReelsRandomResult3X5::clear_symbolblock() {
  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
}
inline const ::natashapb::SymbolBlock& NormalReelsRandomResult3X5::symbolblock() const {
  const ::natashapb::SymbolBlock* p = symbolblock_;
  // @@protoc_insertion_point(field_get:natashapb.NormalReelsRandomResult3X5.symbolblock)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::SymbolBlock*>(
      &::natashapb::_SymbolBlock_default_instance_);
}
inline ::natashapb::SymbolBlock* NormalReelsRandomResult3X5::release_symbolblock() {
  // @@protoc_insertion_point(field_release:natashapb.NormalReelsRandomResult3X5.symbolblock)
  
  ::natashapb::SymbolBlock* temp = symbolblock_;
  symbolblock_ = NULL;
  return temp;
}
inline ::natashapb::SymbolBlock* NormalReelsRandomResult3X5::mutable_symbolblock() {
  
  if (symbolblock_ == NULL) {
    symbolblock_ = ::google::protobuf::Arena::Create< ::natashapb::SymbolBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.NormalReelsRandomResult3X5.symbolblock)
  return symbolblock_;
}
inline void NormalReelsRandomResult3X5::set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete symbolblock_;
  }
  if (symbolblock) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      symbolblock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbolblock, submessage_arena);
    }
    
  } else {
    
  }
  symbolblock_ = symbolblock;
  // @@protoc_insertion_point(field_set_allocated:natashapb.NormalReelsRandomResult3X5.symbolblock)
}

// -------------------------------------------------------------------

// RandomResult

// .natashapb.StaticCascadingRandomResult3X5 scrr3x5 = 1;
inline bool RandomResult::has_scrr3x5() const {
  return result_case() == kScrr3X5;
}
inline void RandomResult::set_has_scrr3x5() {
  _oneof_case_[0] = kScrr3X5;
}
inline void RandomResult::clear_scrr3x5() {
  if (has_scrr3x5()) {
    delete result_.scrr3x5_;
    clear_has_result();
  }
}
inline ::natashapb::StaticCascadingRandomResult3X5* RandomResult::release_scrr3x5() {
  // @@protoc_insertion_point(field_release:natashapb.RandomResult.scrr3x5)
  if (has_scrr3x5()) {
    clear_has_result();
      ::natashapb::StaticCascadingRandomResult3X5* temp = result_.scrr3x5_;
    result_.scrr3x5_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::StaticCascadingRandomResult3X5& RandomResult::scrr3x5() const {
  // @@protoc_insertion_point(field_get:natashapb.RandomResult.scrr3x5)
  return has_scrr3x5()
      ? *result_.scrr3x5_
      : *reinterpret_cast< ::natashapb::StaticCascadingRandomResult3X5*>(&::natashapb::_StaticCascadingRandomResult3X5_default_instance_);
}
inline ::natashapb::StaticCascadingRandomResult3X5* RandomResult::mutable_scrr3x5() {
  if (!has_scrr3x5()) {
    clear_result();
    set_has_scrr3x5();
    result_.scrr3x5_ = ::google::protobuf::Arena::Create< ::natashapb::StaticCascadingRandomResult3X5 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.RandomResult.scrr3x5)
  return result_.scrr3x5_;
}

// .natashapb.NormalReelsRandomResult3X5 nrrr3X5 = 2;
inline bool RandomResult::has_nrrr3x5() const {
  return result_case() == kNrrr3X5;
}
inline void RandomResult::set_has_nrrr3x5() {
  _oneof_case_[0] = kNrrr3X5;
}
inline void RandomResult::clear_nrrr3x5() {
  if (has_nrrr3x5()) {
    delete result_.nrrr3x5_;
    clear_has_result();
  }
}
inline ::natashapb::NormalReelsRandomResult3X5* RandomResult::release_nrrr3x5() {
  // @@protoc_insertion_point(field_release:natashapb.RandomResult.nrrr3X5)
  if (has_nrrr3x5()) {
    clear_has_result();
      ::natashapb::NormalReelsRandomResult3X5* temp = result_.nrrr3x5_;
    result_.nrrr3x5_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::NormalReelsRandomResult3X5& RandomResult::nrrr3x5() const {
  // @@protoc_insertion_point(field_get:natashapb.RandomResult.nrrr3X5)
  return has_nrrr3x5()
      ? *result_.nrrr3x5_
      : *reinterpret_cast< ::natashapb::NormalReelsRandomResult3X5*>(&::natashapb::_NormalReelsRandomResult3X5_default_instance_);
}
inline ::natashapb::NormalReelsRandomResult3X5* RandomResult::mutable_nrrr3x5() {
  if (!has_nrrr3x5()) {
    clear_result();
    set_has_nrrr3x5();
    result_.nrrr3x5_ = ::google::protobuf::Arena::Create< ::natashapb::NormalReelsRandomResult3X5 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.RandomResult.nrrr3X5)
  return result_.nrrr3x5_;
}

// .google.protobuf.Any info = 1000;
inline bool RandomResult::has_info() const {
  return this != internal_default_instance() && info_ != NULL;
}
inline const ::google::protobuf::Any& RandomResult::info() const {
  const ::google::protobuf::Any* p = info_;
  // @@protoc_insertion_point(field_get:natashapb.RandomResult.info)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* RandomResult::release_info() {
  // @@protoc_insertion_point(field_release:natashapb.RandomResult.info)
  
  ::google::protobuf::Any* temp = info_;
  info_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* RandomResult::mutable_info() {
  
  if (info_ == NULL) {
    info_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.RandomResult.info)
  return info_;
}
inline void RandomResult::set_allocated_info(::google::protobuf::Any* info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(info_);
  }
  if (info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:natashapb.RandomResult.info)
}

inline bool RandomResult::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void RandomResult::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline RandomResult::ResultCase RandomResult::result_case() const {
  return RandomResult::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Position2D

// int32 x = 1;
inline void Position2D::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Position2D::x() const {
  // @@protoc_insertion_point(field_get:natashapb.Position2D.x)
  return x_;
}
inline void Position2D::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:natashapb.Position2D.x)
}

// int32 y = 2;
inline void Position2D::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Position2D::y() const {
  // @@protoc_insertion_point(field_get:natashapb.Position2D.y)
  return y_;
}
inline void Position2D::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:natashapb.Position2D.y)
}

// -------------------------------------------------------------------

// GameResultInfo

// .natashapb.GAMERESULTTYPE typeGameResult = 1;
inline void GameResultInfo::clear_typegameresult() {
  typegameresult_ = 0;
}
inline ::natashapb::GAMERESULTTYPE GameResultInfo::typegameresult() const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.typeGameResult)
  return static_cast< ::natashapb::GAMERESULTTYPE >(typegameresult_);
}
inline void GameResultInfo::set_typegameresult(::natashapb::GAMERESULTTYPE value) {
  
  typegameresult_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameResultInfo.typeGameResult)
}

// repeated .natashapb.Position2D lstPos = 2;
inline int GameResultInfo::lstpos_size() const {
  return lstpos_.size();
}
inline void GameResultInfo::clear_lstpos() {
  lstpos_.Clear();
}
inline ::natashapb::Position2D* GameResultInfo::mutable_lstpos(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.GameResultInfo.lstPos)
  return lstpos_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::Position2D >*
GameResultInfo::mutable_lstpos() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.GameResultInfo.lstPos)
  return &lstpos_;
}
inline const ::natashapb::Position2D& GameResultInfo::lstpos(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.lstPos)
  return lstpos_.Get(index);
}
inline ::natashapb::Position2D* GameResultInfo::add_lstpos() {
  // @@protoc_insertion_point(field_add:natashapb.GameResultInfo.lstPos)
  return lstpos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::Position2D >&
GameResultInfo::lstpos() const {
  // @@protoc_insertion_point(field_list:natashapb.GameResultInfo.lstPos)
  return lstpos_;
}

// int32 symbol = 3;
inline void GameResultInfo::clear_symbol() {
  symbol_ = 0;
}
inline ::google::protobuf::int32 GameResultInfo::symbol() const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.symbol)
  return symbol_;
}
inline void GameResultInfo::set_symbol(::google::protobuf::int32 value) {
  
  symbol_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameResultInfo.symbol)
}

// repeated int32 lstSymbol = 4;
inline int GameResultInfo::lstsymbol_size() const {
  return lstsymbol_.size();
}
inline void GameResultInfo::clear_lstsymbol() {
  lstsymbol_.Clear();
}
inline ::google::protobuf::int32 GameResultInfo::lstsymbol(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.lstSymbol)
  return lstsymbol_.Get(index);
}
inline void GameResultInfo::set_lstsymbol(int index, ::google::protobuf::int32 value) {
  lstsymbol_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.GameResultInfo.lstSymbol)
}
inline void GameResultInfo::add_lstsymbol(::google::protobuf::int32 value) {
  lstsymbol_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.GameResultInfo.lstSymbol)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GameResultInfo::lstsymbol() const {
  // @@protoc_insertion_point(field_list:natashapb.GameResultInfo.lstSymbol)
  return lstsymbol_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GameResultInfo::mutable_lstsymbol() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.GameResultInfo.lstSymbol)
  return &lstsymbol_;
}

// int64 win = 5;
inline void GameResultInfo::clear_win() {
  win_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameResultInfo::win() const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.win)
  return win_;
}
inline void GameResultInfo::set_win(::google::protobuf::int64 value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameResultInfo.win)
}

// int64 realWin = 6;
inline void GameResultInfo::clear_realwin() {
  realwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameResultInfo::realwin() const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.realWin)
  return realwin_;
}
inline void GameResultInfo::set_realwin(::google::protobuf::int64 value) {
  
  realwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameResultInfo.realWin)
}

// int64 mul = 7;
inline void GameResultInfo::clear_mul() {
  mul_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameResultInfo::mul() const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.mul)
  return mul_;
}
inline void GameResultInfo::set_mul(::google::protobuf::int64 value) {
  
  mul_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameResultInfo.mul)
}

// int64 prize = 8;
inline void GameResultInfo::clear_prize() {
  prize_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameResultInfo::prize() const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.prize)
  return prize_;
}
inline void GameResultInfo::set_prize(::google::protobuf::int64 value) {
  
  prize_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameResultInfo.prize)
}

// int32 lineIndex = 9;
inline void GameResultInfo::clear_lineindex() {
  lineindex_ = 0;
}
inline ::google::protobuf::int32 GameResultInfo::lineindex() const {
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.lineIndex)
  return lineindex_;
}
inline void GameResultInfo::set_lineindex(::google::protobuf::int32 value) {
  
  lineindex_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameResultInfo.lineIndex)
}

// .google.protobuf.Any exDat = 1000;
inline bool GameResultInfo::has_exdat() const {
  return this != internal_default_instance() && exdat_ != NULL;
}
inline const ::google::protobuf::Any& GameResultInfo::exdat() const {
  const ::google::protobuf::Any* p = exdat_;
  // @@protoc_insertion_point(field_get:natashapb.GameResultInfo.exDat)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* GameResultInfo::release_exdat() {
  // @@protoc_insertion_point(field_release:natashapb.GameResultInfo.exDat)
  
  ::google::protobuf::Any* temp = exdat_;
  exdat_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* GameResultInfo::mutable_exdat() {
  
  if (exdat_ == NULL) {
    exdat_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameResultInfo.exDat)
  return exdat_;
}
inline void GameResultInfo::set_allocated_exdat(::google::protobuf::Any* exdat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exdat_);
  }
  if (exdat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exdat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exdat, submessage_arena);
    }
    
  } else {
    
  }
  exdat_ = exdat;
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameResultInfo.exDat)
}

// -------------------------------------------------------------------

// SpinResult

// int64 win = 1;
inline void SpinResult::clear_win() {
  win_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SpinResult::win() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.win)
  return win_;
}
inline void SpinResult::set_win(::google::protobuf::int64 value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.win)
}

// int64 realWin = 2;
inline void SpinResult::clear_realwin() {
  realwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SpinResult::realwin() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.realWin)
  return realwin_;
}
inline void SpinResult::set_realwin(::google::protobuf::int64 value) {
  
  realwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.realWin)
}

// repeated .natashapb.GameResultInfo lstGRI = 3;
inline int SpinResult::lstgri_size() const {
  return lstgri_.size();
}
inline void SpinResult::clear_lstgri() {
  lstgri_.Clear();
}
inline ::natashapb::GameResultInfo* SpinResult::mutable_lstgri(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.SpinResult.lstGRI)
  return lstgri_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::GameResultInfo >*
SpinResult::mutable_lstgri() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.SpinResult.lstGRI)
  return &lstgri_;
}
inline const ::natashapb::GameResultInfo& SpinResult::lstgri(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.lstGRI)
  return lstgri_.Get(index);
}
inline ::natashapb::GameResultInfo* SpinResult::add_lstgri() {
  // @@protoc_insertion_point(field_add:natashapb.SpinResult.lstGRI)
  return lstgri_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::GameResultInfo >&
SpinResult::lstgri() const {
  // @@protoc_insertion_point(field_list:natashapb.SpinResult.lstGRI)
  return lstgri_;
}

// int32 fgNums = 4;
inline void SpinResult::clear_fgnums() {
  fgnums_ = 0;
}
inline ::google::protobuf::int32 SpinResult::fgnums() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.fgNums)
  return fgnums_;
}
inline void SpinResult::set_fgnums(::google::protobuf::int32 value) {
  
  fgnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.fgNums)
}

// bool inFG = 5;
inline void SpinResult::clear_infg() {
  infg_ = false;
}
inline bool SpinResult::infg() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.inFG)
  return infg_;
}
inline void SpinResult::set_infg(bool value) {
  
  infg_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.inFG)
}

// bool inBonus = 6;
inline void SpinResult::clear_inbonus() {
  inbonus_ = false;
}
inline bool SpinResult::inbonus() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.inBonus)
  return inbonus_;
}
inline void SpinResult::set_inbonus(bool value) {
  
  inbonus_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.inBonus)
}

// bool inJackpot = 7;
inline void SpinResult::clear_injackpot() {
  injackpot_ = false;
}
inline bool SpinResult::injackpot() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.inJackpot)
  return injackpot_;
}
inline void SpinResult::set_injackpot(bool value) {
  
  injackpot_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.inJackpot)
}

// bool inCommonJackpot = 8;
inline void SpinResult::clear_incommonjackpot() {
  incommonjackpot_ = false;
}
inline bool SpinResult::incommonjackpot() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.inCommonJackpot)
  return incommonjackpot_;
}
inline void SpinResult::set_incommonjackpot(bool value) {
  
  incommonjackpot_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.inCommonJackpot)
}

// bool inRespin = 9;
inline void SpinResult::clear_inrespin() {
  inrespin_ = false;
}
inline bool SpinResult::inrespin() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.inRespin)
  return inrespin_;
}
inline void SpinResult::set_inrespin(bool value) {
  
  inrespin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.inRespin)
}

// int64 awardMul = 10;
inline void SpinResult::clear_awardmul() {
  awardmul_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SpinResult::awardmul() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.awardMul)
  return awardmul_;
}
inline void SpinResult::set_awardmul(::google::protobuf::int64 value) {
  
  awardmul_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.awardMul)
}

// int32 realFGNums = 11;
inline void SpinResult::clear_realfgnums() {
  realfgnums_ = 0;
}
inline ::google::protobuf::int32 SpinResult::realfgnums() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.realFGNums)
  return realfgnums_;
}
inline void SpinResult::set_realfgnums(::google::protobuf::int32 value) {
  
  realfgnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.realFGNums)
}

// int32 specialTriggered = 12;
inline void SpinResult::clear_specialtriggered() {
  specialtriggered_ = 0;
}
inline ::google::protobuf::int32 SpinResult::specialtriggered() const {
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.specialTriggered)
  return specialtriggered_;
}
inline void SpinResult::set_specialtriggered(::google::protobuf::int32 value) {
  
  specialtriggered_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SpinResult.specialTriggered)
}

// .natashapb.SymbolBlock symbolblock = 100;
inline bool SpinResult::has_symbolblock() const {
  return this != internal_default_instance() && symbolblock_ != NULL;
}
inline void SpinResult::clear_symbolblock() {
  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
}
inline const ::natashapb::SymbolBlock& SpinResult::symbolblock() const {
  const ::natashapb::SymbolBlock* p = symbolblock_;
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.symbolblock)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::SymbolBlock*>(
      &::natashapb::_SymbolBlock_default_instance_);
}
inline ::natashapb::SymbolBlock* SpinResult::release_symbolblock() {
  // @@protoc_insertion_point(field_release:natashapb.SpinResult.symbolblock)
  
  ::natashapb::SymbolBlock* temp = symbolblock_;
  symbolblock_ = NULL;
  return temp;
}
inline ::natashapb::SymbolBlock* SpinResult::mutable_symbolblock() {
  
  if (symbolblock_ == NULL) {
    symbolblock_ = ::google::protobuf::Arena::Create< ::natashapb::SymbolBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.SpinResult.symbolblock)
  return symbolblock_;
}
inline void SpinResult::set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete symbolblock_;
  }
  if (symbolblock) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      symbolblock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbolblock, submessage_arena);
    }
    
  } else {
    
  }
  symbolblock_ = symbolblock;
  // @@protoc_insertion_point(field_set_allocated:natashapb.SpinResult.symbolblock)
}

// .natashapb.GameCtrlSpin spin = 101;
inline bool SpinResult::has_spin() const {
  return this != internal_default_instance() && spin_ != NULL;
}
inline void SpinResult::clear_spin() {
  if (GetArenaNoVirtual() == NULL && spin_ != NULL) {
    delete spin_;
  }
  spin_ = NULL;
}
inline const ::natashapb::GameCtrlSpin& SpinResult::spin() const {
  const ::natashapb::GameCtrlSpin* p = spin_;
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.spin)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::GameCtrlSpin*>(
      &::natashapb::_GameCtrlSpin_default_instance_);
}
inline ::natashapb::GameCtrlSpin* SpinResult::release_spin() {
  // @@protoc_insertion_point(field_release:natashapb.SpinResult.spin)
  
  ::natashapb::GameCtrlSpin* temp = spin_;
  spin_ = NULL;
  return temp;
}
inline ::natashapb::GameCtrlSpin* SpinResult::mutable_spin() {
  
  if (spin_ == NULL) {
    spin_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlSpin >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.SpinResult.spin)
  return spin_;
}
inline void SpinResult::set_allocated_spin(::natashapb::GameCtrlSpin* spin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spin_;
  }
  if (spin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spin, submessage_arena);
    }
    
  } else {
    
  }
  spin_ = spin;
  // @@protoc_insertion_point(field_set_allocated:natashapb.SpinResult.spin)
}

// .google.protobuf.Any exDat = 1000;
inline bool SpinResult::has_exdat() const {
  return this != internal_default_instance() && exdat_ != NULL;
}
inline const ::google::protobuf::Any& SpinResult::exdat() const {
  const ::google::protobuf::Any* p = exdat_;
  // @@protoc_insertion_point(field_get:natashapb.SpinResult.exDat)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* SpinResult::release_exdat() {
  // @@protoc_insertion_point(field_release:natashapb.SpinResult.exDat)
  
  ::google::protobuf::Any* temp = exdat_;
  exdat_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* SpinResult::mutable_exdat() {
  
  if (exdat_ == NULL) {
    exdat_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.SpinResult.exDat)
  return exdat_;
}
inline void SpinResult::set_allocated_exdat(::google::protobuf::Any* exdat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exdat_);
  }
  if (exdat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exdat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exdat, submessage_arena);
    }
    
  } else {
    
  }
  exdat_ = exdat;
  // @@protoc_insertion_point(field_set_allocated:natashapb.SpinResult.exDat)
}

// -------------------------------------------------------------------

// GameCtrlID

// int64 ctrlID = 1;
inline void GameCtrlID::clear_ctrlid() {
  ctrlid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrlID::ctrlid() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlID.ctrlID)
  return ctrlid_;
}
inline void GameCtrlID::set_ctrlid(::google::protobuf::int64 value) {
  
  ctrlid_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlID.ctrlID)
}

// int64 baseID = 2;
inline void GameCtrlID::clear_baseid() {
  baseid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrlID::baseid() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlID.baseID)
  return baseid_;
}
inline void GameCtrlID::set_baseid(::google::protobuf::int64 value) {
  
  baseid_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlID.baseID)
}

// int64 parentID = 3;
inline void GameCtrlID::clear_parentid() {
  parentid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrlID::parentid() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlID.parentID)
  return parentid_;
}
inline void GameCtrlID::set_parentid(::google::protobuf::int64 value) {
  
  parentid_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlID.parentID)
}

// .natashapb.GAMEMODTYPE gameMod = 4;
inline void GameCtrlID::clear_gamemod() {
  gamemod_ = 0;
}
inline ::natashapb::GAMEMODTYPE GameCtrlID::gamemod() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlID.gameMod)
  return static_cast< ::natashapb::GAMEMODTYPE >(gamemod_);
}
inline void GameCtrlID::set_gamemod(::natashapb::GAMEMODTYPE value) {
  
  gamemod_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlID.gameMod)
}

// -------------------------------------------------------------------

// BaseCascadingInfo

// int64 curBet = 1;
inline void BaseCascadingInfo::clear_curbet() {
  curbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BaseCascadingInfo::curbet() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseCascadingInfo.curBet)
  return curbet_;
}
inline void BaseCascadingInfo::set_curbet(::google::protobuf::int64 value) {
  
  curbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseCascadingInfo.curBet)
}

// int32 curLines = 2;
inline void BaseCascadingInfo::clear_curlines() {
  curlines_ = 0;
}
inline ::google::protobuf::int32 BaseCascadingInfo::curlines() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseCascadingInfo.curLines)
  return curlines_;
}
inline void BaseCascadingInfo::set_curlines(::google::protobuf::int32 value) {
  
  curlines_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseCascadingInfo.curLines)
}

// int32 curTimes = 3;
inline void BaseCascadingInfo::clear_curtimes() {
  curtimes_ = 0;
}
inline ::google::protobuf::int32 BaseCascadingInfo::curtimes() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseCascadingInfo.curTimes)
  return curtimes_;
}
inline void BaseCascadingInfo::set_curtimes(::google::protobuf::int32 value) {
  
  curtimes_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseCascadingInfo.curTimes)
}

// int32 turnNums = 4;
inline void BaseCascadingInfo::clear_turnnums() {
  turnnums_ = 0;
}
inline ::google::protobuf::int32 BaseCascadingInfo::turnnums() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseCascadingInfo.turnNums)
  return turnnums_;
}
inline void BaseCascadingInfo::set_turnnums(::google::protobuf::int32 value) {
  
  turnnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseCascadingInfo.turnNums)
}

// int64 turnWin = 5;
inline void BaseCascadingInfo::clear_turnwin() {
  turnwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BaseCascadingInfo::turnwin() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseCascadingInfo.turnWin)
  return turnwin_;
}
inline void BaseCascadingInfo::set_turnwin(::google::protobuf::int64 value) {
  
  turnwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseCascadingInfo.turnWin)
}

// .natashapb.CASCADINGFREESTATE freeState = 6;
inline void BaseCascadingInfo::clear_freestate() {
  freestate_ = 0;
}
inline ::natashapb::CASCADINGFREESTATE BaseCascadingInfo::freestate() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseCascadingInfo.freeState)
  return static_cast< ::natashapb::CASCADINGFREESTATE >(freestate_);
}
inline void BaseCascadingInfo::set_freestate(::natashapb::CASCADINGFREESTATE value) {
  
  freestate_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseCascadingInfo.freeState)
}

// bool isEnd = 7;
inline void BaseCascadingInfo::clear_isend() {
  isend_ = false;
}
inline bool BaseCascadingInfo::isend() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseCascadingInfo.isEnd)
  return isend_;
}
inline void BaseCascadingInfo::set_isend(bool value) {
  
  isend_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseCascadingInfo.isEnd)
}

// .natashapb.SymbolBlock symbolblock = 100;
inline bool BaseCascadingInfo::has_symbolblock() const {
  return this != internal_default_instance() && symbolblock_ != NULL;
}
inline void BaseCascadingInfo::clear_symbolblock() {
  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
}
inline const ::natashapb::SymbolBlock& BaseCascadingInfo::symbolblock() const {
  const ::natashapb::SymbolBlock* p = symbolblock_;
  // @@protoc_insertion_point(field_get:natashapb.BaseCascadingInfo.symbolblock)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::SymbolBlock*>(
      &::natashapb::_SymbolBlock_default_instance_);
}
inline ::natashapb::SymbolBlock* BaseCascadingInfo::release_symbolblock() {
  // @@protoc_insertion_point(field_release:natashapb.BaseCascadingInfo.symbolblock)
  
  ::natashapb::SymbolBlock* temp = symbolblock_;
  symbolblock_ = NULL;
  return temp;
}
inline ::natashapb::SymbolBlock* BaseCascadingInfo::mutable_symbolblock() {
  
  if (symbolblock_ == NULL) {
    symbolblock_ = ::google::protobuf::Arena::Create< ::natashapb::SymbolBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.BaseCascadingInfo.symbolblock)
  return symbolblock_;
}
inline void BaseCascadingInfo::set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete symbolblock_;
  }
  if (symbolblock) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      symbolblock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbolblock, submessage_arena);
    }
    
  } else {
    
  }
  symbolblock_ = symbolblock;
  // @@protoc_insertion_point(field_set_allocated:natashapb.BaseCascadingInfo.symbolblock)
}

// -------------------------------------------------------------------

// FGCache

// int32 fgNums = 1;
inline void FGCache::clear_fgnums() {
  fgnums_ = 0;
}
inline ::google::protobuf::int32 FGCache::fgnums() const {
  // @@protoc_insertion_point(field_get:natashapb.FGCache.fgNums)
  return fgnums_;
}
inline void FGCache::set_fgnums(::google::protobuf::int32 value) {
  
  fgnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.FGCache.fgNums)
}

// -------------------------------------------------------------------

// BaseFreeInfo

// int64 curBet = 1;
inline void BaseFreeInfo::clear_curbet() {
  curbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BaseFreeInfo::curbet() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseFreeInfo.curBet)
  return curbet_;
}
inline void BaseFreeInfo::set_curbet(::google::protobuf::int64 value) {
  
  curbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseFreeInfo.curBet)
}

// int32 curLines = 2;
inline void BaseFreeInfo::clear_curlines() {
  curlines_ = 0;
}
inline ::google::protobuf::int32 BaseFreeInfo::curlines() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseFreeInfo.curLines)
  return curlines_;
}
inline void BaseFreeInfo::set_curlines(::google::protobuf::int32 value) {
  
  curlines_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseFreeInfo.curLines)
}

// int32 curTimes = 3;
inline void BaseFreeInfo::clear_curtimes() {
  curtimes_ = 0;
}
inline ::google::protobuf::int32 BaseFreeInfo::curtimes() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseFreeInfo.curTimes)
  return curtimes_;
}
inline void BaseFreeInfo::set_curtimes(::google::protobuf::int32 value) {
  
  curtimes_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseFreeInfo.curTimes)
}

// int64 totalWin = 4;
inline void BaseFreeInfo::clear_totalwin() {
  totalwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BaseFreeInfo::totalwin() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseFreeInfo.totalWin)
  return totalwin_;
}
inline void BaseFreeInfo::set_totalwin(::google::protobuf::int64 value) {
  
  totalwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseFreeInfo.totalWin)
}

// int32 lastNums = 5;
inline void BaseFreeInfo::clear_lastnums() {
  lastnums_ = 0;
}
inline ::google::protobuf::int32 BaseFreeInfo::lastnums() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseFreeInfo.lastNums)
  return lastnums_;
}
inline void BaseFreeInfo::set_lastnums(::google::protobuf::int32 value) {
  
  lastnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseFreeInfo.lastNums)
}

// int32 curNums = 6;
inline void BaseFreeInfo::clear_curnums() {
  curnums_ = 0;
}
inline ::google::protobuf::int32 BaseFreeInfo::curnums() const {
  // @@protoc_insertion_point(field_get:natashapb.BaseFreeInfo.curNums)
  return curnums_;
}
inline void BaseFreeInfo::set_curnums(::google::protobuf::int32 value) {
  
  curnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BaseFreeInfo.curNums)
}

// -------------------------------------------------------------------

// RespinHistory

// int64 realWin = 1;
inline void RespinHistory::clear_realwin() {
  realwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RespinHistory::realwin() const {
  // @@protoc_insertion_point(field_get:natashapb.RespinHistory.realWin)
  return realwin_;
}
inline void RespinHistory::set_realwin(::google::protobuf::int64 value) {
  
  realwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.RespinHistory.realWin)
}

// int64 win = 2;
inline void RespinHistory::clear_win() {
  win_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RespinHistory::win() const {
  // @@protoc_insertion_point(field_get:natashapb.RespinHistory.win)
  return win_;
}
inline void RespinHistory::set_win(::google::protobuf::int64 value) {
  
  win_ = value;
  // @@protoc_insertion_point(field_set:natashapb.RespinHistory.win)
}

// int64 mul = 3;
inline void RespinHistory::clear_mul() {
  mul_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RespinHistory::mul() const {
  // @@protoc_insertion_point(field_get:natashapb.RespinHistory.mul)
  return mul_;
}
inline void RespinHistory::set_mul(::google::protobuf::int64 value) {
  
  mul_ = value;
  // @@protoc_insertion_point(field_set:natashapb.RespinHistory.mul)
}

// bool isSpecial = 4;
inline void RespinHistory::clear_isspecial() {
  isspecial_ = false;
}
inline bool RespinHistory::isspecial() const {
  // @@protoc_insertion_point(field_get:natashapb.RespinHistory.isSpecial)
  return isspecial_;
}
inline void RespinHistory::set_isspecial(bool value) {
  
  isspecial_ = value;
  // @@protoc_insertion_point(field_set:natashapb.RespinHistory.isSpecial)
}

// -------------------------------------------------------------------

// RespinHistoryList

// repeated .natashapb.RespinHistory lst = 1;
inline int RespinHistoryList::lst_size() const {
  return lst_.size();
}
inline void RespinHistoryList::clear_lst() {
  lst_.Clear();
}
inline ::natashapb::RespinHistory* RespinHistoryList::mutable_lst(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.RespinHistoryList.lst)
  return lst_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::RespinHistory >*
RespinHistoryList::mutable_lst() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.RespinHistoryList.lst)
  return &lst_;
}
inline const ::natashapb::RespinHistory& RespinHistoryList::lst(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.RespinHistoryList.lst)
  return lst_.Get(index);
}
inline ::natashapb::RespinHistory* RespinHistoryList::add_lst() {
  // @@protoc_insertion_point(field_add:natashapb.RespinHistoryList.lst)
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::RespinHistory >&
RespinHistoryList::lst() const {
  // @@protoc_insertion_point(field_list:natashapb.RespinHistoryList.lst)
  return lst_;
}

// -------------------------------------------------------------------

// UserGameModInfo

// int32 ver = 1;
inline void UserGameModInfo::clear_ver() {
  ver_ = 0;
}
inline ::google::protobuf::int32 UserGameModInfo::ver() const {
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.ver)
  return ver_;
}
inline void UserGameModInfo::set_ver(::google::protobuf::int32 value) {
  
  ver_ = value;
  // @@protoc_insertion_point(field_set:natashapb.UserGameModInfo.ver)
}

// .natashapb.RandomResult randomResult = 10;
inline bool UserGameModInfo::has_randomresult() const {
  return this != internal_default_instance() && randomresult_ != NULL;
}
inline void UserGameModInfo::clear_randomresult() {
  if (GetArenaNoVirtual() == NULL && randomresult_ != NULL) {
    delete randomresult_;
  }
  randomresult_ = NULL;
}
inline const ::natashapb::RandomResult& UserGameModInfo::randomresult() const {
  const ::natashapb::RandomResult* p = randomresult_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.randomResult)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::RandomResult*>(
      &::natashapb::_RandomResult_default_instance_);
}
inline ::natashapb::RandomResult* UserGameModInfo::release_randomresult() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.randomResult)
  
  ::natashapb::RandomResult* temp = randomresult_;
  randomresult_ = NULL;
  return temp;
}
inline ::natashapb::RandomResult* UserGameModInfo::mutable_randomresult() {
  
  if (randomresult_ == NULL) {
    randomresult_ = ::google::protobuf::Arena::Create< ::natashapb::RandomResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.randomResult)
  return randomresult_;
}
inline void UserGameModInfo::set_allocated_randomresult(::natashapb::RandomResult* randomresult) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete randomresult_;
  }
  if (randomresult) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      randomresult = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, randomresult, submessage_arena);
    }
    
  } else {
    
  }
  randomresult_ = randomresult;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.randomResult)
}

// .natashapb.SpinResult spinResult = 11;
inline bool UserGameModInfo::has_spinresult() const {
  return this != internal_default_instance() && spinresult_ != NULL;
}
inline void UserGameModInfo::clear_spinresult() {
  if (GetArenaNoVirtual() == NULL && spinresult_ != NULL) {
    delete spinresult_;
  }
  spinresult_ = NULL;
}
inline const ::natashapb::SpinResult& UserGameModInfo::spinresult() const {
  const ::natashapb::SpinResult* p = spinresult_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.spinResult)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::SpinResult*>(
      &::natashapb::_SpinResult_default_instance_);
}
inline ::natashapb::SpinResult* UserGameModInfo::release_spinresult() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.spinResult)
  
  ::natashapb::SpinResult* temp = spinresult_;
  spinresult_ = NULL;
  return temp;
}
inline ::natashapb::SpinResult* UserGameModInfo::mutable_spinresult() {
  
  if (spinresult_ == NULL) {
    spinresult_ = ::google::protobuf::Arena::Create< ::natashapb::SpinResult >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.spinResult)
  return spinresult_;
}
inline void UserGameModInfo::set_allocated_spinresult(::natashapb::SpinResult* spinresult) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spinresult_;
  }
  if (spinresult) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spinresult = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spinresult, submessage_arena);
    }
    
  } else {
    
  }
  spinresult_ = spinresult;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.spinResult)
}

// .natashapb.GameCtrlID gameCtrlID = 12;
inline bool UserGameModInfo::has_gamectrlid() const {
  return this != internal_default_instance() && gamectrlid_ != NULL;
}
inline void UserGameModInfo::clear_gamectrlid() {
  if (GetArenaNoVirtual() == NULL && gamectrlid_ != NULL) {
    delete gamectrlid_;
  }
  gamectrlid_ = NULL;
}
inline const ::natashapb::GameCtrlID& UserGameModInfo::gamectrlid() const {
  const ::natashapb::GameCtrlID* p = gamectrlid_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.gameCtrlID)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::GameCtrlID*>(
      &::natashapb::_GameCtrlID_default_instance_);
}
inline ::natashapb::GameCtrlID* UserGameModInfo::release_gamectrlid() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.gameCtrlID)
  
  ::natashapb::GameCtrlID* temp = gamectrlid_;
  gamectrlid_ = NULL;
  return temp;
}
inline ::natashapb::GameCtrlID* UserGameModInfo::mutable_gamectrlid() {
  
  if (gamectrlid_ == NULL) {
    gamectrlid_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlID >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.gameCtrlID)
  return gamectrlid_;
}
inline void UserGameModInfo::set_allocated_gamectrlid(::natashapb::GameCtrlID* gamectrlid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete gamectrlid_;
  }
  if (gamectrlid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      gamectrlid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, gamectrlid, submessage_arena);
    }
    
  } else {
    
  }
  gamectrlid_ = gamectrlid;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.gameCtrlID)
}

// .natashapb.BaseCascadingInfo cascadingInfo = 13;
inline bool UserGameModInfo::has_cascadinginfo() const {
  return this != internal_default_instance() && cascadinginfo_ != NULL;
}
inline void UserGameModInfo::clear_cascadinginfo() {
  if (GetArenaNoVirtual() == NULL && cascadinginfo_ != NULL) {
    delete cascadinginfo_;
  }
  cascadinginfo_ = NULL;
}
inline const ::natashapb::BaseCascadingInfo& UserGameModInfo::cascadinginfo() const {
  const ::natashapb::BaseCascadingInfo* p = cascadinginfo_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.cascadingInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::BaseCascadingInfo*>(
      &::natashapb::_BaseCascadingInfo_default_instance_);
}
inline ::natashapb::BaseCascadingInfo* UserGameModInfo::release_cascadinginfo() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.cascadingInfo)
  
  ::natashapb::BaseCascadingInfo* temp = cascadinginfo_;
  cascadinginfo_ = NULL;
  return temp;
}
inline ::natashapb::BaseCascadingInfo* UserGameModInfo::mutable_cascadinginfo() {
  
  if (cascadinginfo_ == NULL) {
    cascadinginfo_ = ::google::protobuf::Arena::Create< ::natashapb::BaseCascadingInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.cascadingInfo)
  return cascadinginfo_;
}
inline void UserGameModInfo::set_allocated_cascadinginfo(::natashapb::BaseCascadingInfo* cascadinginfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cascadinginfo_;
  }
  if (cascadinginfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cascadinginfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cascadinginfo, submessage_arena);
    }
    
  } else {
    
  }
  cascadinginfo_ = cascadinginfo;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.cascadingInfo)
}

// .natashapb.RespinHistoryList lstHistory = 14;
inline bool UserGameModInfo::has_lsthistory() const {
  return this != internal_default_instance() && lsthistory_ != NULL;
}
inline void UserGameModInfo::clear_lsthistory() {
  if (GetArenaNoVirtual() == NULL && lsthistory_ != NULL) {
    delete lsthistory_;
  }
  lsthistory_ = NULL;
}
inline const ::natashapb::RespinHistoryList& UserGameModInfo::lsthistory() const {
  const ::natashapb::RespinHistoryList* p = lsthistory_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.lstHistory)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::RespinHistoryList*>(
      &::natashapb::_RespinHistoryList_default_instance_);
}
inline ::natashapb::RespinHistoryList* UserGameModInfo::release_lsthistory() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.lstHistory)
  
  ::natashapb::RespinHistoryList* temp = lsthistory_;
  lsthistory_ = NULL;
  return temp;
}
inline ::natashapb::RespinHistoryList* UserGameModInfo::mutable_lsthistory() {
  
  if (lsthistory_ == NULL) {
    lsthistory_ = ::google::protobuf::Arena::Create< ::natashapb::RespinHistoryList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.lstHistory)
  return lsthistory_;
}
inline void UserGameModInfo::set_allocated_lsthistory(::natashapb::RespinHistoryList* lsthistory) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete lsthistory_;
  }
  if (lsthistory) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lsthistory = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lsthistory, submessage_arena);
    }
    
  } else {
    
  }
  lsthistory_ = lsthistory;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.lstHistory)
}

// .natashapb.BaseFreeInfo freeInfo = 15;
inline bool UserGameModInfo::has_freeinfo() const {
  return this != internal_default_instance() && freeinfo_ != NULL;
}
inline void UserGameModInfo::clear_freeinfo() {
  if (GetArenaNoVirtual() == NULL && freeinfo_ != NULL) {
    delete freeinfo_;
  }
  freeinfo_ = NULL;
}
inline const ::natashapb::BaseFreeInfo& UserGameModInfo::freeinfo() const {
  const ::natashapb::BaseFreeInfo* p = freeinfo_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.freeInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::BaseFreeInfo*>(
      &::natashapb::_BaseFreeInfo_default_instance_);
}
inline ::natashapb::BaseFreeInfo* UserGameModInfo::release_freeinfo() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.freeInfo)
  
  ::natashapb::BaseFreeInfo* temp = freeinfo_;
  freeinfo_ = NULL;
  return temp;
}
inline ::natashapb::BaseFreeInfo* UserGameModInfo::mutable_freeinfo() {
  
  if (freeinfo_ == NULL) {
    freeinfo_ = ::google::protobuf::Arena::Create< ::natashapb::BaseFreeInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.freeInfo)
  return freeinfo_;
}
inline void UserGameModInfo::set_allocated_freeinfo(::natashapb::BaseFreeInfo* freeinfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete freeinfo_;
  }
  if (freeinfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      freeinfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freeinfo, submessage_arena);
    }
    
  } else {
    
  }
  freeinfo_ = freeinfo;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.freeInfo)
}

// .natashapb.FGCache fgCache = 16;
inline bool UserGameModInfo::has_fgcache() const {
  return this != internal_default_instance() && fgcache_ != NULL;
}
inline void UserGameModInfo::clear_fgcache() {
  if (GetArenaNoVirtual() == NULL && fgcache_ != NULL) {
    delete fgcache_;
  }
  fgcache_ = NULL;
}
inline const ::natashapb::FGCache& UserGameModInfo::fgcache() const {
  const ::natashapb::FGCache* p = fgcache_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.fgCache)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::FGCache*>(
      &::natashapb::_FGCache_default_instance_);
}
inline ::natashapb::FGCache* UserGameModInfo::release_fgcache() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.fgCache)
  
  ::natashapb::FGCache* temp = fgcache_;
  fgcache_ = NULL;
  return temp;
}
inline ::natashapb::FGCache* UserGameModInfo::mutable_fgcache() {
  
  if (fgcache_ == NULL) {
    fgcache_ = ::google::protobuf::Arena::Create< ::natashapb::FGCache >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.fgCache)
  return fgcache_;
}
inline void UserGameModInfo::set_allocated_fgcache(::natashapb::FGCache* fgcache) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fgcache_;
  }
  if (fgcache) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fgcache = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fgcache, submessage_arena);
    }
    
  } else {
    
  }
  fgcache_ = fgcache;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.fgCache)
}

// .natashapb.SymbolBlock symbolblock = 100;
inline bool UserGameModInfo::has_symbolblock() const {
  return this != internal_default_instance() && symbolblock_ != NULL;
}
inline void UserGameModInfo::clear_symbolblock() {
  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
}
inline const ::natashapb::SymbolBlock& UserGameModInfo::symbolblock() const {
  const ::natashapb::SymbolBlock* p = symbolblock_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.symbolblock)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::SymbolBlock*>(
      &::natashapb::_SymbolBlock_default_instance_);
}
inline ::natashapb::SymbolBlock* UserGameModInfo::release_symbolblock() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.symbolblock)
  
  ::natashapb::SymbolBlock* temp = symbolblock_;
  symbolblock_ = NULL;
  return temp;
}
inline ::natashapb::SymbolBlock* UserGameModInfo::mutable_symbolblock() {
  
  if (symbolblock_ == NULL) {
    symbolblock_ = ::google::protobuf::Arena::Create< ::natashapb::SymbolBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.symbolblock)
  return symbolblock_;
}
inline void UserGameModInfo::set_allocated_symbolblock(::natashapb::SymbolBlock* symbolblock) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete symbolblock_;
  }
  if (symbolblock) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      symbolblock = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, symbolblock, submessage_arena);
    }
    
  } else {
    
  }
  symbolblock_ = symbolblock;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.symbolblock)
}

// .google.protobuf.Any exDat = 1000;
inline bool UserGameModInfo::has_exdat() const {
  return this != internal_default_instance() && exdat_ != NULL;
}
inline const ::google::protobuf::Any& UserGameModInfo::exdat() const {
  const ::google::protobuf::Any* p = exdat_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameModInfo.exDat)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* UserGameModInfo::release_exdat() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameModInfo.exDat)
  
  ::google::protobuf::Any* temp = exdat_;
  exdat_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* UserGameModInfo::mutable_exdat() {
  
  if (exdat_ == NULL) {
    exdat_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameModInfo.exDat)
  return exdat_;
}
inline void UserGameModInfo::set_allocated_exdat(::google::protobuf::Any* exdat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exdat_);
  }
  if (exdat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exdat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exdat, submessage_arena);
    }
    
  } else {
    
  }
  exdat_ = exdat;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameModInfo.exDat)
}

// -------------------------------------------------------------------

// UserGameLogicInfo

// .natashapb.UserGameModInfo basegame = 1;
inline bool UserGameLogicInfo::has_basegame() const {
  return this != internal_default_instance() && basegame_ != NULL;
}
inline void UserGameLogicInfo::clear_basegame() {
  if (GetArenaNoVirtual() == NULL && basegame_ != NULL) {
    delete basegame_;
  }
  basegame_ = NULL;
}
inline const ::natashapb::UserGameModInfo& UserGameLogicInfo::basegame() const {
  const ::natashapb::UserGameModInfo* p = basegame_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.basegame)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::UserGameModInfo*>(
      &::natashapb::_UserGameModInfo_default_instance_);
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::release_basegame() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameLogicInfo.basegame)
  
  ::natashapb::UserGameModInfo* temp = basegame_;
  basegame_ = NULL;
  return temp;
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::mutable_basegame() {
  
  if (basegame_ == NULL) {
    basegame_ = ::google::protobuf::Arena::Create< ::natashapb::UserGameModInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameLogicInfo.basegame)
  return basegame_;
}
inline void UserGameLogicInfo::set_allocated_basegame(::natashapb::UserGameModInfo* basegame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete basegame_;
  }
  if (basegame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      basegame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, basegame, submessage_arena);
    }
    
  } else {
    
  }
  basegame_ = basegame;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameLogicInfo.basegame)
}

// .natashapb.UserGameModInfo freegame = 2;
inline bool UserGameLogicInfo::has_freegame() const {
  return this != internal_default_instance() && freegame_ != NULL;
}
inline void UserGameLogicInfo::clear_freegame() {
  if (GetArenaNoVirtual() == NULL && freegame_ != NULL) {
    delete freegame_;
  }
  freegame_ = NULL;
}
inline const ::natashapb::UserGameModInfo& UserGameLogicInfo::freegame() const {
  const ::natashapb::UserGameModInfo* p = freegame_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.freegame)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::UserGameModInfo*>(
      &::natashapb::_UserGameModInfo_default_instance_);
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::release_freegame() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameLogicInfo.freegame)
  
  ::natashapb::UserGameModInfo* temp = freegame_;
  freegame_ = NULL;
  return temp;
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::mutable_freegame() {
  
  if (freegame_ == NULL) {
    freegame_ = ::google::protobuf::Arena::Create< ::natashapb::UserGameModInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameLogicInfo.freegame)
  return freegame_;
}
inline void UserGameLogicInfo::set_allocated_freegame(::natashapb::UserGameModInfo* freegame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete freegame_;
  }
  if (freegame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      freegame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freegame, submessage_arena);
    }
    
  } else {
    
  }
  freegame_ = freegame;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameLogicInfo.freegame)
}

// .natashapb.UserGameModInfo bonus = 3;
inline bool UserGameLogicInfo::has_bonus() const {
  return this != internal_default_instance() && bonus_ != NULL;
}
inline void UserGameLogicInfo::clear_bonus() {
  if (GetArenaNoVirtual() == NULL && bonus_ != NULL) {
    delete bonus_;
  }
  bonus_ = NULL;
}
inline const ::natashapb::UserGameModInfo& UserGameLogicInfo::bonus() const {
  const ::natashapb::UserGameModInfo* p = bonus_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.bonus)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::UserGameModInfo*>(
      &::natashapb::_UserGameModInfo_default_instance_);
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::release_bonus() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameLogicInfo.bonus)
  
  ::natashapb::UserGameModInfo* temp = bonus_;
  bonus_ = NULL;
  return temp;
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::mutable_bonus() {
  
  if (bonus_ == NULL) {
    bonus_ = ::google::protobuf::Arena::Create< ::natashapb::UserGameModInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameLogicInfo.bonus)
  return bonus_;
}
inline void UserGameLogicInfo::set_allocated_bonus(::natashapb::UserGameModInfo* bonus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete bonus_;
  }
  if (bonus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bonus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bonus, submessage_arena);
    }
    
  } else {
    
  }
  bonus_ = bonus;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameLogicInfo.bonus)
}

// .natashapb.UserGameModInfo jackpot = 4;
inline bool UserGameLogicInfo::has_jackpot() const {
  return this != internal_default_instance() && jackpot_ != NULL;
}
inline void UserGameLogicInfo::clear_jackpot() {
  if (GetArenaNoVirtual() == NULL && jackpot_ != NULL) {
    delete jackpot_;
  }
  jackpot_ = NULL;
}
inline const ::natashapb::UserGameModInfo& UserGameLogicInfo::jackpot() const {
  const ::natashapb::UserGameModInfo* p = jackpot_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.jackpot)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::UserGameModInfo*>(
      &::natashapb::_UserGameModInfo_default_instance_);
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::release_jackpot() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameLogicInfo.jackpot)
  
  ::natashapb::UserGameModInfo* temp = jackpot_;
  jackpot_ = NULL;
  return temp;
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::mutable_jackpot() {
  
  if (jackpot_ == NULL) {
    jackpot_ = ::google::protobuf::Arena::Create< ::natashapb::UserGameModInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameLogicInfo.jackpot)
  return jackpot_;
}
inline void UserGameLogicInfo::set_allocated_jackpot(::natashapb::UserGameModInfo* jackpot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete jackpot_;
  }
  if (jackpot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      jackpot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, jackpot, submessage_arena);
    }
    
  } else {
    
  }
  jackpot_ = jackpot;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameLogicInfo.jackpot)
}

// .natashapb.UserGameModInfo commonjackpot = 5;
inline bool UserGameLogicInfo::has_commonjackpot() const {
  return this != internal_default_instance() && commonjackpot_ != NULL;
}
inline void UserGameLogicInfo::clear_commonjackpot() {
  if (GetArenaNoVirtual() == NULL && commonjackpot_ != NULL) {
    delete commonjackpot_;
  }
  commonjackpot_ = NULL;
}
inline const ::natashapb::UserGameModInfo& UserGameLogicInfo::commonjackpot() const {
  const ::natashapb::UserGameModInfo* p = commonjackpot_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.commonjackpot)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::UserGameModInfo*>(
      &::natashapb::_UserGameModInfo_default_instance_);
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::release_commonjackpot() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameLogicInfo.commonjackpot)
  
  ::natashapb::UserGameModInfo* temp = commonjackpot_;
  commonjackpot_ = NULL;
  return temp;
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::mutable_commonjackpot() {
  
  if (commonjackpot_ == NULL) {
    commonjackpot_ = ::google::protobuf::Arena::Create< ::natashapb::UserGameModInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameLogicInfo.commonjackpot)
  return commonjackpot_;
}
inline void UserGameLogicInfo::set_allocated_commonjackpot(::natashapb::UserGameModInfo* commonjackpot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete commonjackpot_;
  }
  if (commonjackpot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      commonjackpot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commonjackpot, submessage_arena);
    }
    
  } else {
    
  }
  commonjackpot_ = commonjackpot;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameLogicInfo.commonjackpot)
}

// .natashapb.UserGameModInfo respin = 6;
inline bool UserGameLogicInfo::has_respin() const {
  return this != internal_default_instance() && respin_ != NULL;
}
inline void UserGameLogicInfo::clear_respin() {
  if (GetArenaNoVirtual() == NULL && respin_ != NULL) {
    delete respin_;
  }
  respin_ = NULL;
}
inline const ::natashapb::UserGameModInfo& UserGameLogicInfo::respin() const {
  const ::natashapb::UserGameModInfo* p = respin_;
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.respin)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::UserGameModInfo*>(
      &::natashapb::_UserGameModInfo_default_instance_);
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::release_respin() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameLogicInfo.respin)
  
  ::natashapb::UserGameModInfo* temp = respin_;
  respin_ = NULL;
  return temp;
}
inline ::natashapb::UserGameModInfo* UserGameLogicInfo::mutable_respin() {
  
  if (respin_ == NULL) {
    respin_ = ::google::protobuf::Arena::Create< ::natashapb::UserGameModInfo >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameLogicInfo.respin)
  return respin_;
}
inline void UserGameLogicInfo::set_allocated_respin(::natashapb::UserGameModInfo* respin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete respin_;
  }
  if (respin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      respin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, respin, submessage_arena);
    }
    
  } else {
    
  }
  respin_ = respin;
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameLogicInfo.respin)
}

// bool isCompleted = 30;
inline void UserGameLogicInfo::clear_iscompleted() {
  iscompleted_ = false;
}
inline bool UserGameLogicInfo::iscompleted() const {
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.isCompleted)
  return iscompleted_;
}
inline void UserGameLogicInfo::set_iscompleted(bool value) {
  
  iscompleted_ = value;
  // @@protoc_insertion_point(field_set:natashapb.UserGameLogicInfo.isCompleted)
}

// int64 curBet = 31;
inline void UserGameLogicInfo::clear_curbet() {
  curbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserGameLogicInfo::curbet() const {
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.curBet)
  return curbet_;
}
inline void UserGameLogicInfo::set_curbet(::google::protobuf::int64 value) {
  
  curbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.UserGameLogicInfo.curBet)
}

// int64 realWin = 32;
inline void UserGameLogicInfo::clear_realwin() {
  realwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 UserGameLogicInfo::realwin() const {
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.realWin)
  return realwin_;
}
inline void UserGameLogicInfo::set_realwin(::google::protobuf::int64 value) {
  
  realwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.UserGameLogicInfo.realWin)
}

// string configName = 50;
inline void UserGameLogicInfo::clear_configname() {
  configname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UserGameLogicInfo::configname() const {
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.configName)
  return configname_.GetNoArena();
}
inline void UserGameLogicInfo::set_configname(const ::std::string& value) {
  
  configname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:natashapb.UserGameLogicInfo.configName)
}
#if LANG_CXX11
inline void UserGameLogicInfo::set_configname(::std::string&& value) {
  
  configname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:natashapb.UserGameLogicInfo.configName)
}
#endif
inline void UserGameLogicInfo::set_configname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  configname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:natashapb.UserGameLogicInfo.configName)
}
inline void UserGameLogicInfo::set_configname(const char* value, size_t size) {
  
  configname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:natashapb.UserGameLogicInfo.configName)
}
inline ::std::string* UserGameLogicInfo::mutable_configname() {
  
  // @@protoc_insertion_point(field_mutable:natashapb.UserGameLogicInfo.configName)
  return configname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UserGameLogicInfo::release_configname() {
  // @@protoc_insertion_point(field_release:natashapb.UserGameLogicInfo.configName)
  
  return configname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UserGameLogicInfo::set_allocated_configname(::std::string* configname) {
  if (configname != NULL) {
    
  } else {
    
  }
  configname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), configname);
  // @@protoc_insertion_point(field_set_allocated:natashapb.UserGameLogicInfo.configName)
}

// .natashapb.GAMEMODTYPE curGameModType = 100;
inline void UserGameLogicInfo::clear_curgamemodtype() {
  curgamemodtype_ = 0;
}
inline ::natashapb::GAMEMODTYPE UserGameLogicInfo::curgamemodtype() const {
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.curGameModType)
  return static_cast< ::natashapb::GAMEMODTYPE >(curgamemodtype_);
}
inline void UserGameLogicInfo::set_curgamemodtype(::natashapb::GAMEMODTYPE value) {
  
  curgamemodtype_ = value;
  // @@protoc_insertion_point(field_set:natashapb.UserGameLogicInfo.curGameModType)
}

// .natashapb.GAMEMODTYPE nextGameModType = 101;
inline void UserGameLogicInfo::clear_nextgamemodtype() {
  nextgamemodtype_ = 0;
}
inline ::natashapb::GAMEMODTYPE UserGameLogicInfo::nextgamemodtype() const {
  // @@protoc_insertion_point(field_get:natashapb.UserGameLogicInfo.nextGameModType)
  return static_cast< ::natashapb::GAMEMODTYPE >(nextgamemodtype_);
}
inline void UserGameLogicInfo::set_nextgamemodtype(::natashapb::GAMEMODTYPE value) {
  
  nextgamemodtype_ = value;
  // @@protoc_insertion_point(field_set:natashapb.UserGameLogicInfo.nextGameModType)
}

// -------------------------------------------------------------------

// GameCtrlSpin

// int64 bet = 1;
inline void GameCtrlSpin::clear_bet() {
  bet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrlSpin::bet() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlSpin.bet)
  return bet_;
}
inline void GameCtrlSpin::set_bet(::google::protobuf::int64 value) {
  
  bet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlSpin.bet)
}

// int32 lines = 2;
inline void GameCtrlSpin::clear_lines() {
  lines_ = 0;
}
inline ::google::protobuf::int32 GameCtrlSpin::lines() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlSpin.lines)
  return lines_;
}
inline void GameCtrlSpin::set_lines(::google::protobuf::int32 value) {
  
  lines_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlSpin.lines)
}

// int32 times = 3;
inline void GameCtrlSpin::clear_times() {
  times_ = 0;
}
inline ::google::protobuf::int32 GameCtrlSpin::times() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlSpin.times)
  return times_;
}
inline void GameCtrlSpin::set_times(::google::protobuf::int32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlSpin.times)
}

// int64 totalBet = 4;
inline void GameCtrlSpin::clear_totalbet() {
  totalbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrlSpin::totalbet() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlSpin.totalBet)
  return totalbet_;
}
inline void GameCtrlSpin::set_totalbet(::google::protobuf::int64 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlSpin.totalBet)
}

// int64 realBet = 5;
inline void GameCtrlSpin::clear_realbet() {
  realbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrlSpin::realbet() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlSpin.realBet)
  return realbet_;
}
inline void GameCtrlSpin::set_realbet(::google::protobuf::int64 value) {
  
  realbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlSpin.realBet)
}

// -------------------------------------------------------------------

// GameCtrlSelectFree

// int32 typeIndex = 1;
inline void GameCtrlSelectFree::clear_typeindex() {
  typeindex_ = 0;
}
inline ::google::protobuf::int32 GameCtrlSelectFree::typeindex() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlSelectFree.typeIndex)
  return typeindex_;
}
inline void GameCtrlSelectFree::set_typeindex(::google::protobuf::int32 value) {
  
  typeindex_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlSelectFree.typeIndex)
}

// -------------------------------------------------------------------

// GameCtrlBonus

// int32 itemIndex = 1;
inline void GameCtrlBonus::clear_itemindex() {
  itemindex_ = 0;
}
inline ::google::protobuf::int32 GameCtrlBonus::itemindex() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlBonus.itemIndex)
  return itemindex_;
}
inline void GameCtrlBonus::set_itemindex(::google::protobuf::int32 value) {
  
  itemindex_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlBonus.itemIndex)
}

// -------------------------------------------------------------------

// GameCtrlJackpot

// int32 itemIndex = 1;
inline void GameCtrlJackpot::clear_itemindex() {
  itemindex_ = 0;
}
inline ::google::protobuf::int32 GameCtrlJackpot::itemindex() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlJackpot.itemIndex)
  return itemindex_;
}
inline void GameCtrlJackpot::set_itemindex(::google::protobuf::int32 value) {
  
  itemindex_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlJackpot.itemIndex)
}

// -------------------------------------------------------------------

// GameCtrlCommonJackpot

// int32 itemIndex = 1;
inline void GameCtrlCommonJackpot::clear_itemindex() {
  itemindex_ = 0;
}
inline ::google::protobuf::int32 GameCtrlCommonJackpot::itemindex() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlCommonJackpot.itemIndex)
  return itemindex_;
}
inline void GameCtrlCommonJackpot::set_itemindex(::google::protobuf::int32 value) {
  
  itemindex_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlCommonJackpot.itemIndex)
}

// -------------------------------------------------------------------

// GameCtrlAwardSpin

// int64 bet = 1;
inline void GameCtrlAwardSpin::clear_bet() {
  bet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrlAwardSpin::bet() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlAwardSpin.bet)
  return bet_;
}
inline void GameCtrlAwardSpin::set_bet(::google::protobuf::int64 value) {
  
  bet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlAwardSpin.bet)
}

// int32 lines = 2;
inline void GameCtrlAwardSpin::clear_lines() {
  lines_ = 0;
}
inline ::google::protobuf::int32 GameCtrlAwardSpin::lines() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlAwardSpin.lines)
  return lines_;
}
inline void GameCtrlAwardSpin::set_lines(::google::protobuf::int32 value) {
  
  lines_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlAwardSpin.lines)
}

// int32 times = 3;
inline void GameCtrlAwardSpin::clear_times() {
  times_ = 0;
}
inline ::google::protobuf::int32 GameCtrlAwardSpin::times() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlAwardSpin.times)
  return times_;
}
inline void GameCtrlAwardSpin::set_times(::google::protobuf::int32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlAwardSpin.times)
}

// int64 totalBet = 4;
inline void GameCtrlAwardSpin::clear_totalbet() {
  totalbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrlAwardSpin::totalbet() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlAwardSpin.totalBet)
  return totalbet_;
}
inline void GameCtrlAwardSpin::set_totalbet(::google::protobuf::int64 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlAwardSpin.totalBet)
}

// -------------------------------------------------------------------

// GameCtrlDebug

// .natashapb.DEBUGSTATE debugState = 1;
inline void GameCtrlDebug::clear_debugstate() {
  debugstate_ = 0;
}
inline ::natashapb::DEBUGSTATE GameCtrlDebug::debugstate() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlDebug.debugState)
  return static_cast< ::natashapb::DEBUGSTATE >(debugstate_);
}
inline void GameCtrlDebug::set_debugstate(::natashapb::DEBUGSTATE value) {
  
  debugstate_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlDebug.debugState)
}

// repeated int64 lstRandom = 2;
inline int GameCtrlDebug::lstrandom_size() const {
  return lstrandom_.size();
}
inline void GameCtrlDebug::clear_lstrandom() {
  lstrandom_.Clear();
}
inline ::google::protobuf::int64 GameCtrlDebug::lstrandom(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrlDebug.lstRandom)
  return lstrandom_.Get(index);
}
inline void GameCtrlDebug::set_lstrandom(int index, ::google::protobuf::int64 value) {
  lstrandom_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.GameCtrlDebug.lstRandom)
}
inline void GameCtrlDebug::add_lstrandom(::google::protobuf::int64 value) {
  lstrandom_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.GameCtrlDebug.lstRandom)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
GameCtrlDebug::lstrandom() const {
  // @@protoc_insertion_point(field_list:natashapb.GameCtrlDebug.lstRandom)
  return lstrandom_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
GameCtrlDebug::mutable_lstrandom() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.GameCtrlDebug.lstRandom)
  return &lstrandom_;
}

// -------------------------------------------------------------------

// GameCtrl

// int64 ctrlID = 1;
inline void GameCtrl::clear_ctrlid() {
  ctrlid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrl::ctrlid() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.ctrlID)
  return ctrlid_;
}
inline void GameCtrl::set_ctrlid(::google::protobuf::int64 value) {
  
  ctrlid_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrl.ctrlID)
}

// int64 realBet = 2;
inline void GameCtrl::clear_realbet() {
  realbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameCtrl::realbet() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.realBet)
  return realbet_;
}
inline void GameCtrl::set_realbet(::google::protobuf::int64 value) {
  
  realbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameCtrl.realBet)
}

// .natashapb.GameCtrlSpin spin = 10;
inline bool GameCtrl::has_spin() const {
  return ctrl_case() == kSpin;
}
inline void GameCtrl::set_has_spin() {
  _oneof_case_[0] = kSpin;
}
inline void GameCtrl::clear_spin() {
  if (has_spin()) {
    delete ctrl_.spin_;
    clear_has_ctrl();
  }
}
inline ::natashapb::GameCtrlSpin* GameCtrl::release_spin() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.spin)
  if (has_spin()) {
    clear_has_ctrl();
      ::natashapb::GameCtrlSpin* temp = ctrl_.spin_;
    ctrl_.spin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::GameCtrlSpin& GameCtrl::spin() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.spin)
  return has_spin()
      ? *ctrl_.spin_
      : *reinterpret_cast< ::natashapb::GameCtrlSpin*>(&::natashapb::_GameCtrlSpin_default_instance_);
}
inline ::natashapb::GameCtrlSpin* GameCtrl::mutable_spin() {
  if (!has_spin()) {
    clear_ctrl();
    set_has_spin();
    ctrl_.spin_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlSpin >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.spin)
  return ctrl_.spin_;
}

// .natashapb.GameCtrlSelectFree selectFree = 11;
inline bool GameCtrl::has_selectfree() const {
  return ctrl_case() == kSelectFree;
}
inline void GameCtrl::set_has_selectfree() {
  _oneof_case_[0] = kSelectFree;
}
inline void GameCtrl::clear_selectfree() {
  if (has_selectfree()) {
    delete ctrl_.selectfree_;
    clear_has_ctrl();
  }
}
inline ::natashapb::GameCtrlSelectFree* GameCtrl::release_selectfree() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.selectFree)
  if (has_selectfree()) {
    clear_has_ctrl();
      ::natashapb::GameCtrlSelectFree* temp = ctrl_.selectfree_;
    ctrl_.selectfree_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::GameCtrlSelectFree& GameCtrl::selectfree() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.selectFree)
  return has_selectfree()
      ? *ctrl_.selectfree_
      : *reinterpret_cast< ::natashapb::GameCtrlSelectFree*>(&::natashapb::_GameCtrlSelectFree_default_instance_);
}
inline ::natashapb::GameCtrlSelectFree* GameCtrl::mutable_selectfree() {
  if (!has_selectfree()) {
    clear_ctrl();
    set_has_selectfree();
    ctrl_.selectfree_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlSelectFree >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.selectFree)
  return ctrl_.selectfree_;
}

// .natashapb.GameCtrlSpin freeSpin = 12;
inline bool GameCtrl::has_freespin() const {
  return ctrl_case() == kFreeSpin;
}
inline void GameCtrl::set_has_freespin() {
  _oneof_case_[0] = kFreeSpin;
}
inline void GameCtrl::clear_freespin() {
  if (has_freespin()) {
    delete ctrl_.freespin_;
    clear_has_ctrl();
  }
}
inline ::natashapb::GameCtrlSpin* GameCtrl::release_freespin() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.freeSpin)
  if (has_freespin()) {
    clear_has_ctrl();
      ::natashapb::GameCtrlSpin* temp = ctrl_.freespin_;
    ctrl_.freespin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::GameCtrlSpin& GameCtrl::freespin() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.freeSpin)
  return has_freespin()
      ? *ctrl_.freespin_
      : *reinterpret_cast< ::natashapb::GameCtrlSpin*>(&::natashapb::_GameCtrlSpin_default_instance_);
}
inline ::natashapb::GameCtrlSpin* GameCtrl::mutable_freespin() {
  if (!has_freespin()) {
    clear_ctrl();
    set_has_freespin();
    ctrl_.freespin_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlSpin >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.freeSpin)
  return ctrl_.freespin_;
}

// .natashapb.GameCtrlBonus bonus = 13;
inline bool GameCtrl::has_bonus() const {
  return ctrl_case() == kBonus;
}
inline void GameCtrl::set_has_bonus() {
  _oneof_case_[0] = kBonus;
}
inline void GameCtrl::clear_bonus() {
  if (has_bonus()) {
    delete ctrl_.bonus_;
    clear_has_ctrl();
  }
}
inline ::natashapb::GameCtrlBonus* GameCtrl::release_bonus() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.bonus)
  if (has_bonus()) {
    clear_has_ctrl();
      ::natashapb::GameCtrlBonus* temp = ctrl_.bonus_;
    ctrl_.bonus_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::GameCtrlBonus& GameCtrl::bonus() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.bonus)
  return has_bonus()
      ? *ctrl_.bonus_
      : *reinterpret_cast< ::natashapb::GameCtrlBonus*>(&::natashapb::_GameCtrlBonus_default_instance_);
}
inline ::natashapb::GameCtrlBonus* GameCtrl::mutable_bonus() {
  if (!has_bonus()) {
    clear_ctrl();
    set_has_bonus();
    ctrl_.bonus_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlBonus >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.bonus)
  return ctrl_.bonus_;
}

// .natashapb.GameCtrlJackpot jackpot = 14;
inline bool GameCtrl::has_jackpot() const {
  return ctrl_case() == kJackpot;
}
inline void GameCtrl::set_has_jackpot() {
  _oneof_case_[0] = kJackpot;
}
inline void GameCtrl::clear_jackpot() {
  if (has_jackpot()) {
    delete ctrl_.jackpot_;
    clear_has_ctrl();
  }
}
inline ::natashapb::GameCtrlJackpot* GameCtrl::release_jackpot() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.jackpot)
  if (has_jackpot()) {
    clear_has_ctrl();
      ::natashapb::GameCtrlJackpot* temp = ctrl_.jackpot_;
    ctrl_.jackpot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::GameCtrlJackpot& GameCtrl::jackpot() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.jackpot)
  return has_jackpot()
      ? *ctrl_.jackpot_
      : *reinterpret_cast< ::natashapb::GameCtrlJackpot*>(&::natashapb::_GameCtrlJackpot_default_instance_);
}
inline ::natashapb::GameCtrlJackpot* GameCtrl::mutable_jackpot() {
  if (!has_jackpot()) {
    clear_ctrl();
    set_has_jackpot();
    ctrl_.jackpot_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlJackpot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.jackpot)
  return ctrl_.jackpot_;
}

// .natashapb.GameCtrlCommonJackpot commonJackpot = 15;
inline bool GameCtrl::has_commonjackpot() const {
  return ctrl_case() == kCommonJackpot;
}
inline void GameCtrl::set_has_commonjackpot() {
  _oneof_case_[0] = kCommonJackpot;
}
inline void GameCtrl::clear_commonjackpot() {
  if (has_commonjackpot()) {
    delete ctrl_.commonjackpot_;
    clear_has_ctrl();
  }
}
inline ::natashapb::GameCtrlCommonJackpot* GameCtrl::release_commonjackpot() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.commonJackpot)
  if (has_commonjackpot()) {
    clear_has_ctrl();
      ::natashapb::GameCtrlCommonJackpot* temp = ctrl_.commonjackpot_;
    ctrl_.commonjackpot_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::GameCtrlCommonJackpot& GameCtrl::commonjackpot() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.commonJackpot)
  return has_commonjackpot()
      ? *ctrl_.commonjackpot_
      : *reinterpret_cast< ::natashapb::GameCtrlCommonJackpot*>(&::natashapb::_GameCtrlCommonJackpot_default_instance_);
}
inline ::natashapb::GameCtrlCommonJackpot* GameCtrl::mutable_commonjackpot() {
  if (!has_commonjackpot()) {
    clear_ctrl();
    set_has_commonjackpot();
    ctrl_.commonjackpot_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlCommonJackpot >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.commonJackpot)
  return ctrl_.commonjackpot_;
}

// .natashapb.GameCtrlAwardSpin awardSpin = 16;
inline bool GameCtrl::has_awardspin() const {
  return ctrl_case() == kAwardSpin;
}
inline void GameCtrl::set_has_awardspin() {
  _oneof_case_[0] = kAwardSpin;
}
inline void GameCtrl::clear_awardspin() {
  if (has_awardspin()) {
    delete ctrl_.awardspin_;
    clear_has_ctrl();
  }
}
inline ::natashapb::GameCtrlAwardSpin* GameCtrl::release_awardspin() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.awardSpin)
  if (has_awardspin()) {
    clear_has_ctrl();
      ::natashapb::GameCtrlAwardSpin* temp = ctrl_.awardspin_;
    ctrl_.awardspin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::GameCtrlAwardSpin& GameCtrl::awardspin() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.awardSpin)
  return has_awardspin()
      ? *ctrl_.awardspin_
      : *reinterpret_cast< ::natashapb::GameCtrlAwardSpin*>(&::natashapb::_GameCtrlAwardSpin_default_instance_);
}
inline ::natashapb::GameCtrlAwardSpin* GameCtrl::mutable_awardspin() {
  if (!has_awardspin()) {
    clear_ctrl();
    set_has_awardspin();
    ctrl_.awardspin_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlAwardSpin >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.awardSpin)
  return ctrl_.awardspin_;
}

// .natashapb.GameCtrlSpin respin = 17;
inline bool GameCtrl::has_respin() const {
  return ctrl_case() == kRespin;
}
inline void GameCtrl::set_has_respin() {
  _oneof_case_[0] = kRespin;
}
inline void GameCtrl::clear_respin() {
  if (has_respin()) {
    delete ctrl_.respin_;
    clear_has_ctrl();
  }
}
inline ::natashapb::GameCtrlSpin* GameCtrl::release_respin() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.respin)
  if (has_respin()) {
    clear_has_ctrl();
      ::natashapb::GameCtrlSpin* temp = ctrl_.respin_;
    ctrl_.respin_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::GameCtrlSpin& GameCtrl::respin() const {
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.respin)
  return has_respin()
      ? *ctrl_.respin_
      : *reinterpret_cast< ::natashapb::GameCtrlSpin*>(&::natashapb::_GameCtrlSpin_default_instance_);
}
inline ::natashapb::GameCtrlSpin* GameCtrl::mutable_respin() {
  if (!has_respin()) {
    clear_ctrl();
    set_has_respin();
    ctrl_.respin_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlSpin >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.respin)
  return ctrl_.respin_;
}

// .natashapb.GameCtrlDebug debug = 100;
inline bool GameCtrl::has_debug() const {
  return this != internal_default_instance() && debug_ != NULL;
}
inline void GameCtrl::clear_debug() {
  if (GetArenaNoVirtual() == NULL && debug_ != NULL) {
    delete debug_;
  }
  debug_ = NULL;
}
inline const ::natashapb::GameCtrlDebug& GameCtrl::debug() const {
  const ::natashapb::GameCtrlDebug* p = debug_;
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.debug)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::GameCtrlDebug*>(
      &::natashapb::_GameCtrlDebug_default_instance_);
}
inline ::natashapb::GameCtrlDebug* GameCtrl::release_debug() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.debug)
  
  ::natashapb::GameCtrlDebug* temp = debug_;
  debug_ = NULL;
  return temp;
}
inline ::natashapb::GameCtrlDebug* GameCtrl::mutable_debug() {
  
  if (debug_ == NULL) {
    debug_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlDebug >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.debug)
  return debug_;
}
inline void GameCtrl::set_allocated_debug(::natashapb::GameCtrlDebug* debug) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete debug_;
  }
  if (debug) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      debug = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, debug, submessage_arena);
    }
    
  } else {
    
  }
  debug_ = debug;
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.debug)
}

// .google.protobuf.Any exDat = 1000;
inline bool GameCtrl::has_exdat() const {
  return this != internal_default_instance() && exdat_ != NULL;
}
inline const ::google::protobuf::Any& GameCtrl::exdat() const {
  const ::google::protobuf::Any* p = exdat_;
  // @@protoc_insertion_point(field_get:natashapb.GameCtrl.exDat)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* GameCtrl::release_exdat() {
  // @@protoc_insertion_point(field_release:natashapb.GameCtrl.exDat)
  
  ::google::protobuf::Any* temp = exdat_;
  exdat_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* GameCtrl::mutable_exdat() {
  
  if (exdat_ == NULL) {
    exdat_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.GameCtrl.exDat)
  return exdat_;
}
inline void GameCtrl::set_allocated_exdat(::google::protobuf::Any* exdat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exdat_);
  }
  if (exdat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exdat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exdat, submessage_arena);
    }
    
  } else {
    
  }
  exdat_ = exdat;
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.exDat)
}

inline bool GameCtrl::has_ctrl() const {
  return ctrl_case() != CTRL_NOT_SET;
}
inline void GameCtrl::clear_has_ctrl() {
  _oneof_case_[0] = CTRL_NOT_SET;
}
inline GameCtrl::CtrlCase GameCtrl::ctrl_case() const {
  return GameCtrl::CtrlCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// StartFreeGame

// int64 bet = 1;
inline void StartFreeGame::clear_bet() {
  bet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StartFreeGame::bet() const {
  // @@protoc_insertion_point(field_get:natashapb.StartFreeGame.bet)
  return bet_;
}
inline void StartFreeGame::set_bet(::google::protobuf::int64 value) {
  
  bet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.StartFreeGame.bet)
}

// int32 lines = 2;
inline void StartFreeGame::clear_lines() {
  lines_ = 0;
}
inline ::google::protobuf::int32 StartFreeGame::lines() const {
  // @@protoc_insertion_point(field_get:natashapb.StartFreeGame.lines)
  return lines_;
}
inline void StartFreeGame::set_lines(::google::protobuf::int32 value) {
  
  lines_ = value;
  // @@protoc_insertion_point(field_set:natashapb.StartFreeGame.lines)
}

// int32 times = 3;
inline void StartFreeGame::clear_times() {
  times_ = 0;
}
inline ::google::protobuf::int32 StartFreeGame::times() const {
  // @@protoc_insertion_point(field_get:natashapb.StartFreeGame.times)
  return times_;
}
inline void StartFreeGame::set_times(::google::protobuf::int32 value) {
  
  times_ = value;
  // @@protoc_insertion_point(field_set:natashapb.StartFreeGame.times)
}

// int32 freeNums = 4;
inline void StartFreeGame::clear_freenums() {
  freenums_ = 0;
}
inline ::google::protobuf::int32 StartFreeGame::freenums() const {
  // @@protoc_insertion_point(field_get:natashapb.StartFreeGame.freeNums)
  return freenums_;
}
inline void StartFreeGame::set_freenums(::google::protobuf::int32 value) {
  
  freenums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.StartFreeGame.freeNums)
}

// int64 avgBet = 5;
inline void StartFreeGame::clear_avgbet() {
  avgbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 StartFreeGame::avgbet() const {
  // @@protoc_insertion_point(field_get:natashapb.StartFreeGame.avgBet)
  return avgbet_;
}
inline void StartFreeGame::set_avgbet(::google::protobuf::int64 value) {
  
  avgbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.StartFreeGame.avgBet)
}

// -------------------------------------------------------------------

// StartGameMod

// .natashapb.StartFreeGame freegame = 1;
inline bool StartGameMod::has_freegame() const {
  return startParams_case() == kFreegame;
}
inline void StartGameMod::set_has_freegame() {
  _oneof_case_[0] = kFreegame;
}
inline void StartGameMod::clear_freegame() {
  if (has_freegame()) {
    delete startParams_.freegame_;
    clear_has_startParams();
  }
}
inline ::natashapb::StartFreeGame* StartGameMod::release_freegame() {
  // @@protoc_insertion_point(field_release:natashapb.StartGameMod.freegame)
  if (has_freegame()) {
    clear_has_startParams();
      ::natashapb::StartFreeGame* temp = startParams_.freegame_;
    startParams_.freegame_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::natashapb::StartFreeGame& StartGameMod::freegame() const {
  // @@protoc_insertion_point(field_get:natashapb.StartGameMod.freegame)
  return has_freegame()
      ? *startParams_.freegame_
      : *reinterpret_cast< ::natashapb::StartFreeGame*>(&::natashapb::_StartFreeGame_default_instance_);
}
inline ::natashapb::StartFreeGame* StartGameMod::mutable_freegame() {
  if (!has_freegame()) {
    clear_startParams();
    set_has_freegame();
    startParams_.freegame_ = ::google::protobuf::Arena::Create< ::natashapb::StartFreeGame >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.StartGameMod.freegame)
  return startParams_.freegame_;
}

// .natashapb.GameCtrlID parentCtrlID = 100;
inline bool StartGameMod::has_parentctrlid() const {
  return this != internal_default_instance() && parentctrlid_ != NULL;
}
inline void StartGameMod::clear_parentctrlid() {
  if (GetArenaNoVirtual() == NULL && parentctrlid_ != NULL) {
    delete parentctrlid_;
  }
  parentctrlid_ = NULL;
}
inline const ::natashapb::GameCtrlID& StartGameMod::parentctrlid() const {
  const ::natashapb::GameCtrlID* p = parentctrlid_;
  // @@protoc_insertion_point(field_get:natashapb.StartGameMod.parentCtrlID)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::GameCtrlID*>(
      &::natashapb::_GameCtrlID_default_instance_);
}
inline ::natashapb::GameCtrlID* StartGameMod::release_parentctrlid() {
  // @@protoc_insertion_point(field_release:natashapb.StartGameMod.parentCtrlID)
  
  ::natashapb::GameCtrlID* temp = parentctrlid_;
  parentctrlid_ = NULL;
  return temp;
}
inline ::natashapb::GameCtrlID* StartGameMod::mutable_parentctrlid() {
  
  if (parentctrlid_ == NULL) {
    parentctrlid_ = ::google::protobuf::Arena::Create< ::natashapb::GameCtrlID >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.StartGameMod.parentCtrlID)
  return parentctrlid_;
}
inline void StartGameMod::set_allocated_parentctrlid(::natashapb::GameCtrlID* parentctrlid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete parentctrlid_;
  }
  if (parentctrlid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      parentctrlid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, parentctrlid, submessage_arena);
    }
    
  } else {
    
  }
  parentctrlid_ = parentctrlid;
  // @@protoc_insertion_point(field_set_allocated:natashapb.StartGameMod.parentCtrlID)
}

// .google.protobuf.Any exDat = 1000;
inline bool StartGameMod::has_exdat() const {
  return this != internal_default_instance() && exdat_ != NULL;
}
inline const ::google::protobuf::Any& StartGameMod::exdat() const {
  const ::google::protobuf::Any* p = exdat_;
  // @@protoc_insertion_point(field_get:natashapb.StartGameMod.exDat)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* StartGameMod::release_exdat() {
  // @@protoc_insertion_point(field_release:natashapb.StartGameMod.exDat)
  
  ::google::protobuf::Any* temp = exdat_;
  exdat_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* StartGameMod::mutable_exdat() {
  
  if (exdat_ == NULL) {
    exdat_ = ::google::protobuf::Arena::Create< ::google::protobuf::Any >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.StartGameMod.exDat)
  return exdat_;
}
inline void StartGameMod::set_allocated_exdat(::google::protobuf::Any* exdat) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(exdat_);
  }
  if (exdat) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      exdat = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, exdat, submessage_arena);
    }
    
  } else {
    
  }
  exdat_ = exdat;
  // @@protoc_insertion_point(field_set_allocated:natashapb.StartGameMod.exDat)
}

inline bool StartGameMod::has_startParams() const {
  return startParams_case() != STARTPARAMS_NOT_SET;
}
inline void StartGameMod::clear_has_startParams() {
  _oneof_case_[0] = STARTPARAMS_NOT_SET;
}
inline StartGameMod::StartParamsCase StartGameMod::startParams_case() const {
  return StartGameMod::StartParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SymbolRTP

// int64 totalWin = 1;
inline void SymbolRTP::clear_totalwin() {
  totalwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SymbolRTP::totalwin() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolRTP.totalWin)
  return totalwin_;
}
inline void SymbolRTP::set_totalwin(::google::protobuf::int64 value) {
  
  totalwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolRTP.totalWin)
}

// int64 winNums = 2;
inline void SymbolRTP::clear_winnums() {
  winnums_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SymbolRTP::winnums() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolRTP.winNums)
  return winnums_;
}
inline void SymbolRTP::set_winnums(::google::protobuf::int64 value) {
  
  winnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolRTP.winNums)
}

// int64 realWin = 3;
inline void SymbolRTP::clear_realwin() {
  realwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SymbolRTP::realwin() const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolRTP.realWin)
  return realwin_;
}
inline void SymbolRTP::set_realwin(::google::protobuf::int64 value) {
  
  realwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.SymbolRTP.realWin)
}

// -------------------------------------------------------------------

// SymbolRTPList

// repeated .natashapb.SymbolRTP lst = 1;
inline int SymbolRTPList::lst_size() const {
  return lst_.size();
}
inline void SymbolRTPList::clear_lst() {
  lst_.Clear();
}
inline ::natashapb::SymbolRTP* SymbolRTPList::mutable_lst(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.SymbolRTPList.lst)
  return lst_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTP >*
SymbolRTPList::mutable_lst() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.SymbolRTPList.lst)
  return &lst_;
}
inline const ::natashapb::SymbolRTP& SymbolRTPList::lst(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.SymbolRTPList.lst)
  return lst_.Get(index);
}
inline ::natashapb::SymbolRTP* SymbolRTPList::add_lst() {
  // @@protoc_insertion_point(field_add:natashapb.SymbolRTPList.lst)
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTP >&
SymbolRTPList::lst() const {
  // @@protoc_insertion_point(field_list:natashapb.SymbolRTPList.lst)
  return lst_;
}

// -------------------------------------------------------------------

// BonusRTP

// int64 totalWin = 1;
inline void BonusRTP::clear_totalwin() {
  totalwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BonusRTP::totalwin() const {
  // @@protoc_insertion_point(field_get:natashapb.BonusRTP.totalWin)
  return totalwin_;
}
inline void BonusRTP::set_totalwin(::google::protobuf::int64 value) {
  
  totalwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BonusRTP.totalWin)
}

// int64 winNums = 2;
inline void BonusRTP::clear_winnums() {
  winnums_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BonusRTP::winnums() const {
  // @@protoc_insertion_point(field_get:natashapb.BonusRTP.winNums)
  return winnums_;
}
inline void BonusRTP::set_winnums(::google::protobuf::int64 value) {
  
  winnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BonusRTP.winNums)
}

// int64 realWin = 3;
inline void BonusRTP::clear_realwin() {
  realwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BonusRTP::realwin() const {
  // @@protoc_insertion_point(field_get:natashapb.BonusRTP.realWin)
  return realwin_;
}
inline void BonusRTP::set_realwin(::google::protobuf::int64 value) {
  
  realwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.BonusRTP.realWin)
}

// -------------------------------------------------------------------

// BonusRTPList

// repeated .natashapb.BonusRTP lst = 1;
inline int BonusRTPList::lst_size() const {
  return lst_.size();
}
inline void BonusRTPList::clear_lst() {
  lst_.Clear();
}
inline ::natashapb::BonusRTP* BonusRTPList::mutable_lst(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.BonusRTPList.lst)
  return lst_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::BonusRTP >*
BonusRTPList::mutable_lst() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.BonusRTPList.lst)
  return &lst_;
}
inline const ::natashapb::BonusRTP& BonusRTPList::lst(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.BonusRTPList.lst)
  return lst_.Get(index);
}
inline ::natashapb::BonusRTP* BonusRTPList::add_lst() {
  // @@protoc_insertion_point(field_add:natashapb.BonusRTPList.lst)
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::BonusRTP >&
BonusRTPList::lst() const {
  // @@protoc_insertion_point(field_list:natashapb.BonusRTPList.lst)
  return lst_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GameModuleRTP

// int64 totalBet = 1;
inline void GameModuleRTP::clear_totalbet() {
  totalbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameModuleRTP::totalbet() const {
  // @@protoc_insertion_point(field_get:natashapb.GameModuleRTP.totalBet)
  return totalbet_;
}
inline void GameModuleRTP::set_totalbet(::google::protobuf::int64 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameModuleRTP.totalBet)
}

// int64 totalWin = 2;
inline void GameModuleRTP::clear_totalwin() {
  totalwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameModuleRTP::totalwin() const {
  // @@protoc_insertion_point(field_get:natashapb.GameModuleRTP.totalWin)
  return totalwin_;
}
inline void GameModuleRTP::set_totalwin(::google::protobuf::int64 value) {
  
  totalwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameModuleRTP.totalWin)
}

// int64 spinNums = 3;
inline void GameModuleRTP::clear_spinnums() {
  spinnums_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameModuleRTP::spinnums() const {
  // @@protoc_insertion_point(field_get:natashapb.GameModuleRTP.spinNums)
  return spinnums_;
}
inline void GameModuleRTP::set_spinnums(::google::protobuf::int64 value) {
  
  spinnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameModuleRTP.spinNums)
}

// int64 winNums = 4;
inline void GameModuleRTP::clear_winnums() {
  winnums_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameModuleRTP::winnums() const {
  // @@protoc_insertion_point(field_get:natashapb.GameModuleRTP.winNums)
  return winnums_;
}
inline void GameModuleRTP::set_winnums(::google::protobuf::int64 value) {
  
  winnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameModuleRTP.winNums)
}

// int64 inNums = 5;
inline void GameModuleRTP::clear_innums() {
  innums_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GameModuleRTP::innums() const {
  // @@protoc_insertion_point(field_get:natashapb.GameModuleRTP.inNums)
  return innums_;
}
inline void GameModuleRTP::set_innums(::google::protobuf::int64 value) {
  
  innums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.GameModuleRTP.inNums)
}

// repeated .natashapb.SymbolRTPList symbols = 100;
inline int GameModuleRTP::symbols_size() const {
  return symbols_.size();
}
inline void GameModuleRTP::clear_symbols() {
  symbols_.Clear();
}
inline ::natashapb::SymbolRTPList* GameModuleRTP::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.GameModuleRTP.symbols)
  return symbols_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTPList >*
GameModuleRTP::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.GameModuleRTP.symbols)
  return &symbols_;
}
inline const ::natashapb::SymbolRTPList& GameModuleRTP::symbols(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.GameModuleRTP.symbols)
  return symbols_.Get(index);
}
inline ::natashapb::SymbolRTPList* GameModuleRTP::add_symbols() {
  // @@protoc_insertion_point(field_add:natashapb.GameModuleRTP.symbols)
  return symbols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::SymbolRTPList >&
GameModuleRTP::symbols() const {
  // @@protoc_insertion_point(field_list:natashapb.GameModuleRTP.symbols)
  return symbols_;
}

// map<string, .natashapb.BonusRTPList> bonus = 101;
inline int GameModuleRTP::bonus_size() const {
  return bonus_.size();
}
inline void GameModuleRTP::clear_bonus() {
  bonus_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >&
GameModuleRTP::bonus() const {
  // @@protoc_insertion_point(field_map:natashapb.GameModuleRTP.bonus)
  return bonus_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >*
GameModuleRTP::mutable_bonus() {
  // @@protoc_insertion_point(field_mutable_map:natashapb.GameModuleRTP.bonus)
  return bonus_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RTP

// int64 totalBet = 1;
inline void RTP::clear_totalbet() {
  totalbet_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RTP::totalbet() const {
  // @@protoc_insertion_point(field_get:natashapb.RTP.totalBet)
  return totalbet_;
}
inline void RTP::set_totalbet(::google::protobuf::int64 value) {
  
  totalbet_ = value;
  // @@protoc_insertion_point(field_set:natashapb.RTP.totalBet)
}

// int64 totalWin = 2;
inline void RTP::clear_totalwin() {
  totalwin_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RTP::totalwin() const {
  // @@protoc_insertion_point(field_get:natashapb.RTP.totalWin)
  return totalwin_;
}
inline void RTP::set_totalwin(::google::protobuf::int64 value) {
  
  totalwin_ = value;
  // @@protoc_insertion_point(field_set:natashapb.RTP.totalWin)
}

// int64 spinNums = 3;
inline void RTP::clear_spinnums() {
  spinnums_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 RTP::spinnums() const {
  // @@protoc_insertion_point(field_get:natashapb.RTP.spinNums)
  return spinnums_;
}
inline void RTP::set_spinnums(::google::protobuf::int64 value) {
  
  spinnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.RTP.spinNums)
}

// map<string, .natashapb.GameModuleRTP> gameModules = 100;
inline int RTP::gamemodules_size() const {
  return gamemodules_.size();
}
inline void RTP::clear_gamemodules() {
  gamemodules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >&
RTP::gamemodules() const {
  // @@protoc_insertion_point(field_map:natashapb.RTP.gameModules)
  return gamemodules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >*
RTP::mutable_gamemodules() {
  // @@protoc_insertion_point(field_mutable_map:natashapb.RTP.gameModules)
  return gamemodules_.MutableMap();
}

// -------------------------------------------------------------------

// NormalReelstriptConfig

// string filename = 1;
inline void NormalReelstriptConfig::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NormalReelstriptConfig::filename() const {
  // @@protoc_insertion_point(field_get:natashapb.NormalReelstriptConfig.filename)
  return filename_.GetNoArena();
}
inline void NormalReelstriptConfig::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:natashapb.NormalReelstriptConfig.filename)
}
#if LANG_CXX11
inline void NormalReelstriptConfig::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:natashapb.NormalReelstriptConfig.filename)
}
#endif
inline void NormalReelstriptConfig::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:natashapb.NormalReelstriptConfig.filename)
}
inline void NormalReelstriptConfig::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:natashapb.NormalReelstriptConfig.filename)
}
inline ::std::string* NormalReelstriptConfig::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:natashapb.NormalReelstriptConfig.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NormalReelstriptConfig::release_filename() {
  // @@protoc_insertion_point(field_release:natashapb.NormalReelstriptConfig.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NormalReelstriptConfig::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:natashapb.NormalReelstriptConfig.filename)
}

// -------------------------------------------------------------------

// StaticSymbols

// repeated int32 symbols = 1;
inline int StaticSymbols::symbols_size() const {
  return symbols_.size();
}
inline void StaticSymbols::clear_symbols() {
  symbols_.Clear();
}
inline ::google::protobuf::int32 StaticSymbols::symbols(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.StaticSymbols.symbols)
  return symbols_.Get(index);
}
inline void StaticSymbols::set_symbols(int index, ::google::protobuf::int32 value) {
  symbols_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.StaticSymbols.symbols)
}
inline void StaticSymbols::add_symbols(::google::protobuf::int32 value) {
  symbols_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.StaticSymbols.symbols)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StaticSymbols::symbols() const {
  // @@protoc_insertion_point(field_list:natashapb.StaticSymbols.symbols)
  return symbols_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StaticSymbols::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.StaticSymbols.symbols)
  return &symbols_;
}

// -------------------------------------------------------------------

// StaticCascadingReels

// repeated .natashapb.StaticSymbols scenarios = 1;
inline int StaticCascadingReels::scenarios_size() const {
  return scenarios_.size();
}
inline void StaticCascadingReels::clear_scenarios() {
  scenarios_.Clear();
}
inline ::natashapb::StaticSymbols* StaticCascadingReels::mutable_scenarios(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.StaticCascadingReels.scenarios)
  return scenarios_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::StaticSymbols >*
StaticCascadingReels::mutable_scenarios() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.StaticCascadingReels.scenarios)
  return &scenarios_;
}
inline const ::natashapb::StaticSymbols& StaticCascadingReels::scenarios(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.StaticCascadingReels.scenarios)
  return scenarios_.Get(index);
}
inline ::natashapb::StaticSymbols* StaticCascadingReels::add_scenarios() {
  // @@protoc_insertion_point(field_add:natashapb.StaticCascadingReels.scenarios)
  return scenarios_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::StaticSymbols >&
StaticCascadingReels::scenarios() const {
  // @@protoc_insertion_point(field_list:natashapb.StaticCascadingReels.scenarios)
  return scenarios_;
}

// repeated int32 weights = 2;
inline int StaticCascadingReels::weights_size() const {
  return weights_.size();
}
inline void StaticCascadingReels::clear_weights() {
  weights_.Clear();
}
inline ::google::protobuf::int32 StaticCascadingReels::weights(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.StaticCascadingReels.weights)
  return weights_.Get(index);
}
inline void StaticCascadingReels::set_weights(int index, ::google::protobuf::int32 value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.StaticCascadingReels.weights)
}
inline void StaticCascadingReels::add_weights(::google::protobuf::int32 value) {
  weights_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.StaticCascadingReels.weights)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StaticCascadingReels::weights() const {
  // @@protoc_insertion_point(field_list:natashapb.StaticCascadingReels.weights)
  return weights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StaticCascadingReels::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.StaticCascadingReels.weights)
  return &weights_;
}

// -------------------------------------------------------------------

// ReelstriptConfig

// .natashapb.NormalReelstriptConfig normal = 1;
inline bool ReelstriptConfig::has_normal() const {
  return this != internal_default_instance() && normal_ != NULL;
}
inline void ReelstriptConfig::clear_normal() {
  if (GetArenaNoVirtual() == NULL && normal_ != NULL) {
    delete normal_;
  }
  normal_ = NULL;
}
inline const ::natashapb::NormalReelstriptConfig& ReelstriptConfig::normal() const {
  const ::natashapb::NormalReelstriptConfig* p = normal_;
  // @@protoc_insertion_point(field_get:natashapb.ReelstriptConfig.normal)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::NormalReelstriptConfig*>(
      &::natashapb::_NormalReelstriptConfig_default_instance_);
}
inline ::natashapb::NormalReelstriptConfig* ReelstriptConfig::release_normal() {
  // @@protoc_insertion_point(field_release:natashapb.ReelstriptConfig.normal)
  
  ::natashapb::NormalReelstriptConfig* temp = normal_;
  normal_ = NULL;
  return temp;
}
inline ::natashapb::NormalReelstriptConfig* ReelstriptConfig::mutable_normal() {
  
  if (normal_ == NULL) {
    normal_ = ::google::protobuf::Arena::Create< ::natashapb::NormalReelstriptConfig >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.ReelstriptConfig.normal)
  return normal_;
}
inline void ReelstriptConfig::set_allocated_normal(::natashapb::NormalReelstriptConfig* normal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete normal_;
  }
  if (normal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      normal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, normal, submessage_arena);
    }
    
  } else {
    
  }
  normal_ = normal;
  // @@protoc_insertion_point(field_set_allocated:natashapb.ReelstriptConfig.normal)
}

// .natashapb.StaticCascadingReels static = 2;
inline bool ReelstriptConfig::has_static_() const {
  return this != internal_default_instance() && static__ != NULL;
}
inline void ReelstriptConfig::clear_static_() {
  if (GetArenaNoVirtual() == NULL && static__ != NULL) {
    delete static__;
  }
  static__ = NULL;
}
inline const ::natashapb::StaticCascadingReels& ReelstriptConfig::static_() const {
  const ::natashapb::StaticCascadingReels* p = static__;
  // @@protoc_insertion_point(field_get:natashapb.ReelstriptConfig.static)
  return p != NULL ? *p : *reinterpret_cast<const ::natashapb::StaticCascadingReels*>(
      &::natashapb::_StaticCascadingReels_default_instance_);
}
inline ::natashapb::StaticCascadingReels* ReelstriptConfig::release_static_() {
  // @@protoc_insertion_point(field_release:natashapb.ReelstriptConfig.static)
  
  ::natashapb::StaticCascadingReels* temp = static__;
  static__ = NULL;
  return temp;
}
inline ::natashapb::StaticCascadingReels* ReelstriptConfig::mutable_static_() {
  
  if (static__ == NULL) {
    static__ = ::google::protobuf::Arena::Create< ::natashapb::StaticCascadingReels >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:natashapb.ReelstriptConfig.static)
  return static__;
}
inline void ReelstriptConfig::set_allocated_static_(::natashapb::StaticCascadingReels* static_) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete static__;
  }
  if (static_) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      static_ = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, static_, submessage_arena);
    }
    
  } else {
    
  }
  static__ = static_;
  // @@protoc_insertion_point(field_set_allocated:natashapb.ReelstriptConfig.static)
}

// -------------------------------------------------------------------

// WeightConfig

// repeated int32 weights = 1;
inline int WeightConfig::weights_size() const {
  return weights_.size();
}
inline void WeightConfig::clear_weights() {
  weights_.Clear();
}
inline ::google::protobuf::int32 WeightConfig::weights(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.WeightConfig.weights)
  return weights_.Get(index);
}
inline void WeightConfig::set_weights(int index, ::google::protobuf::int32 value) {
  weights_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.WeightConfig.weights)
}
inline void WeightConfig::add_weights(::google::protobuf::int32 value) {
  weights_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.WeightConfig.weights)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
WeightConfig::weights() const {
  // @@protoc_insertion_point(field_list:natashapb.WeightConfig.weights)
  return weights_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
WeightConfig::mutable_weights() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.WeightConfig.weights)
  return &weights_;
}

// int32 totalWeight = 2;
inline void WeightConfig::clear_totalweight() {
  totalweight_ = 0;
}
inline ::google::protobuf::int32 WeightConfig::totalweight() const {
  // @@protoc_insertion_point(field_get:natashapb.WeightConfig.totalWeight)
  return totalweight_;
}
inline void WeightConfig::set_totalweight(::google::protobuf::int32 value) {
  
  totalweight_ = value;
  // @@protoc_insertion_point(field_set:natashapb.WeightConfig.totalWeight)
}

// -------------------------------------------------------------------

// MuseumRTPConfig

// string bgReelstrips = 100;
inline void MuseumRTPConfig::clear_bgreelstrips() {
  bgreelstrips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MuseumRTPConfig::bgreelstrips() const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.bgReelstrips)
  return bgreelstrips_.GetNoArena();
}
inline void MuseumRTPConfig::set_bgreelstrips(const ::std::string& value) {
  
  bgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:natashapb.MuseumRTPConfig.bgReelstrips)
}
#if LANG_CXX11
inline void MuseumRTPConfig::set_bgreelstrips(::std::string&& value) {
  
  bgreelstrips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:natashapb.MuseumRTPConfig.bgReelstrips)
}
#endif
inline void MuseumRTPConfig::set_bgreelstrips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:natashapb.MuseumRTPConfig.bgReelstrips)
}
inline void MuseumRTPConfig::set_bgreelstrips(const char* value, size_t size) {
  
  bgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:natashapb.MuseumRTPConfig.bgReelstrips)
}
inline ::std::string* MuseumRTPConfig::mutable_bgreelstrips() {
  
  // @@protoc_insertion_point(field_mutable:natashapb.MuseumRTPConfig.bgReelstrips)
  return bgreelstrips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MuseumRTPConfig::release_bgreelstrips() {
  // @@protoc_insertion_point(field_release:natashapb.MuseumRTPConfig.bgReelstrips)
  
  return bgreelstrips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MuseumRTPConfig::set_allocated_bgreelstrips(::std::string* bgreelstrips) {
  if (bgreelstrips != NULL) {
    
  } else {
    
  }
  bgreelstrips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bgreelstrips);
  // @@protoc_insertion_point(field_set_allocated:natashapb.MuseumRTPConfig.bgReelstrips)
}

// repeated int32 bgBonusPrize = 101;
inline int MuseumRTPConfig::bgbonusprize_size() const {
  return bgbonusprize_.size();
}
inline void MuseumRTPConfig::clear_bgbonusprize() {
  bgbonusprize_.Clear();
}
inline ::google::protobuf::int32 MuseumRTPConfig::bgbonusprize(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.bgBonusPrize)
  return bgbonusprize_.Get(index);
}
inline void MuseumRTPConfig::set_bgbonusprize(int index, ::google::protobuf::int32 value) {
  bgbonusprize_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.MuseumRTPConfig.bgBonusPrize)
}
inline void MuseumRTPConfig::add_bgbonusprize(::google::protobuf::int32 value) {
  bgbonusprize_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.MuseumRTPConfig.bgBonusPrize)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MuseumRTPConfig::bgbonusprize() const {
  // @@protoc_insertion_point(field_list:natashapb.MuseumRTPConfig.bgBonusPrize)
  return bgbonusprize_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MuseumRTPConfig::mutable_bgbonusprize() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.MuseumRTPConfig.bgBonusPrize)
  return &bgbonusprize_;
}

// repeated int32 bgMultipliers = 102;
inline int MuseumRTPConfig::bgmultipliers_size() const {
  return bgmultipliers_.size();
}
inline void MuseumRTPConfig::clear_bgmultipliers() {
  bgmultipliers_.Clear();
}
inline ::google::protobuf::int32 MuseumRTPConfig::bgmultipliers(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.bgMultipliers)
  return bgmultipliers_.Get(index);
}
inline void MuseumRTPConfig::set_bgmultipliers(int index, ::google::protobuf::int32 value) {
  bgmultipliers_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.MuseumRTPConfig.bgMultipliers)
}
inline void MuseumRTPConfig::add_bgmultipliers(::google::protobuf::int32 value) {
  bgmultipliers_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.MuseumRTPConfig.bgMultipliers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MuseumRTPConfig::bgmultipliers() const {
  // @@protoc_insertion_point(field_list:natashapb.MuseumRTPConfig.bgMultipliers)
  return bgmultipliers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MuseumRTPConfig::mutable_bgmultipliers() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.MuseumRTPConfig.bgMultipliers)
  return &bgmultipliers_;
}

// repeated .natashapb.WeightConfig bgMysteryWild = 103;
inline int MuseumRTPConfig::bgmysterywild_size() const {
  return bgmysterywild_.size();
}
inline void MuseumRTPConfig::clear_bgmysterywild() {
  bgmysterywild_.Clear();
}
inline ::natashapb::WeightConfig* MuseumRTPConfig::mutable_bgmysterywild(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.MuseumRTPConfig.bgMysteryWild)
  return bgmysterywild_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig >*
MuseumRTPConfig::mutable_bgmysterywild() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.MuseumRTPConfig.bgMysteryWild)
  return &bgmysterywild_;
}
inline const ::natashapb::WeightConfig& MuseumRTPConfig::bgmysterywild(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.bgMysteryWild)
  return bgmysterywild_.Get(index);
}
inline ::natashapb::WeightConfig* MuseumRTPConfig::add_bgmysterywild() {
  // @@protoc_insertion_point(field_add:natashapb.MuseumRTPConfig.bgMysteryWild)
  return bgmysterywild_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig >&
MuseumRTPConfig::bgmysterywild() const {
  // @@protoc_insertion_point(field_list:natashapb.MuseumRTPConfig.bgMysteryWild)
  return bgmysterywild_;
}

// int32 fgNums = 200;
inline void MuseumRTPConfig::clear_fgnums() {
  fgnums_ = 0;
}
inline ::google::protobuf::int32 MuseumRTPConfig::fgnums() const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.fgNums)
  return fgnums_;
}
inline void MuseumRTPConfig::set_fgnums(::google::protobuf::int32 value) {
  
  fgnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.MuseumRTPConfig.fgNums)
}

// string fgReelstrips = 300;
inline void MuseumRTPConfig::clear_fgreelstrips() {
  fgreelstrips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MuseumRTPConfig::fgreelstrips() const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.fgReelstrips)
  return fgreelstrips_.GetNoArena();
}
inline void MuseumRTPConfig::set_fgreelstrips(const ::std::string& value) {
  
  fgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:natashapb.MuseumRTPConfig.fgReelstrips)
}
#if LANG_CXX11
inline void MuseumRTPConfig::set_fgreelstrips(::std::string&& value) {
  
  fgreelstrips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:natashapb.MuseumRTPConfig.fgReelstrips)
}
#endif
inline void MuseumRTPConfig::set_fgreelstrips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:natashapb.MuseumRTPConfig.fgReelstrips)
}
inline void MuseumRTPConfig::set_fgreelstrips(const char* value, size_t size) {
  
  fgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:natashapb.MuseumRTPConfig.fgReelstrips)
}
inline ::std::string* MuseumRTPConfig::mutable_fgreelstrips() {
  
  // @@protoc_insertion_point(field_mutable:natashapb.MuseumRTPConfig.fgReelstrips)
  return fgreelstrips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MuseumRTPConfig::release_fgreelstrips() {
  // @@protoc_insertion_point(field_release:natashapb.MuseumRTPConfig.fgReelstrips)
  
  return fgreelstrips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MuseumRTPConfig::set_allocated_fgreelstrips(::std::string* fgreelstrips) {
  if (fgreelstrips != NULL) {
    
  } else {
    
  }
  fgreelstrips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fgreelstrips);
  // @@protoc_insertion_point(field_set_allocated:natashapb.MuseumRTPConfig.fgReelstrips)
}

// repeated int32 fgBonusPrize = 301;
inline int MuseumRTPConfig::fgbonusprize_size() const {
  return fgbonusprize_.size();
}
inline void MuseumRTPConfig::clear_fgbonusprize() {
  fgbonusprize_.Clear();
}
inline ::google::protobuf::int32 MuseumRTPConfig::fgbonusprize(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.fgBonusPrize)
  return fgbonusprize_.Get(index);
}
inline void MuseumRTPConfig::set_fgbonusprize(int index, ::google::protobuf::int32 value) {
  fgbonusprize_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.MuseumRTPConfig.fgBonusPrize)
}
inline void MuseumRTPConfig::add_fgbonusprize(::google::protobuf::int32 value) {
  fgbonusprize_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.MuseumRTPConfig.fgBonusPrize)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MuseumRTPConfig::fgbonusprize() const {
  // @@protoc_insertion_point(field_list:natashapb.MuseumRTPConfig.fgBonusPrize)
  return fgbonusprize_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MuseumRTPConfig::mutable_fgbonusprize() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.MuseumRTPConfig.fgBonusPrize)
  return &fgbonusprize_;
}

// repeated int32 fgMultipliers = 302;
inline int MuseumRTPConfig::fgmultipliers_size() const {
  return fgmultipliers_.size();
}
inline void MuseumRTPConfig::clear_fgmultipliers() {
  fgmultipliers_.Clear();
}
inline ::google::protobuf::int32 MuseumRTPConfig::fgmultipliers(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.fgMultipliers)
  return fgmultipliers_.Get(index);
}
inline void MuseumRTPConfig::set_fgmultipliers(int index, ::google::protobuf::int32 value) {
  fgmultipliers_.Set(index, value);
  // @@protoc_insertion_point(field_set:natashapb.MuseumRTPConfig.fgMultipliers)
}
inline void MuseumRTPConfig::add_fgmultipliers(::google::protobuf::int32 value) {
  fgmultipliers_.Add(value);
  // @@protoc_insertion_point(field_add:natashapb.MuseumRTPConfig.fgMultipliers)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
MuseumRTPConfig::fgmultipliers() const {
  // @@protoc_insertion_point(field_list:natashapb.MuseumRTPConfig.fgMultipliers)
  return fgmultipliers_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
MuseumRTPConfig::mutable_fgmultipliers() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.MuseumRTPConfig.fgMultipliers)
  return &fgmultipliers_;
}

// repeated .natashapb.WeightConfig fgMysteryWild = 303;
inline int MuseumRTPConfig::fgmysterywild_size() const {
  return fgmysterywild_.size();
}
inline void MuseumRTPConfig::clear_fgmysterywild() {
  fgmysterywild_.Clear();
}
inline ::natashapb::WeightConfig* MuseumRTPConfig::mutable_fgmysterywild(int index) {
  // @@protoc_insertion_point(field_mutable:natashapb.MuseumRTPConfig.fgMysteryWild)
  return fgmysterywild_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig >*
MuseumRTPConfig::mutable_fgmysterywild() {
  // @@protoc_insertion_point(field_mutable_list:natashapb.MuseumRTPConfig.fgMysteryWild)
  return &fgmysterywild_;
}
inline const ::natashapb::WeightConfig& MuseumRTPConfig::fgmysterywild(int index) const {
  // @@protoc_insertion_point(field_get:natashapb.MuseumRTPConfig.fgMysteryWild)
  return fgmysterywild_.Get(index);
}
inline ::natashapb::WeightConfig* MuseumRTPConfig::add_fgmysterywild() {
  // @@protoc_insertion_point(field_add:natashapb.MuseumRTPConfig.fgMysteryWild)
  return fgmysterywild_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::natashapb::WeightConfig >&
MuseumRTPConfig::fgmysterywild() const {
  // @@protoc_insertion_point(field_list:natashapb.MuseumRTPConfig.fgMysteryWild)
  return fgmysterywild_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MuseumConfig

// map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
inline int MuseumConfig::reelstripts_size() const {
  return reelstripts_.size();
}
inline void MuseumConfig::clear_reelstripts() {
  reelstripts_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >&
MuseumConfig::reelstripts() const {
  // @@protoc_insertion_point(field_map:natashapb.MuseumConfig.reelstripts)
  return reelstripts_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >*
MuseumConfig::mutable_reelstripts() {
  // @@protoc_insertion_point(field_mutable_map:natashapb.MuseumConfig.reelstripts)
  return reelstripts_.MutableMap();
}

// map<string, .natashapb.MuseumRTPConfig> rtp = 2;
inline int MuseumConfig::rtp_size() const {
  return rtp_.size();
}
inline void MuseumConfig::clear_rtp() {
  rtp_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >&
MuseumConfig::rtp() const {
  // @@protoc_insertion_point(field_map:natashapb.MuseumConfig.rtp)
  return rtp_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >*
MuseumConfig::mutable_rtp() {
  // @@protoc_insertion_point(field_mutable_map:natashapb.MuseumConfig.rtp)
  return rtp_.MutableMap();
}

// -------------------------------------------------------------------

// TLODRTPConfig

// string bgReelstrips = 100;
inline void TLODRTPConfig::clear_bgreelstrips() {
  bgreelstrips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLODRTPConfig::bgreelstrips() const {
  // @@protoc_insertion_point(field_get:natashapb.TLODRTPConfig.bgReelstrips)
  return bgreelstrips_.GetNoArena();
}
inline void TLODRTPConfig::set_bgreelstrips(const ::std::string& value) {
  
  bgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:natashapb.TLODRTPConfig.bgReelstrips)
}
#if LANG_CXX11
inline void TLODRTPConfig::set_bgreelstrips(::std::string&& value) {
  
  bgreelstrips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:natashapb.TLODRTPConfig.bgReelstrips)
}
#endif
inline void TLODRTPConfig::set_bgreelstrips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:natashapb.TLODRTPConfig.bgReelstrips)
}
inline void TLODRTPConfig::set_bgreelstrips(const char* value, size_t size) {
  
  bgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:natashapb.TLODRTPConfig.bgReelstrips)
}
inline ::std::string* TLODRTPConfig::mutable_bgreelstrips() {
  
  // @@protoc_insertion_point(field_mutable:natashapb.TLODRTPConfig.bgReelstrips)
  return bgreelstrips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLODRTPConfig::release_bgreelstrips() {
  // @@protoc_insertion_point(field_release:natashapb.TLODRTPConfig.bgReelstrips)
  
  return bgreelstrips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLODRTPConfig::set_allocated_bgreelstrips(::std::string* bgreelstrips) {
  if (bgreelstrips != NULL) {
    
  } else {
    
  }
  bgreelstrips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bgreelstrips);
  // @@protoc_insertion_point(field_set_allocated:natashapb.TLODRTPConfig.bgReelstrips)
}

// int32 fgNums = 200;
inline void TLODRTPConfig::clear_fgnums() {
  fgnums_ = 0;
}
inline ::google::protobuf::int32 TLODRTPConfig::fgnums() const {
  // @@protoc_insertion_point(field_get:natashapb.TLODRTPConfig.fgNums)
  return fgnums_;
}
inline void TLODRTPConfig::set_fgnums(::google::protobuf::int32 value) {
  
  fgnums_ = value;
  // @@protoc_insertion_point(field_set:natashapb.TLODRTPConfig.fgNums)
}

// string fgReelstrips = 300;
inline void TLODRTPConfig::clear_fgreelstrips() {
  fgreelstrips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TLODRTPConfig::fgreelstrips() const {
  // @@protoc_insertion_point(field_get:natashapb.TLODRTPConfig.fgReelstrips)
  return fgreelstrips_.GetNoArena();
}
inline void TLODRTPConfig::set_fgreelstrips(const ::std::string& value) {
  
  fgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:natashapb.TLODRTPConfig.fgReelstrips)
}
#if LANG_CXX11
inline void TLODRTPConfig::set_fgreelstrips(::std::string&& value) {
  
  fgreelstrips_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:natashapb.TLODRTPConfig.fgReelstrips)
}
#endif
inline void TLODRTPConfig::set_fgreelstrips(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:natashapb.TLODRTPConfig.fgReelstrips)
}
inline void TLODRTPConfig::set_fgreelstrips(const char* value, size_t size) {
  
  fgreelstrips_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:natashapb.TLODRTPConfig.fgReelstrips)
}
inline ::std::string* TLODRTPConfig::mutable_fgreelstrips() {
  
  // @@protoc_insertion_point(field_mutable:natashapb.TLODRTPConfig.fgReelstrips)
  return fgreelstrips_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TLODRTPConfig::release_fgreelstrips() {
  // @@protoc_insertion_point(field_release:natashapb.TLODRTPConfig.fgReelstrips)
  
  return fgreelstrips_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TLODRTPConfig::set_allocated_fgreelstrips(::std::string* fgreelstrips) {
  if (fgreelstrips != NULL) {
    
  } else {
    
  }
  fgreelstrips_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fgreelstrips);
  // @@protoc_insertion_point(field_set_allocated:natashapb.TLODRTPConfig.fgReelstrips)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TLODConfig

// map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
inline int TLODConfig::reelstripts_size() const {
  return reelstripts_.size();
}
inline void TLODConfig::clear_reelstripts() {
  reelstripts_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >&
TLODConfig::reelstripts() const {
  // @@protoc_insertion_point(field_map:natashapb.TLODConfig.reelstripts)
  return reelstripts_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >*
TLODConfig::mutable_reelstripts() {
  // @@protoc_insertion_point(field_mutable_map:natashapb.TLODConfig.reelstripts)
  return reelstripts_.MutableMap();
}

// map<string, .natashapb.TLODRTPConfig> rtp = 2;
inline int TLODConfig::rtp_size() const {
  return rtp_.size();
}
inline void TLODConfig::clear_rtp() {
  rtp_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >&
TLODConfig::rtp() const {
  // @@protoc_insertion_point(field_map:natashapb.TLODConfig.rtp)
  return rtp_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >*
TLODConfig::mutable_rtp() {
  // @@protoc_insertion_point(field_mutable_map:natashapb.TLODConfig.rtp)
  return rtp_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GameConfig

// map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
inline int GameConfig::reelstripts_size() const {
  return reelstripts_.size();
}
inline void GameConfig::clear_reelstripts() {
  reelstripts_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >&
GameConfig::reelstripts() const {
  // @@protoc_insertion_point(field_map:natashapb.GameConfig.reelstripts)
  return reelstripts_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >*
GameConfig::mutable_reelstripts() {
  // @@protoc_insertion_point(field_mutable_map:natashapb.GameConfig.reelstripts)
  return reelstripts_.MutableMap();
}

// map<string, .google.protobuf.Any> rtp = 2;
inline int GameConfig::rtp_size() const {
  return rtp_.size();
}
inline const ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >&
GameConfig::rtp() const {
  // @@protoc_insertion_point(field_map:natashapb.GameConfig.rtp)
  return rtp_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >*
GameConfig::mutable_rtp() {
  // @@protoc_insertion_point(field_mutable_map:natashapb.GameConfig.rtp)
  return rtp_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace natashapb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::natashapb::CODE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::natashapb::CODE>() {
  return ::natashapb::CODE_descriptor();
}
template <> struct is_proto_enum< ::natashapb::GAMERESULTTYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::natashapb::GAMERESULTTYPE>() {
  return ::natashapb::GAMERESULTTYPE_descriptor();
}
template <> struct is_proto_enum< ::natashapb::GAMEMODTYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::natashapb::GAMEMODTYPE>() {
  return ::natashapb::GAMEMODTYPE_descriptor();
}
template <> struct is_proto_enum< ::natashapb::CASCADINGFREESTATE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::natashapb::CASCADINGFREESTATE>() {
  return ::natashapb::CASCADINGFREESTATE_descriptor();
}
template <> struct is_proto_enum< ::natashapb::DEBUGSTATE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::natashapb::DEBUGSTATE>() {
  return ::natashapb::DEBUGSTATE_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_base_2eproto__INCLUDED
