// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace natashapb {
class SymbolBlock3X5DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolBlock3X5>
      _instance;
} _SymbolBlock3X5_default_instance_;
class SymbolBlockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolBlock>
      _instance;
  const ::natashapb::SymbolBlock3X5* sb3x5_;
} _SymbolBlock_default_instance_;
class StaticCascadingRandomResult3X5DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticCascadingRandomResult3X5>
      _instance;
} _StaticCascadingRandomResult3X5_default_instance_;
class NormalReelsRandomResult3X5DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalReelsRandomResult3X5>
      _instance;
} _NormalReelsRandomResult3X5_default_instance_;
class RandomResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RandomResult>
      _instance;
  const ::natashapb::StaticCascadingRandomResult3X5* scrr3x5_;
  const ::natashapb::NormalReelsRandomResult3X5* nrrr3x5_;
} _RandomResult_default_instance_;
class Position2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position2D>
      _instance;
} _Position2D_default_instance_;
class GameResultInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameResultInfo>
      _instance;
} _GameResultInfo_default_instance_;
class SpinResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpinResult>
      _instance;
} _SpinResult_default_instance_;
class GameCtrlIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlID>
      _instance;
} _GameCtrlID_default_instance_;
class BaseCascadingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaseCascadingInfo>
      _instance;
} _BaseCascadingInfo_default_instance_;
class FGCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FGCache>
      _instance;
} _FGCache_default_instance_;
class BaseFreeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BaseFreeInfo>
      _instance;
} _BaseFreeInfo_default_instance_;
class RespinHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespinHistory>
      _instance;
} _RespinHistory_default_instance_;
class RespinHistoryListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespinHistoryList>
      _instance;
} _RespinHistoryList_default_instance_;
class UserGameModInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGameModInfo>
      _instance;
} _UserGameModInfo_default_instance_;
class UserGameLogicInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserGameLogicInfo>
      _instance;
} _UserGameLogicInfo_default_instance_;
class GameCtrlSpinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlSpin>
      _instance;
} _GameCtrlSpin_default_instance_;
class GameCtrlSelectFreeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlSelectFree>
      _instance;
} _GameCtrlSelectFree_default_instance_;
class GameCtrlBonusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlBonus>
      _instance;
} _GameCtrlBonus_default_instance_;
class GameCtrlJackpotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlJackpot>
      _instance;
} _GameCtrlJackpot_default_instance_;
class GameCtrlCommonJackpotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlCommonJackpot>
      _instance;
} _GameCtrlCommonJackpot_default_instance_;
class GameCtrlAwardSpinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlAwardSpin>
      _instance;
} _GameCtrlAwardSpin_default_instance_;
class GameCtrlDebugDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrlDebug>
      _instance;
} _GameCtrlDebug_default_instance_;
class GameCtrlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameCtrl>
      _instance;
  const ::natashapb::GameCtrlSpin* spin_;
  const ::natashapb::GameCtrlSelectFree* selectfree_;
  const ::natashapb::GameCtrlSpin* freespin_;
  const ::natashapb::GameCtrlBonus* bonus_;
  const ::natashapb::GameCtrlJackpot* jackpot_;
  const ::natashapb::GameCtrlCommonJackpot* commonjackpot_;
  const ::natashapb::GameCtrlAwardSpin* awardspin_;
  const ::natashapb::GameCtrlSpin* respin_;
} _GameCtrl_default_instance_;
class StartFreeGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartFreeGame>
      _instance;
} _StartFreeGame_default_instance_;
class StartGameModDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartGameMod>
      _instance;
  const ::natashapb::StartFreeGame* freegame_;
} _StartGameMod_default_instance_;
class SymbolRTPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolRTP>
      _instance;
} _SymbolRTP_default_instance_;
class SymbolRTPListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SymbolRTPList>
      _instance;
} _SymbolRTPList_default_instance_;
class BonusRTPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BonusRTP>
      _instance;
} _BonusRTP_default_instance_;
class BonusRTPListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BonusRTPList>
      _instance;
} _BonusRTPList_default_instance_;
class GameModuleRTP_BonusEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameModuleRTP_BonusEntry_DoNotUse>
      _instance;
} _GameModuleRTP_BonusEntry_DoNotUse_default_instance_;
class GameModuleRTPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameModuleRTP>
      _instance;
} _GameModuleRTP_default_instance_;
class RTP_GameModulesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTP_GameModulesEntry_DoNotUse>
      _instance;
} _RTP_GameModulesEntry_DoNotUse_default_instance_;
class RTPDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RTP>
      _instance;
} _RTP_default_instance_;
class NormalReelstriptConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NormalReelstriptConfig>
      _instance;
} _NormalReelstriptConfig_default_instance_;
class StaticSymbolsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticSymbols>
      _instance;
} _StaticSymbols_default_instance_;
class StaticCascadingReelsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StaticCascadingReels>
      _instance;
} _StaticCascadingReels_default_instance_;
class ReelstriptConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReelstriptConfig>
      _instance;
} _ReelstriptConfig_default_instance_;
class WeightConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WeightConfig>
      _instance;
} _WeightConfig_default_instance_;
class MuseumRTPConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MuseumRTPConfig>
      _instance;
} _MuseumRTPConfig_default_instance_;
class MuseumConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MuseumConfig_ReelstriptsEntry_DoNotUse>
      _instance;
} _MuseumConfig_ReelstriptsEntry_DoNotUse_default_instance_;
class MuseumConfig_RtpEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MuseumConfig_RtpEntry_DoNotUse>
      _instance;
} _MuseumConfig_RtpEntry_DoNotUse_default_instance_;
class MuseumConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MuseumConfig>
      _instance;
} _MuseumConfig_default_instance_;
class TLODRTPConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLODRTPConfig>
      _instance;
} _TLODRTPConfig_default_instance_;
class TLODConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLODConfig_ReelstriptsEntry_DoNotUse>
      _instance;
} _TLODConfig_ReelstriptsEntry_DoNotUse_default_instance_;
class TLODConfig_RtpEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLODConfig_RtpEntry_DoNotUse>
      _instance;
} _TLODConfig_RtpEntry_DoNotUse_default_instance_;
class TLODConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TLODConfig>
      _instance;
} _TLODConfig_default_instance_;
class GameConfig_ReelstriptsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameConfig_ReelstriptsEntry_DoNotUse>
      _instance;
} _GameConfig_ReelstriptsEntry_DoNotUse_default_instance_;
class GameConfig_RtpEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameConfig_RtpEntry_DoNotUse>
      _instance;
} _GameConfig_RtpEntry_DoNotUse_default_instance_;
class GameConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GameConfig>
      _instance;
} _GameConfig_default_instance_;
}  // namespace natashapb
namespace protobuf_base_2eproto {
void InitDefaultsSymbolBlock3X5Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_SymbolBlock3X5_default_instance_;
    new (ptr) ::natashapb::SymbolBlock3X5();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SymbolBlock3X5::InitAsDefaultInstance();
}

void InitDefaultsSymbolBlock3X5() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSymbolBlock3X5Impl);
}

void InitDefaultsSymbolBlockImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsSymbolBlock3X5();
  {
    void* ptr = &::natashapb::_SymbolBlock_default_instance_;
    new (ptr) ::natashapb::SymbolBlock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SymbolBlock::InitAsDefaultInstance();
}

void InitDefaultsSymbolBlock() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSymbolBlockImpl);
}

void InitDefaultsStaticCascadingRandomResult3X5Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsSymbolBlock();
  {
    void* ptr = &::natashapb::_StaticCascadingRandomResult3X5_default_instance_;
    new (ptr) ::natashapb::StaticCascadingRandomResult3X5();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::StaticCascadingRandomResult3X5::InitAsDefaultInstance();
}

void InitDefaultsStaticCascadingRandomResult3X5() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStaticCascadingRandomResult3X5Impl);
}

void InitDefaultsNormalReelsRandomResult3X5Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsSymbolBlock();
  {
    void* ptr = &::natashapb::_NormalReelsRandomResult3X5_default_instance_;
    new (ptr) ::natashapb::NormalReelsRandomResult3X5();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::NormalReelsRandomResult3X5::InitAsDefaultInstance();
}

void InitDefaultsNormalReelsRandomResult3X5() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNormalReelsRandomResult3X5Impl);
}

void InitDefaultsRandomResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsStaticCascadingRandomResult3X5();
  protobuf_base_2eproto::InitDefaultsNormalReelsRandomResult3X5();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_RandomResult_default_instance_;
    new (ptr) ::natashapb::RandomResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::RandomResult::InitAsDefaultInstance();
}

void InitDefaultsRandomResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRandomResultImpl);
}

void InitDefaultsPosition2DImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_Position2D_default_instance_;
    new (ptr) ::natashapb::Position2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::Position2D::InitAsDefaultInstance();
}

void InitDefaultsPosition2D() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPosition2DImpl);
}

void InitDefaultsGameResultInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsPosition2D();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_GameResultInfo_default_instance_;
    new (ptr) ::natashapb::GameResultInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameResultInfo::InitAsDefaultInstance();
}

void InitDefaultsGameResultInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameResultInfoImpl);
}

void InitDefaultsSpinResultImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsGameResultInfo();
  protobuf_base_2eproto::InitDefaultsSymbolBlock();
  protobuf_base_2eproto::InitDefaultsGameCtrlSpin();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_SpinResult_default_instance_;
    new (ptr) ::natashapb::SpinResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SpinResult::InitAsDefaultInstance();
}

void InitDefaultsSpinResult() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSpinResultImpl);
}

void InitDefaultsGameCtrlIDImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlID_default_instance_;
    new (ptr) ::natashapb::GameCtrlID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlID::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlID() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlIDImpl);
}

void InitDefaultsBaseCascadingInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsSymbolBlock();
  {
    void* ptr = &::natashapb::_BaseCascadingInfo_default_instance_;
    new (ptr) ::natashapb::BaseCascadingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::BaseCascadingInfo::InitAsDefaultInstance();
}

void InitDefaultsBaseCascadingInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBaseCascadingInfoImpl);
}

void InitDefaultsFGCacheImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_FGCache_default_instance_;
    new (ptr) ::natashapb::FGCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::FGCache::InitAsDefaultInstance();
}

void InitDefaultsFGCache() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFGCacheImpl);
}

void InitDefaultsBaseFreeInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_BaseFreeInfo_default_instance_;
    new (ptr) ::natashapb::BaseFreeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::BaseFreeInfo::InitAsDefaultInstance();
}

void InitDefaultsBaseFreeInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBaseFreeInfoImpl);
}

void InitDefaultsRespinHistoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_RespinHistory_default_instance_;
    new (ptr) ::natashapb::RespinHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::RespinHistory::InitAsDefaultInstance();
}

void InitDefaultsRespinHistory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRespinHistoryImpl);
}

void InitDefaultsRespinHistoryListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsRespinHistory();
  {
    void* ptr = &::natashapb::_RespinHistoryList_default_instance_;
    new (ptr) ::natashapb::RespinHistoryList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::RespinHistoryList::InitAsDefaultInstance();
}

void InitDefaultsRespinHistoryList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRespinHistoryListImpl);
}

void InitDefaultsUserGameModInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsRandomResult();
  protobuf_base_2eproto::InitDefaultsSpinResult();
  protobuf_base_2eproto::InitDefaultsGameCtrlID();
  protobuf_base_2eproto::InitDefaultsBaseCascadingInfo();
  protobuf_base_2eproto::InitDefaultsRespinHistoryList();
  protobuf_base_2eproto::InitDefaultsBaseFreeInfo();
  protobuf_base_2eproto::InitDefaultsFGCache();
  protobuf_base_2eproto::InitDefaultsSymbolBlock();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_UserGameModInfo_default_instance_;
    new (ptr) ::natashapb::UserGameModInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::UserGameModInfo::InitAsDefaultInstance();
}

void InitDefaultsUserGameModInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserGameModInfoImpl);
}

void InitDefaultsUserGameLogicInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsUserGameModInfo();
  {
    void* ptr = &::natashapb::_UserGameLogicInfo_default_instance_;
    new (ptr) ::natashapb::UserGameLogicInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::UserGameLogicInfo::InitAsDefaultInstance();
}

void InitDefaultsUserGameLogicInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUserGameLogicInfoImpl);
}

void InitDefaultsGameCtrlSpinImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlSpin_default_instance_;
    new (ptr) ::natashapb::GameCtrlSpin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlSpin::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlSpin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlSpinImpl);
}

void InitDefaultsGameCtrlSelectFreeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlSelectFree_default_instance_;
    new (ptr) ::natashapb::GameCtrlSelectFree();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlSelectFree::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlSelectFree() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlSelectFreeImpl);
}

void InitDefaultsGameCtrlBonusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlBonus_default_instance_;
    new (ptr) ::natashapb::GameCtrlBonus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlBonus::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlBonus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlBonusImpl);
}

void InitDefaultsGameCtrlJackpotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlJackpot_default_instance_;
    new (ptr) ::natashapb::GameCtrlJackpot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlJackpot::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlJackpot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlJackpotImpl);
}

void InitDefaultsGameCtrlCommonJackpotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlCommonJackpot_default_instance_;
    new (ptr) ::natashapb::GameCtrlCommonJackpot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlCommonJackpot::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlCommonJackpot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlCommonJackpotImpl);
}

void InitDefaultsGameCtrlAwardSpinImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlAwardSpin_default_instance_;
    new (ptr) ::natashapb::GameCtrlAwardSpin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlAwardSpin::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlAwardSpin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlAwardSpinImpl);
}

void InitDefaultsGameCtrlDebugImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_GameCtrlDebug_default_instance_;
    new (ptr) ::natashapb::GameCtrlDebug();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrlDebug::InitAsDefaultInstance();
}

void InitDefaultsGameCtrlDebug() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlDebugImpl);
}

void InitDefaultsGameCtrlImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsGameCtrlSpin();
  protobuf_base_2eproto::InitDefaultsGameCtrlSelectFree();
  protobuf_base_2eproto::InitDefaultsGameCtrlBonus();
  protobuf_base_2eproto::InitDefaultsGameCtrlJackpot();
  protobuf_base_2eproto::InitDefaultsGameCtrlCommonJackpot();
  protobuf_base_2eproto::InitDefaultsGameCtrlAwardSpin();
  protobuf_base_2eproto::InitDefaultsGameCtrlDebug();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_GameCtrl_default_instance_;
    new (ptr) ::natashapb::GameCtrl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameCtrl::InitAsDefaultInstance();
}

void InitDefaultsGameCtrl() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameCtrlImpl);
}

void InitDefaultsStartFreeGameImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_StartFreeGame_default_instance_;
    new (ptr) ::natashapb::StartFreeGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::StartFreeGame::InitAsDefaultInstance();
}

void InitDefaultsStartFreeGame() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStartFreeGameImpl);
}

void InitDefaultsStartGameModImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsStartFreeGame();
  protobuf_base_2eproto::InitDefaultsGameCtrlID();
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_StartGameMod_default_instance_;
    new (ptr) ::natashapb::StartGameMod();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::StartGameMod::InitAsDefaultInstance();
}

void InitDefaultsStartGameMod() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStartGameModImpl);
}

void InitDefaultsSymbolRTPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_SymbolRTP_default_instance_;
    new (ptr) ::natashapb::SymbolRTP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SymbolRTP::InitAsDefaultInstance();
}

void InitDefaultsSymbolRTP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSymbolRTPImpl);
}

void InitDefaultsSymbolRTPListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsSymbolRTP();
  {
    void* ptr = &::natashapb::_SymbolRTPList_default_instance_;
    new (ptr) ::natashapb::SymbolRTPList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::SymbolRTPList::InitAsDefaultInstance();
}

void InitDefaultsSymbolRTPList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSymbolRTPListImpl);
}

void InitDefaultsBonusRTPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_BonusRTP_default_instance_;
    new (ptr) ::natashapb::BonusRTP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::BonusRTP::InitAsDefaultInstance();
}

void InitDefaultsBonusRTP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBonusRTPImpl);
}

void InitDefaultsBonusRTPListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsBonusRTP();
  {
    void* ptr = &::natashapb::_BonusRTPList_default_instance_;
    new (ptr) ::natashapb::BonusRTPList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::BonusRTPList::InitAsDefaultInstance();
}

void InitDefaultsBonusRTPList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBonusRTPListImpl);
}

void InitDefaultsGameModuleRTP_BonusEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsBonusRTPList();
  {
    void* ptr = &::natashapb::_GameModuleRTP_BonusEntry_DoNotUse_default_instance_;
    new (ptr) ::natashapb::GameModuleRTP_BonusEntry_DoNotUse();
  }
  ::natashapb::GameModuleRTP_BonusEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsGameModuleRTP_BonusEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameModuleRTP_BonusEntry_DoNotUseImpl);
}

void InitDefaultsGameModuleRTPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsSymbolRTPList();
  protobuf_base_2eproto::InitDefaultsGameModuleRTP_BonusEntry_DoNotUse();
  {
    void* ptr = &::natashapb::_GameModuleRTP_default_instance_;
    new (ptr) ::natashapb::GameModuleRTP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameModuleRTP::InitAsDefaultInstance();
}

void InitDefaultsGameModuleRTP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameModuleRTPImpl);
}

void InitDefaultsRTP_GameModulesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsGameModuleRTP();
  {
    void* ptr = &::natashapb::_RTP_GameModulesEntry_DoNotUse_default_instance_;
    new (ptr) ::natashapb::RTP_GameModulesEntry_DoNotUse();
  }
  ::natashapb::RTP_GameModulesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsRTP_GameModulesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRTP_GameModulesEntry_DoNotUseImpl);
}

void InitDefaultsRTPImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsRTP_GameModulesEntry_DoNotUse();
  {
    void* ptr = &::natashapb::_RTP_default_instance_;
    new (ptr) ::natashapb::RTP();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::RTP::InitAsDefaultInstance();
}

void InitDefaultsRTP() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRTPImpl);
}

void InitDefaultsNormalReelstriptConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_NormalReelstriptConfig_default_instance_;
    new (ptr) ::natashapb::NormalReelstriptConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::NormalReelstriptConfig::InitAsDefaultInstance();
}

void InitDefaultsNormalReelstriptConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNormalReelstriptConfigImpl);
}

void InitDefaultsStaticSymbolsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_StaticSymbols_default_instance_;
    new (ptr) ::natashapb::StaticSymbols();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::StaticSymbols::InitAsDefaultInstance();
}

void InitDefaultsStaticSymbols() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStaticSymbolsImpl);
}

void InitDefaultsStaticCascadingReelsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsStaticSymbols();
  {
    void* ptr = &::natashapb::_StaticCascadingReels_default_instance_;
    new (ptr) ::natashapb::StaticCascadingReels();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::StaticCascadingReels::InitAsDefaultInstance();
}

void InitDefaultsStaticCascadingReels() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStaticCascadingReelsImpl);
}

void InitDefaultsReelstriptConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsNormalReelstriptConfig();
  protobuf_base_2eproto::InitDefaultsStaticCascadingReels();
  {
    void* ptr = &::natashapb::_ReelstriptConfig_default_instance_;
    new (ptr) ::natashapb::ReelstriptConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::ReelstriptConfig::InitAsDefaultInstance();
}

void InitDefaultsReelstriptConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReelstriptConfigImpl);
}

void InitDefaultsWeightConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_WeightConfig_default_instance_;
    new (ptr) ::natashapb::WeightConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::WeightConfig::InitAsDefaultInstance();
}

void InitDefaultsWeightConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsWeightConfigImpl);
}

void InitDefaultsMuseumRTPConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsWeightConfig();
  {
    void* ptr = &::natashapb::_MuseumRTPConfig_default_instance_;
    new (ptr) ::natashapb::MuseumRTPConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::MuseumRTPConfig::InitAsDefaultInstance();
}

void InitDefaultsMuseumRTPConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMuseumRTPConfigImpl);
}

void InitDefaultsMuseumConfig_ReelstriptsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsReelstriptConfig();
  {
    void* ptr = &::natashapb::_MuseumConfig_ReelstriptsEntry_DoNotUse_default_instance_;
    new (ptr) ::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse();
  }
  ::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMuseumConfig_ReelstriptsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMuseumConfig_ReelstriptsEntry_DoNotUseImpl);
}

void InitDefaultsMuseumConfig_RtpEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsMuseumRTPConfig();
  {
    void* ptr = &::natashapb::_MuseumConfig_RtpEntry_DoNotUse_default_instance_;
    new (ptr) ::natashapb::MuseumConfig_RtpEntry_DoNotUse();
  }
  ::natashapb::MuseumConfig_RtpEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsMuseumConfig_RtpEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMuseumConfig_RtpEntry_DoNotUseImpl);
}

void InitDefaultsMuseumConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsMuseumConfig_ReelstriptsEntry_DoNotUse();
  protobuf_base_2eproto::InitDefaultsMuseumConfig_RtpEntry_DoNotUse();
  {
    void* ptr = &::natashapb::_MuseumConfig_default_instance_;
    new (ptr) ::natashapb::MuseumConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::MuseumConfig::InitAsDefaultInstance();
}

void InitDefaultsMuseumConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMuseumConfigImpl);
}

void InitDefaultsTLODRTPConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::natashapb::_TLODRTPConfig_default_instance_;
    new (ptr) ::natashapb::TLODRTPConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::TLODRTPConfig::InitAsDefaultInstance();
}

void InitDefaultsTLODRTPConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLODRTPConfigImpl);
}

void InitDefaultsTLODConfig_ReelstriptsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsReelstriptConfig();
  {
    void* ptr = &::natashapb::_TLODConfig_ReelstriptsEntry_DoNotUse_default_instance_;
    new (ptr) ::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse();
  }
  ::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTLODConfig_ReelstriptsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLODConfig_ReelstriptsEntry_DoNotUseImpl);
}

void InitDefaultsTLODConfig_RtpEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsTLODRTPConfig();
  {
    void* ptr = &::natashapb::_TLODConfig_RtpEntry_DoNotUse_default_instance_;
    new (ptr) ::natashapb::TLODConfig_RtpEntry_DoNotUse();
  }
  ::natashapb::TLODConfig_RtpEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTLODConfig_RtpEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLODConfig_RtpEntry_DoNotUseImpl);
}

void InitDefaultsTLODConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsTLODConfig_ReelstriptsEntry_DoNotUse();
  protobuf_base_2eproto::InitDefaultsTLODConfig_RtpEntry_DoNotUse();
  {
    void* ptr = &::natashapb::_TLODConfig_default_instance_;
    new (ptr) ::natashapb::TLODConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::TLODConfig::InitAsDefaultInstance();
}

void InitDefaultsTLODConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTLODConfigImpl);
}

void InitDefaultsGameConfig_ReelstriptsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsReelstriptConfig();
  {
    void* ptr = &::natashapb::_GameConfig_ReelstriptsEntry_DoNotUse_default_instance_;
    new (ptr) ::natashapb::GameConfig_ReelstriptsEntry_DoNotUse();
  }
  ::natashapb::GameConfig_ReelstriptsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsGameConfig_ReelstriptsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameConfig_ReelstriptsEntry_DoNotUseImpl);
}

void InitDefaultsGameConfig_RtpEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fany_2eproto::InitDefaultsAny();
  {
    void* ptr = &::natashapb::_GameConfig_RtpEntry_DoNotUse_default_instance_;
    new (ptr) ::natashapb::GameConfig_RtpEntry_DoNotUse();
  }
  ::natashapb::GameConfig_RtpEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsGameConfig_RtpEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameConfig_RtpEntry_DoNotUseImpl);
}

void InitDefaultsGameConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_base_2eproto::InitDefaultsGameConfig_ReelstriptsEntry_DoNotUse();
  protobuf_base_2eproto::InitDefaultsGameConfig_RtpEntry_DoNotUse();
  {
    void* ptr = &::natashapb::_GameConfig_default_instance_;
    new (ptr) ::natashapb::GameConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::natashapb::GameConfig::InitAsDefaultInstance();
}

void InitDefaultsGameConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGameConfigImpl);
}

::google::protobuf::Metadata file_level_metadata[50];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat0_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat1_4_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_0_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_2_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_3_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock3X5, dat2_4_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::natashapb::SymbolBlockDefaultTypeInternal, sb3x5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolBlock, block_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingRandomResult3X5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingRandomResult3X5, reelsindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingRandomResult3X5, downnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingRandomResult3X5, symbolblock_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::NormalReelsRandomResult3X5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::NormalReelsRandomResult3X5, reelsindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::NormalReelsRandomResult3X5, symbolblock_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RandomResult, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RandomResult, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::natashapb::RandomResultDefaultTypeInternal, scrr3x5_),
  offsetof(::natashapb::RandomResultDefaultTypeInternal, nrrr3x5_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RandomResult, info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RandomResult, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::Position2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::Position2D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::Position2D, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, typegameresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, lstpos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, lstsymbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, realwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, mul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, prize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, lineindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameResultInfo, exdat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, realwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, lstgri_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, fgnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, infg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, inbonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, injackpot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, incommonjackpot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, inrespin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, awardmul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, realfgnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, specialtriggered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, symbolblock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, spin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SpinResult, exdat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, ctrlid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, baseid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, parentid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlID, gamemod_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, curbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, curlines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, curtimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, turnnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, turnwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, freestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, isend_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseCascadingInfo, symbolblock_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::FGCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::FGCache, fgnums_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, curbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, curlines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, curtimes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, totalwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, lastnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BaseFreeInfo, curnums_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, realwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, win_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, mul_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistory, isspecial_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistoryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RespinHistoryList, lst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, randomresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, spinresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, gamectrlid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, cascadinginfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, lsthistory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, freeinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, fgcache_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, symbolblock_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameModInfo, exdat_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, basegame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, freegame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, jackpot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, commonjackpot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, respin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, iscompleted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, curbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, realwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, configname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, curgamemodtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::UserGameLogicInfo, nextgamemodtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlSpin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlSpin, bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlSpin, lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlSpin, times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlSpin, totalbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlSpin, realbet_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlSelectFree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlSelectFree, typeindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlBonus, itemindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlJackpot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlJackpot, itemindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlCommonJackpot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlCommonJackpot, itemindex_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlAwardSpin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlAwardSpin, bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlAwardSpin, lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlAwardSpin, times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlAwardSpin, totalbet_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlDebug, debugstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrlDebug, lstrandom_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrl, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrl, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrl, ctrlid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrl, realbet_),
  offsetof(::natashapb::GameCtrlDefaultTypeInternal, spin_),
  offsetof(::natashapb::GameCtrlDefaultTypeInternal, selectfree_),
  offsetof(::natashapb::GameCtrlDefaultTypeInternal, freespin_),
  offsetof(::natashapb::GameCtrlDefaultTypeInternal, bonus_),
  offsetof(::natashapb::GameCtrlDefaultTypeInternal, jackpot_),
  offsetof(::natashapb::GameCtrlDefaultTypeInternal, commonjackpot_),
  offsetof(::natashapb::GameCtrlDefaultTypeInternal, awardspin_),
  offsetof(::natashapb::GameCtrlDefaultTypeInternal, respin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrl, debug_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrl, exdat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameCtrl, ctrl_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartFreeGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartFreeGame, bet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartFreeGame, lines_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartFreeGame, times_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartFreeGame, freenums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartFreeGame, avgbet_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartGameMod, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartGameMod, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::natashapb::StartGameModDefaultTypeInternal, freegame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartGameMod, parentctrlid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartGameMod, exdat_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StartGameMod, startParams_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolRTP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolRTP, totalwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolRTP, winnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolRTP, realwin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolRTPList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::SymbolRTPList, lst_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BonusRTP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BonusRTP, totalwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BonusRTP, winnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BonusRTP, realwin_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BonusRTPList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::BonusRTPList, lst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP_BonusEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP_BonusEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP_BonusEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP_BonusEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP, totalbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP, totalwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP, spinnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP, winnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP, innums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP, symbols_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameModuleRTP, bonus_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP_GameModulesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP_GameModulesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP_GameModulesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP_GameModulesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP, totalbet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP, totalwin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP, spinnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::RTP, gamemodules_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::NormalReelstriptConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::NormalReelstriptConfig, filename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticSymbols, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticSymbols, symbols_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingReels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingReels, scenarios_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::StaticCascadingReels, weights_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::ReelstriptConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::ReelstriptConfig, normal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::ReelstriptConfig, static__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::WeightConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::WeightConfig, weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::WeightConfig, totalweight_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, bgreelstrips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, bgbonusprize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, bgmultipliers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, bgmysterywild_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, fgnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, fgreelstrips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, fgbonusprize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, fgmultipliers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumRTPConfig, fgmysterywild_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig_RtpEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig_RtpEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig_RtpEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig_RtpEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig, reelstripts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::MuseumConfig, rtp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODRTPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODRTPConfig, bgreelstrips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODRTPConfig, fgnums_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODRTPConfig, fgreelstrips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig_RtpEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig_RtpEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig_RtpEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig_RtpEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig, reelstripts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::TLODConfig, rtp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig_ReelstriptsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig_ReelstriptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig_ReelstriptsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig_ReelstriptsEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig_RtpEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig_RtpEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig_RtpEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig_RtpEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig, reelstripts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::natashapb::GameConfig, rtp_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::natashapb::SymbolBlock3X5)},
  { 20, -1, sizeof(::natashapb::SymbolBlock)},
  { 27, -1, sizeof(::natashapb::StaticCascadingRandomResult3X5)},
  { 35, -1, sizeof(::natashapb::NormalReelsRandomResult3X5)},
  { 42, -1, sizeof(::natashapb::RandomResult)},
  { 51, -1, sizeof(::natashapb::Position2D)},
  { 58, -1, sizeof(::natashapb::GameResultInfo)},
  { 73, -1, sizeof(::natashapb::SpinResult)},
  { 93, -1, sizeof(::natashapb::GameCtrlID)},
  { 102, -1, sizeof(::natashapb::BaseCascadingInfo)},
  { 115, -1, sizeof(::natashapb::FGCache)},
  { 121, -1, sizeof(::natashapb::BaseFreeInfo)},
  { 132, -1, sizeof(::natashapb::RespinHistory)},
  { 141, -1, sizeof(::natashapb::RespinHistoryList)},
  { 147, -1, sizeof(::natashapb::UserGameModInfo)},
  { 162, -1, sizeof(::natashapb::UserGameLogicInfo)},
  { 179, -1, sizeof(::natashapb::GameCtrlSpin)},
  { 189, -1, sizeof(::natashapb::GameCtrlSelectFree)},
  { 195, -1, sizeof(::natashapb::GameCtrlBonus)},
  { 201, -1, sizeof(::natashapb::GameCtrlJackpot)},
  { 207, -1, sizeof(::natashapb::GameCtrlCommonJackpot)},
  { 213, -1, sizeof(::natashapb::GameCtrlAwardSpin)},
  { 222, -1, sizeof(::natashapb::GameCtrlDebug)},
  { 229, -1, sizeof(::natashapb::GameCtrl)},
  { 247, -1, sizeof(::natashapb::StartFreeGame)},
  { 257, -1, sizeof(::natashapb::StartGameMod)},
  { 266, -1, sizeof(::natashapb::SymbolRTP)},
  { 274, -1, sizeof(::natashapb::SymbolRTPList)},
  { 280, -1, sizeof(::natashapb::BonusRTP)},
  { 288, -1, sizeof(::natashapb::BonusRTPList)},
  { 294, 301, sizeof(::natashapb::GameModuleRTP_BonusEntry_DoNotUse)},
  { 303, -1, sizeof(::natashapb::GameModuleRTP)},
  { 315, 322, sizeof(::natashapb::RTP_GameModulesEntry_DoNotUse)},
  { 324, -1, sizeof(::natashapb::RTP)},
  { 333, -1, sizeof(::natashapb::NormalReelstriptConfig)},
  { 339, -1, sizeof(::natashapb::StaticSymbols)},
  { 345, -1, sizeof(::natashapb::StaticCascadingReels)},
  { 352, -1, sizeof(::natashapb::ReelstriptConfig)},
  { 359, -1, sizeof(::natashapb::WeightConfig)},
  { 366, -1, sizeof(::natashapb::MuseumRTPConfig)},
  { 380, 387, sizeof(::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse)},
  { 389, 396, sizeof(::natashapb::MuseumConfig_RtpEntry_DoNotUse)},
  { 398, -1, sizeof(::natashapb::MuseumConfig)},
  { 405, -1, sizeof(::natashapb::TLODRTPConfig)},
  { 413, 420, sizeof(::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse)},
  { 422, 429, sizeof(::natashapb::TLODConfig_RtpEntry_DoNotUse)},
  { 431, -1, sizeof(::natashapb::TLODConfig)},
  { 438, 445, sizeof(::natashapb::GameConfig_ReelstriptsEntry_DoNotUse)},
  { 447, 454, sizeof(::natashapb::GameConfig_RtpEntry_DoNotUse)},
  { 456, -1, sizeof(::natashapb::GameConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SymbolBlock3X5_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SymbolBlock_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_StaticCascadingRandomResult3X5_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_NormalReelsRandomResult3X5_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_RandomResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_Position2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameResultInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SpinResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_BaseCascadingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_FGCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_BaseFreeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_RespinHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_RespinHistoryList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_UserGameModInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_UserGameLogicInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlSpin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlSelectFree_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlBonus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlJackpot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlCommonJackpot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlAwardSpin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrlDebug_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameCtrl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_StartFreeGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_StartGameMod_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SymbolRTP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_SymbolRTPList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_BonusRTP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_BonusRTPList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameModuleRTP_BonusEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameModuleRTP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_RTP_GameModulesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_RTP_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_NormalReelstriptConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_StaticSymbols_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_StaticCascadingReels_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_ReelstriptConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_WeightConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_MuseumRTPConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_MuseumConfig_ReelstriptsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_MuseumConfig_RtpEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_MuseumConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_TLODRTPConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_TLODConfig_ReelstriptsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_TLODConfig_RtpEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_TLODConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameConfig_ReelstriptsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameConfig_RtpEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::natashapb::_GameConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "base.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 50);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nbase.proto\022\tnatashapb\032\031google/protobuf"
      "/any.proto\"\200\002\n\016SymbolBlock3X5\022\016\n\006dat0_0\030"
      "\001 \001(\005\022\016\n\006dat0_1\030\002 \001(\005\022\016\n\006dat0_2\030\003 \001(\005\022\016\n"
      "\006dat0_3\030\004 \001(\005\022\016\n\006dat0_4\030\005 \001(\005\022\016\n\006dat1_0\030"
      "\006 \001(\005\022\016\n\006dat1_1\030\007 \001(\005\022\016\n\006dat1_2\030\010 \001(\005\022\016\n"
      "\006dat1_3\030\t \001(\005\022\016\n\006dat1_4\030\n \001(\005\022\016\n\006dat2_0\030"
      "\013 \001(\005\022\016\n\006dat2_1\030\014 \001(\005\022\016\n\006dat2_2\030\r \001(\005\022\016\n"
      "\006dat2_3\030\016 \001(\005\022\016\n\006dat2_4\030\017 \001(\005\"B\n\013SymbolB"
      "lock\022*\n\005sb3x5\030\001 \001(\0132\031.natashapb.SymbolBl"
      "ock3X5H\000B\007\n\005block\"s\n\036StaticCascadingRand"
      "omResult3X5\022\022\n\nreelsIndex\030\001 \001(\005\022\020\n\010downN"
      "ums\030\002 \001(\005\022+\n\013symbolblock\030\003 \001(\0132\026.natasha"
      "pb.SymbolBlock\"]\n\032NormalReelsRandomResul"
      "t3X5\022\022\n\nreelsIndex\030\001 \003(\005\022+\n\013symbolblock\030"
      "\002 \001(\0132\026.natashapb.SymbolBlock\"\265\001\n\014Random"
      "Result\022<\n\007scrr3x5\030\001 \001(\0132).natashapb.Stat"
      "icCascadingRandomResult3X5H\000\0228\n\007nrrr3X5\030"
      "\002 \001(\0132%.natashapb.NormalReelsRandomResul"
      "t3X5H\000\022#\n\004info\030\350\007 \001(\0132\024.google.protobuf."
      "AnyB\010\n\006result\"\"\n\nPosition2D\022\t\n\001x\030\001 \001(\005\022\t"
      "\n\001y\030\002 \001(\005\"\200\002\n\016GameResultInfo\0221\n\016typeGame"
      "Result\030\001 \001(\0162\031.natashapb.GAMERESULTTYPE\022"
      "%\n\006lstPos\030\002 \003(\0132\025.natashapb.Position2D\022\016"
      "\n\006symbol\030\003 \001(\005\022\021\n\tlstSymbol\030\004 \003(\005\022\013\n\003win"
      "\030\005 \001(\003\022\017\n\007realWin\030\006 \001(\003\022\013\n\003mul\030\007 \001(\003\022\r\n\005"
      "prize\030\010 \001(\003\022\021\n\tlineIndex\030\t \001(\005\022$\n\005exDat\030"
      "\350\007 \001(\0132\024.google.protobuf.Any\"\374\002\n\nSpinRes"
      "ult\022\013\n\003win\030\001 \001(\003\022\017\n\007realWin\030\002 \001(\003\022)\n\006lst"
      "GRI\030\003 \003(\0132\031.natashapb.GameResultInfo\022\016\n\006"
      "fgNums\030\004 \001(\005\022\014\n\004inFG\030\005 \001(\010\022\017\n\007inBonus\030\006 "
      "\001(\010\022\021\n\tinJackpot\030\007 \001(\010\022\027\n\017inCommonJackpo"
      "t\030\010 \001(\010\022\020\n\010inRespin\030\t \001(\010\022\020\n\010awardMul\030\n "
      "\001(\003\022\022\n\nrealFGNums\030\013 \001(\005\022\030\n\020specialTrigge"
      "red\030\014 \001(\005\022+\n\013symbolblock\030d \001(\0132\026.natasha"
      "pb.SymbolBlock\022%\n\004spin\030e \001(\0132\027.natashapb"
      ".GameCtrlSpin\022$\n\005exDat\030\350\007 \001(\0132\024.google.p"
      "rotobuf.Any\"g\n\nGameCtrlID\022\016\n\006ctrlID\030\001 \001("
      "\003\022\016\n\006baseID\030\002 \001(\003\022\020\n\010parentID\030\003 \001(\003\022\'\n\007g"
      "ameMod\030\004 \001(\0162\026.natashapb.GAMEMODTYPE\"\330\001\n"
      "\021BaseCascadingInfo\022\016\n\006curBet\030\001 \001(\003\022\020\n\010cu"
      "rLines\030\002 \001(\005\022\020\n\010curTimes\030\003 \001(\005\022\020\n\010turnNu"
      "ms\030\004 \001(\005\022\017\n\007turnWin\030\005 \001(\003\0220\n\tfreeState\030\006"
      " \001(\0162\035.natashapb.CASCADINGFREESTATE\022\r\n\005i"
      "sEnd\030\007 \001(\010\022+\n\013symbolblock\030d \001(\0132\026.natash"
      "apb.SymbolBlock\"\031\n\007FGCache\022\016\n\006fgNums\030\001 \001"
      "(\005\"w\n\014BaseFreeInfo\022\016\n\006curBet\030\001 \001(\003\022\020\n\010cu"
      "rLines\030\002 \001(\005\022\020\n\010curTimes\030\003 \001(\005\022\020\n\010totalW"
      "in\030\004 \001(\003\022\020\n\010lastNums\030\005 \001(\005\022\017\n\007curNums\030\006 "
      "\001(\005\"M\n\rRespinHistory\022\017\n\007realWin\030\001 \001(\003\022\013\n"
      "\003win\030\002 \001(\003\022\013\n\003mul\030\003 \001(\003\022\021\n\tisSpecial\030\004 \001"
      "(\010\":\n\021RespinHistoryList\022%\n\003lst\030\001 \003(\0132\030.n"
      "atashapb.RespinHistory\"\255\003\n\017UserGameModIn"
      "fo\022\013\n\003ver\030\001 \001(\005\022-\n\014randomResult\030\n \001(\0132\027."
      "natashapb.RandomResult\022)\n\nspinResult\030\013 \001"
      "(\0132\025.natashapb.SpinResult\022)\n\ngameCtrlID\030"
      "\014 \001(\0132\025.natashapb.GameCtrlID\0223\n\rcascadin"
      "gInfo\030\r \001(\0132\034.natashapb.BaseCascadingInf"
      "o\0220\n\nlstHistory\030\016 \001(\0132\034.natashapb.Respin"
      "HistoryList\022)\n\010freeInfo\030\017 \001(\0132\027.natashap"
      "b.BaseFreeInfo\022#\n\007fgCache\030\020 \001(\0132\022.natash"
      "apb.FGCache\022+\n\013symbolblock\030d \001(\0132\026.natas"
      "hapb.SymbolBlock\022$\n\005exDat\030\350\007 \001(\0132\024.googl"
      "e.protobuf.Any\"\321\003\n\021UserGameLogicInfo\022,\n\010"
      "basegame\030\001 \001(\0132\032.natashapb.UserGameModIn"
      "fo\022,\n\010freegame\030\002 \001(\0132\032.natashapb.UserGam"
      "eModInfo\022)\n\005bonus\030\003 \001(\0132\032.natashapb.User"
      "GameModInfo\022+\n\007jackpot\030\004 \001(\0132\032.natashapb"
      ".UserGameModInfo\0221\n\rcommonjackpot\030\005 \001(\0132"
      "\032.natashapb.UserGameModInfo\022*\n\006respin\030\006 "
      "\001(\0132\032.natashapb.UserGameModInfo\022\023\n\013isCom"
      "pleted\030\036 \001(\010\022\016\n\006curBet\030\037 \001(\003\022\017\n\007realWin\030"
      "  \001(\003\022\022\n\nconfigName\0302 \001(\t\022.\n\016curGameModT"
      "ype\030d \001(\0162\026.natashapb.GAMEMODTYPE\022/\n\017nex"
      "tGameModType\030e \001(\0162\026.natashapb.GAMEMODTY"
      "PE\"\\\n\014GameCtrlSpin\022\013\n\003bet\030\001 \001(\003\022\r\n\005lines"
      "\030\002 \001(\005\022\r\n\005times\030\003 \001(\005\022\020\n\010totalBet\030\004 \001(\003\022"
      "\017\n\007realBet\030\005 \001(\003\"\'\n\022GameCtrlSelectFree\022\021"
      "\n\ttypeIndex\030\001 \001(\005\"\"\n\rGameCtrlBonus\022\021\n\tit"
      "emIndex\030\001 \001(\005\"$\n\017GameCtrlJackpot\022\021\n\titem"
      "Index\030\001 \001(\005\"*\n\025GameCtrlCommonJackpot\022\021\n\t"
      "itemIndex\030\001 \001(\005\"P\n\021GameCtrlAwardSpin\022\013\n\003"
      "bet\030\001 \001(\003\022\r\n\005lines\030\002 \001(\005\022\r\n\005times\030\003 \001(\005\022"
      "\020\n\010totalBet\030\004 \001(\003\"M\n\rGameCtrlDebug\022)\n\nde"
      "bugState\030\001 \001(\0162\025.natashapb.DEBUGSTATE\022\021\n"
      "\tlstRandom\030\002 \003(\003\"\200\004\n\010GameCtrl\022\016\n\006ctrlID\030"
      "\001 \001(\003\022\017\n\007realBet\030\002 \001(\003\022\'\n\004spin\030\n \001(\0132\027.n"
      "atashapb.GameCtrlSpinH\000\0223\n\nselectFree\030\013 "
      "\001(\0132\035.natashapb.GameCtrlSelectFreeH\000\022+\n\010"
      "freeSpin\030\014 \001(\0132\027.natashapb.GameCtrlSpinH"
      "\000\022)\n\005bonus\030\r \001(\0132\030.natashapb.GameCtrlBon"
      "usH\000\022-\n\007jackpot\030\016 \001(\0132\032.natashapb.GameCt"
      "rlJackpotH\000\0229\n\rcommonJackpot\030\017 \001(\0132 .nat"
      "ashapb.GameCtrlCommonJackpotH\000\0221\n\tawardS"
      "pin\030\020 \001(\0132\034.natashapb.GameCtrlAwardSpinH"
      "\000\022)\n\006respin\030\021 \001(\0132\027.natashapb.GameCtrlSp"
      "inH\000\022\'\n\005debug\030d \001(\0132\030.natashapb.GameCtrl"
      "Debug\022$\n\005exDat\030\350\007 \001(\0132\024.google.protobuf."
      "AnyB\006\n\004ctrl\"\\\n\rStartFreeGame\022\013\n\003bet\030\001 \001("
      "\003\022\r\n\005lines\030\002 \001(\005\022\r\n\005times\030\003 \001(\005\022\020\n\010freeN"
      "ums\030\004 \001(\005\022\016\n\006avgBet\030\005 \001(\003\"\236\001\n\014StartGameM"
      "od\022,\n\010freegame\030\001 \001(\0132\030.natashapb.StartFr"
      "eeGameH\000\022+\n\014parentCtrlID\030d \001(\0132\025.natasha"
      "pb.GameCtrlID\022$\n\005exDat\030\350\007 \001(\0132\024.google.p"
      "rotobuf.AnyB\r\n\013startParams\"\?\n\tSymbolRTP\022"
      "\020\n\010totalWin\030\001 \001(\003\022\017\n\007winNums\030\002 \001(\003\022\017\n\007re"
      "alWin\030\003 \001(\003\"2\n\rSymbolRTPList\022!\n\003lst\030\001 \003("
      "\0132\024.natashapb.SymbolRTP\">\n\010BonusRTP\022\020\n\010t"
      "otalWin\030\001 \001(\003\022\017\n\007winNums\030\002 \001(\003\022\017\n\007realWi"
      "n\030\003 \001(\003\"0\n\014BonusRTPList\022 \n\003lst\030\001 \003(\0132\023.n"
      "atashapb.BonusRTP\"\214\002\n\rGameModuleRTP\022\020\n\010t"
      "otalBet\030\001 \001(\003\022\020\n\010totalWin\030\002 \001(\003\022\020\n\010spinN"
      "ums\030\003 \001(\003\022\017\n\007winNums\030\004 \001(\003\022\016\n\006inNums\030\005 \001"
      "(\003\022)\n\007symbols\030d \003(\0132\030.natashapb.SymbolRT"
      "PList\0222\n\005bonus\030e \003(\0132#.natashapb.GameMod"
      "uleRTP.BonusEntry\032E\n\nBonusEntry\022\013\n\003key\030\001"
      " \001(\t\022&\n\005value\030\002 \001(\0132\027.natashapb.BonusRTP"
      "List:\0028\001\"\277\001\n\003RTP\022\020\n\010totalBet\030\001 \001(\003\022\020\n\010to"
      "talWin\030\002 \001(\003\022\020\n\010spinNums\030\003 \001(\003\0224\n\013gameMo"
      "dules\030d \003(\0132\037.natashapb.RTP.GameModulesE"
      "ntry\032L\n\020GameModulesEntry\022\013\n\003key\030\001 \001(\t\022\'\n"
      "\005value\030\002 \001(\0132\030.natashapb.GameModuleRTP:\002"
      "8\001\"*\n\026NormalReelstriptConfig\022\020\n\010filename"
      "\030\001 \001(\t\" \n\rStaticSymbols\022\017\n\007symbols\030\001 \003(\005"
      "\"T\n\024StaticCascadingReels\022+\n\tscenarios\030\001 "
      "\003(\0132\030.natashapb.StaticSymbols\022\017\n\007weights"
      "\030\002 \003(\005\"v\n\020ReelstriptConfig\0221\n\006normal\030\001 \001"
      "(\0132!.natashapb.NormalReelstriptConfig\022/\n"
      "\006static\030\002 \001(\0132\037.natashapb.StaticCascadin"
      "gReels\"4\n\014WeightConfig\022\017\n\007weights\030\001 \003(\005\022"
      "\023\n\013totalWeight\030\002 \001(\005\"\214\002\n\017MuseumRTPConfig"
      "\022\024\n\014bgReelstrips\030d \001(\t\022\024\n\014bgBonusPrize\030e"
      " \003(\005\022\025\n\rbgMultipliers\030f \003(\005\022.\n\rbgMystery"
      "Wild\030g \003(\0132\027.natashapb.WeightConfig\022\017\n\006f"
      "gNums\030\310\001 \001(\005\022\025\n\014fgReelstrips\030\254\002 \001(\t\022\025\n\014f"
      "gBonusPrize\030\255\002 \003(\005\022\026\n\rfgMultipliers\030\256\002 \003"
      "(\005\022/\n\rfgMysteryWild\030\257\002 \003(\0132\027.natashapb.W"
      "eightConfig\"\225\002\n\014MuseumConfig\022=\n\013reelstri"
      "pts\030\001 \003(\0132(.natashapb.MuseumConfig.Reels"
      "triptsEntry\022-\n\003rtp\030\002 \003(\0132 .natashapb.Mus"
      "eumConfig.RtpEntry\032O\n\020ReelstriptsEntry\022\013"
      "\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.natashapb.R"
      "eelstriptConfig:\0028\001\032F\n\010RtpEntry\022\013\n\003key\030\001"
      " \001(\t\022)\n\005value\030\002 \001(\0132\032.natashapb.MuseumRT"
      "PConfig:\0028\001\"M\n\rTLODRTPConfig\022\024\n\014bgReelst"
      "rips\030d \001(\t\022\017\n\006fgNums\030\310\001 \001(\005\022\025\n\014fgReelstr"
      "ips\030\254\002 \001(\t\"\215\002\n\nTLODConfig\022;\n\013reelstripts"
      "\030\001 \003(\0132&.natashapb.TLODConfig.Reelstript"
      "sEntry\022+\n\003rtp\030\002 \003(\0132\036.natashapb.TLODConf"
      "ig.RtpEntry\032O\n\020ReelstriptsEntry\022\013\n\003key\030\001"
      " \001(\t\022*\n\005value\030\002 \001(\0132\033.natashapb.Reelstri"
      "ptConfig:\0028\001\032D\n\010RtpEntry\022\013\n\003key\030\001 \001(\t\022\'\n"
      "\005value\030\002 \001(\0132\030.natashapb.TLODRTPConfig:\002"
      "8\001\"\211\002\n\nGameConfig\022;\n\013reelstripts\030\001 \003(\0132&"
      ".natashapb.GameConfig.ReelstriptsEntry\022+"
      "\n\003rtp\030\002 \003(\0132\036.natashapb.GameConfig.RtpEn"
      "try\032O\n\020ReelstriptsEntry\022\013\n\003key\030\001 \001(\t\022*\n\005"
      "value\030\002 \001(\0132\033.natashapb.ReelstriptConfig"
      ":\0028\001\032@\n\010RtpEntry\022\013\n\003key\030\001 \001(\t\022#\n\005value\030\002"
      " \001(\0132\024.google.protobuf.Any:\0028\001*\335\004\n\004CODE\022"
      "\006\n\002OK\020\000\022\032\n\025INVALID_PAYTABLES_CFG\020\220N\022\026\n\021I"
      "NVALID_LINES_CFG\020\221N\022\026\n\021INVALID_REELS_CFG"
      "\020\222N\022$\n\036INVALID_START_GAMEMOD_TO_START\020\240\234"
      "\001\022!\n\033INVALID_START_FREEGAME_NUMS\020\241\234\001\022\027\n\021"
      "INVALID_START_BET\020\242\234\001\022\031\n\023INVALID_START_L"
      "INES\020\243\234\001\022\031\n\023INVALID_START_TIMES\020\244\234\001\022\031\n\023A"
      "LREADY_IN_FREEGAME\020\245\234\001\022\026\n\020INVALID_PARENT"
      "ID\020\246\234\001\022\034\n\026INVALID_PARENT_GAMEMOD\020\247\234\001\022\021\n\013"
      "INVALID_BET\020\260\352\001\022\023\n\rINVALID_LINES\020\261\352\001\022\023\n\r"
      "INVALID_TIMES\020\262\352\001\022\036\n\030INVALID_GAMECTRL_GA"
      "MEMOD\020\263\352\001\022!\n\033INVALID_CASCADING_FREESTATE"
      "\020\300\270\002\022\037\n\031ERR_MAKE_INITIAL_SCENARIO\020\320\206\003\022!\n"
      "\033ERR_NO_OVERLOADED_INTERFACE\020\220\277\005\022\033\n\025ERR_"
      "INVALID_JS_PARAMS\020\221\277\005\022\030\n\022ERR_PROTOBUF_PA"
      "RSE\020\222\277\005\022\035\n\027ERR_JS_BUILD_RET_OBJECT\020\223\277\005*\263"
      "\001\n\016GAMERESULTTYPE\022\n\n\006NO_WIN\020\000\022\r\n\tLINE_LE"
      "FT\020\001\022\016\n\nLINE_RIGHT\020\002\022\020\n\014SCATTER_LEFT\020\003\022\021"
      "\n\rSCATTER_RIGHT\020\004\022\022\n\016SCATTEREX_LEFT\020\005\022\023\n"
      "\017SCATTEREX_RIGHT\020\006\022\014\n\010WAY_LEFT\020\007\022\r\n\tWAY_"
      "RIGHT\020\010\022\013\n\007SPECIAL\020\t*t\n\013GAMEMODTYPE\022\014\n\010N"
      "ULL_MOD\020\000\022\r\n\tBASE_GAME\020\001\022\r\n\tFREE_GAME\020\002\022"
      "\016\n\nBONUS_GAME\020\003\022\020\n\014JACKPOT_GAME\020\004\022\027\n\023COM"
      "MON_JACKPOT_GAME\020\005*L\n\022CASCADINGFREESTATE"
      "\022\017\n\013NO_FREEGAME\020\000\022\023\n\017CHG_TO_FREEGAME\020\001\022\020"
      "\n\014END_FREEGAME\020\002*\243\001\n\nDEBUGSTATE\022\014\n\010NO_DE"
      "BUG\020\000\022\r\n\tSMALL_WIN\020\001\022\016\n\nMEDIUM_WIN\020\002\022\013\n\007"
      "BIG_WIN\020\003\022\013\n\007ANY_WIN\020\004\022\022\n\016DEBUG_FREEGAME"
      "\020\005\022\017\n\013DEBUG_BONUS\020\006\022\027\n\023DEBUG_COMMONJACKP"
      "OT\020\007\022\020\n\014DEBUG_RANDOM\020\010b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7510);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "base.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_base_2eproto
namespace natashapb {
const ::google::protobuf::EnumDescriptor* CODE_descriptor() {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_2eproto::file_level_enum_descriptors[0];
}
bool CODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 10000:
    case 10001:
    case 10002:
    case 20000:
    case 20001:
    case 20002:
    case 20003:
    case 20004:
    case 20005:
    case 20006:
    case 20007:
    case 30000:
    case 30001:
    case 30002:
    case 30003:
    case 40000:
    case 50000:
    case 90000:
    case 90001:
    case 90002:
    case 90003:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GAMERESULTTYPE_descriptor() {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_2eproto::file_level_enum_descriptors[1];
}
bool GAMERESULTTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GAMEMODTYPE_descriptor() {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_2eproto::file_level_enum_descriptors[2];
}
bool GAMEMODTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CASCADINGFREESTATE_descriptor() {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_2eproto::file_level_enum_descriptors[3];
}
bool CASCADINGFREESTATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DEBUGSTATE_descriptor() {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_base_2eproto::file_level_enum_descriptors[4];
}
bool DEBUGSTATE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SymbolBlock3X5::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolBlock3X5::kDat00FieldNumber;
const int SymbolBlock3X5::kDat01FieldNumber;
const int SymbolBlock3X5::kDat02FieldNumber;
const int SymbolBlock3X5::kDat03FieldNumber;
const int SymbolBlock3X5::kDat04FieldNumber;
const int SymbolBlock3X5::kDat10FieldNumber;
const int SymbolBlock3X5::kDat11FieldNumber;
const int SymbolBlock3X5::kDat12FieldNumber;
const int SymbolBlock3X5::kDat13FieldNumber;
const int SymbolBlock3X5::kDat14FieldNumber;
const int SymbolBlock3X5::kDat20FieldNumber;
const int SymbolBlock3X5::kDat21FieldNumber;
const int SymbolBlock3X5::kDat22FieldNumber;
const int SymbolBlock3X5::kDat23FieldNumber;
const int SymbolBlock3X5::kDat24FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolBlock3X5::SymbolBlock3X5()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSymbolBlock3X5();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SymbolBlock3X5)
}
SymbolBlock3X5::SymbolBlock3X5(const SymbolBlock3X5& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dat0_0_, &from.dat0_0_,
    static_cast<size_t>(reinterpret_cast<char*>(&dat2_4_) -
    reinterpret_cast<char*>(&dat0_0_)) + sizeof(dat2_4_));
  // @@protoc_insertion_point(copy_constructor:natashapb.SymbolBlock3X5)
}

void SymbolBlock3X5::SharedCtor() {
  ::memset(&dat0_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dat2_4_) -
      reinterpret_cast<char*>(&dat0_0_)) + sizeof(dat2_4_));
  _cached_size_ = 0;
}

SymbolBlock3X5::~SymbolBlock3X5() {
  // @@protoc_insertion_point(destructor:natashapb.SymbolBlock3X5)
  SharedDtor();
}

void SymbolBlock3X5::SharedDtor() {
}

void SymbolBlock3X5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolBlock3X5::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolBlock3X5& SymbolBlock3X5::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSymbolBlock3X5();
  return *internal_default_instance();
}


void SymbolBlock3X5::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SymbolBlock3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dat0_0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dat2_4_) -
      reinterpret_cast<char*>(&dat0_0_)) + sizeof(dat2_4_));
  _internal_metadata_.Clear();
}

bool SymbolBlock3X5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SymbolBlock3X5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 dat0_0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat0_1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat0_2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat0_3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat0_4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat0_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_0 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_3 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat1_4 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat1_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_0 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_2 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_3 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dat2_4 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dat2_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SymbolBlock3X5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SymbolBlock3X5)
  return false;
#undef DO_
}

void SymbolBlock3X5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SymbolBlock3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dat0_0 = 1;
  if (this->dat0_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dat0_0(), output);
  }

  // int32 dat0_1 = 2;
  if (this->dat0_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dat0_1(), output);
  }

  // int32 dat0_2 = 3;
  if (this->dat0_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dat0_2(), output);
  }

  // int32 dat0_3 = 4;
  if (this->dat0_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dat0_3(), output);
  }

  // int32 dat0_4 = 5;
  if (this->dat0_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dat0_4(), output);
  }

  // int32 dat1_0 = 6;
  if (this->dat1_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dat1_0(), output);
  }

  // int32 dat1_1 = 7;
  if (this->dat1_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dat1_1(), output);
  }

  // int32 dat1_2 = 8;
  if (this->dat1_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dat1_2(), output);
  }

  // int32 dat1_3 = 9;
  if (this->dat1_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->dat1_3(), output);
  }

  // int32 dat1_4 = 10;
  if (this->dat1_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dat1_4(), output);
  }

  // int32 dat2_0 = 11;
  if (this->dat2_0() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->dat2_0(), output);
  }

  // int32 dat2_1 = 12;
  if (this->dat2_1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->dat2_1(), output);
  }

  // int32 dat2_2 = 13;
  if (this->dat2_2() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->dat2_2(), output);
  }

  // int32 dat2_3 = 14;
  if (this->dat2_3() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->dat2_3(), output);
  }

  // int32 dat2_4 = 15;
  if (this->dat2_4() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->dat2_4(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SymbolBlock3X5)
}

::google::protobuf::uint8* SymbolBlock3X5::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SymbolBlock3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dat0_0 = 1;
  if (this->dat0_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dat0_0(), target);
  }

  // int32 dat0_1 = 2;
  if (this->dat0_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dat0_1(), target);
  }

  // int32 dat0_2 = 3;
  if (this->dat0_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dat0_2(), target);
  }

  // int32 dat0_3 = 4;
  if (this->dat0_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dat0_3(), target);
  }

  // int32 dat0_4 = 5;
  if (this->dat0_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dat0_4(), target);
  }

  // int32 dat1_0 = 6;
  if (this->dat1_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dat1_0(), target);
  }

  // int32 dat1_1 = 7;
  if (this->dat1_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dat1_1(), target);
  }

  // int32 dat1_2 = 8;
  if (this->dat1_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dat1_2(), target);
  }

  // int32 dat1_3 = 9;
  if (this->dat1_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->dat1_3(), target);
  }

  // int32 dat1_4 = 10;
  if (this->dat1_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dat1_4(), target);
  }

  // int32 dat2_0 = 11;
  if (this->dat2_0() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->dat2_0(), target);
  }

  // int32 dat2_1 = 12;
  if (this->dat2_1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->dat2_1(), target);
  }

  // int32 dat2_2 = 13;
  if (this->dat2_2() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->dat2_2(), target);
  }

  // int32 dat2_3 = 14;
  if (this->dat2_3() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->dat2_3(), target);
  }

  // int32 dat2_4 = 15;
  if (this->dat2_4() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->dat2_4(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SymbolBlock3X5)
  return target;
}

size_t SymbolBlock3X5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SymbolBlock3X5)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 dat0_0 = 1;
  if (this->dat0_0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_0());
  }

  // int32 dat0_1 = 2;
  if (this->dat0_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_1());
  }

  // int32 dat0_2 = 3;
  if (this->dat0_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_2());
  }

  // int32 dat0_3 = 4;
  if (this->dat0_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_3());
  }

  // int32 dat0_4 = 5;
  if (this->dat0_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat0_4());
  }

  // int32 dat1_0 = 6;
  if (this->dat1_0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_0());
  }

  // int32 dat1_1 = 7;
  if (this->dat1_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_1());
  }

  // int32 dat1_2 = 8;
  if (this->dat1_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_2());
  }

  // int32 dat1_3 = 9;
  if (this->dat1_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_3());
  }

  // int32 dat1_4 = 10;
  if (this->dat1_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat1_4());
  }

  // int32 dat2_0 = 11;
  if (this->dat2_0() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_0());
  }

  // int32 dat2_1 = 12;
  if (this->dat2_1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_1());
  }

  // int32 dat2_2 = 13;
  if (this->dat2_2() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_2());
  }

  // int32 dat2_3 = 14;
  if (this->dat2_3() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_3());
  }

  // int32 dat2_4 = 15;
  if (this->dat2_4() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dat2_4());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolBlock3X5::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SymbolBlock3X5)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolBlock3X5* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolBlock3X5>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SymbolBlock3X5)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SymbolBlock3X5)
    MergeFrom(*source);
  }
}

void SymbolBlock3X5::MergeFrom(const SymbolBlock3X5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SymbolBlock3X5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dat0_0() != 0) {
    set_dat0_0(from.dat0_0());
  }
  if (from.dat0_1() != 0) {
    set_dat0_1(from.dat0_1());
  }
  if (from.dat0_2() != 0) {
    set_dat0_2(from.dat0_2());
  }
  if (from.dat0_3() != 0) {
    set_dat0_3(from.dat0_3());
  }
  if (from.dat0_4() != 0) {
    set_dat0_4(from.dat0_4());
  }
  if (from.dat1_0() != 0) {
    set_dat1_0(from.dat1_0());
  }
  if (from.dat1_1() != 0) {
    set_dat1_1(from.dat1_1());
  }
  if (from.dat1_2() != 0) {
    set_dat1_2(from.dat1_2());
  }
  if (from.dat1_3() != 0) {
    set_dat1_3(from.dat1_3());
  }
  if (from.dat1_4() != 0) {
    set_dat1_4(from.dat1_4());
  }
  if (from.dat2_0() != 0) {
    set_dat2_0(from.dat2_0());
  }
  if (from.dat2_1() != 0) {
    set_dat2_1(from.dat2_1());
  }
  if (from.dat2_2() != 0) {
    set_dat2_2(from.dat2_2());
  }
  if (from.dat2_3() != 0) {
    set_dat2_3(from.dat2_3());
  }
  if (from.dat2_4() != 0) {
    set_dat2_4(from.dat2_4());
  }
}

void SymbolBlock3X5::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SymbolBlock3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolBlock3X5::CopyFrom(const SymbolBlock3X5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SymbolBlock3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolBlock3X5::IsInitialized() const {
  return true;
}

void SymbolBlock3X5::Swap(SymbolBlock3X5* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolBlock3X5::InternalSwap(SymbolBlock3X5* other) {
  using std::swap;
  swap(dat0_0_, other->dat0_0_);
  swap(dat0_1_, other->dat0_1_);
  swap(dat0_2_, other->dat0_2_);
  swap(dat0_3_, other->dat0_3_);
  swap(dat0_4_, other->dat0_4_);
  swap(dat1_0_, other->dat1_0_);
  swap(dat1_1_, other->dat1_1_);
  swap(dat1_2_, other->dat1_2_);
  swap(dat1_3_, other->dat1_3_);
  swap(dat1_4_, other->dat1_4_);
  swap(dat2_0_, other->dat2_0_);
  swap(dat2_1_, other->dat2_1_);
  swap(dat2_2_, other->dat2_2_);
  swap(dat2_3_, other->dat2_3_);
  swap(dat2_4_, other->dat2_4_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolBlock3X5::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolBlock::InitAsDefaultInstance() {
  ::natashapb::_SymbolBlock_default_instance_.sb3x5_ = const_cast< ::natashapb::SymbolBlock3X5*>(
      ::natashapb::SymbolBlock3X5::internal_default_instance());
}
void SymbolBlock::set_allocated_sb3x5(::natashapb::SymbolBlock3X5* sb3x5) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_block();
  if (sb3x5) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sb3x5 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sb3x5, submessage_arena);
    }
    set_has_sb3x5();
    block_.sb3x5_ = sb3x5;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.SymbolBlock.sb3x5)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolBlock::kSb3X5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolBlock::SymbolBlock()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSymbolBlock();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SymbolBlock)
}
SymbolBlock::SymbolBlock(const SymbolBlock& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_block();
  switch (from.block_case()) {
    case kSb3X5: {
      mutable_sb3x5()->::natashapb::SymbolBlock3X5::MergeFrom(from.sb3x5());
      break;
    }
    case BLOCK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.SymbolBlock)
}

void SymbolBlock::SharedCtor() {
  clear_has_block();
  _cached_size_ = 0;
}

SymbolBlock::~SymbolBlock() {
  // @@protoc_insertion_point(destructor:natashapb.SymbolBlock)
  SharedDtor();
}

void SymbolBlock::SharedDtor() {
  if (has_block()) {
    clear_block();
  }
}

void SymbolBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolBlock::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolBlock& SymbolBlock::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSymbolBlock();
  return *internal_default_instance();
}


void SymbolBlock::clear_block() {
// @@protoc_insertion_point(one_of_clear_start:natashapb.SymbolBlock)
  switch (block_case()) {
    case kSb3X5: {
      delete block_.sb3x5_;
      break;
    }
    case BLOCK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BLOCK_NOT_SET;
}


void SymbolBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SymbolBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_block();
  _internal_metadata_.Clear();
}

bool SymbolBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SymbolBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.SymbolBlock3X5 sb3x5 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sb3x5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SymbolBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SymbolBlock)
  return false;
#undef DO_
}

void SymbolBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SymbolBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.SymbolBlock3X5 sb3x5 = 1;
  if (has_sb3x5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *block_.sb3x5_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SymbolBlock)
}

::google::protobuf::uint8* SymbolBlock::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SymbolBlock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.SymbolBlock3X5 sb3x5 = 1;
  if (has_sb3x5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *block_.sb3x5_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SymbolBlock)
  return target;
}

size_t SymbolBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SymbolBlock)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (block_case()) {
    // .natashapb.SymbolBlock3X5 sb3x5 = 1;
    case kSb3X5: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *block_.sb3x5_);
      break;
    }
    case BLOCK_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolBlock::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SymbolBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolBlock* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolBlock>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SymbolBlock)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SymbolBlock)
    MergeFrom(*source);
  }
}

void SymbolBlock::MergeFrom(const SymbolBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SymbolBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.block_case()) {
    case kSb3X5: {
      mutable_sb3x5()->::natashapb::SymbolBlock3X5::MergeFrom(from.sb3x5());
      break;
    }
    case BLOCK_NOT_SET: {
      break;
    }
  }
}

void SymbolBlock::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SymbolBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolBlock::CopyFrom(const SymbolBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SymbolBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolBlock::IsInitialized() const {
  return true;
}

void SymbolBlock::Swap(SymbolBlock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolBlock::InternalSwap(SymbolBlock* other) {
  using std::swap;
  swap(block_, other->block_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolBlock::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticCascadingRandomResult3X5::InitAsDefaultInstance() {
  ::natashapb::_StaticCascadingRandomResult3X5_default_instance_._instance.get_mutable()->symbolblock_ = const_cast< ::natashapb::SymbolBlock*>(
      ::natashapb::SymbolBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticCascadingRandomResult3X5::kReelsIndexFieldNumber;
const int StaticCascadingRandomResult3X5::kDownNumsFieldNumber;
const int StaticCascadingRandomResult3X5::kSymbolblockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticCascadingRandomResult3X5::StaticCascadingRandomResult3X5()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsStaticCascadingRandomResult3X5();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.StaticCascadingRandomResult3X5)
}
StaticCascadingRandomResult3X5::StaticCascadingRandomResult3X5(const StaticCascadingRandomResult3X5& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbolblock()) {
    symbolblock_ = new ::natashapb::SymbolBlock(*from.symbolblock_);
  } else {
    symbolblock_ = NULL;
  }
  ::memcpy(&reelsindex_, &from.reelsindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&downnums_) -
    reinterpret_cast<char*>(&reelsindex_)) + sizeof(downnums_));
  // @@protoc_insertion_point(copy_constructor:natashapb.StaticCascadingRandomResult3X5)
}

void StaticCascadingRandomResult3X5::SharedCtor() {
  ::memset(&symbolblock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downnums_) -
      reinterpret_cast<char*>(&symbolblock_)) + sizeof(downnums_));
  _cached_size_ = 0;
}

StaticCascadingRandomResult3X5::~StaticCascadingRandomResult3X5() {
  // @@protoc_insertion_point(destructor:natashapb.StaticCascadingRandomResult3X5)
  SharedDtor();
}

void StaticCascadingRandomResult3X5::SharedDtor() {
  if (this != internal_default_instance()) delete symbolblock_;
}

void StaticCascadingRandomResult3X5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticCascadingRandomResult3X5::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticCascadingRandomResult3X5& StaticCascadingRandomResult3X5::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsStaticCascadingRandomResult3X5();
  return *internal_default_instance();
}


void StaticCascadingRandomResult3X5::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.StaticCascadingRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
  ::memset(&reelsindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downnums_) -
      reinterpret_cast<char*>(&reelsindex_)) + sizeof(downnums_));
  _internal_metadata_.Clear();
}

bool StaticCascadingRandomResult3X5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.StaticCascadingRandomResult3X5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 reelsIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reelsindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 downNums = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.SymbolBlock symbolblock = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbolblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.StaticCascadingRandomResult3X5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.StaticCascadingRandomResult3X5)
  return false;
#undef DO_
}

void StaticCascadingRandomResult3X5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.StaticCascadingRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reelsIndex = 1;
  if (this->reelsindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reelsindex(), output);
  }

  // int32 downNums = 2;
  if (this->downnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->downnums(), output);
  }

  // .natashapb.SymbolBlock symbolblock = 3;
  if (this->has_symbolblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *symbolblock_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.StaticCascadingRandomResult3X5)
}

::google::protobuf::uint8* StaticCascadingRandomResult3X5::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.StaticCascadingRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 reelsIndex = 1;
  if (this->reelsindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reelsindex(), target);
  }

  // int32 downNums = 2;
  if (this->downnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->downnums(), target);
  }

  // .natashapb.SymbolBlock symbolblock = 3;
  if (this->has_symbolblock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *symbolblock_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.StaticCascadingRandomResult3X5)
  return target;
}

size_t StaticCascadingRandomResult3X5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.StaticCascadingRandomResult3X5)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.SymbolBlock symbolblock = 3;
  if (this->has_symbolblock()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbolblock_);
  }

  // int32 reelsIndex = 1;
  if (this->reelsindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reelsindex());
  }

  // int32 downNums = 2;
  if (this->downnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->downnums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticCascadingRandomResult3X5::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.StaticCascadingRandomResult3X5)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticCascadingRandomResult3X5* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticCascadingRandomResult3X5>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.StaticCascadingRandomResult3X5)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.StaticCascadingRandomResult3X5)
    MergeFrom(*source);
  }
}

void StaticCascadingRandomResult3X5::MergeFrom(const StaticCascadingRandomResult3X5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.StaticCascadingRandomResult3X5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbolblock()) {
    mutable_symbolblock()->::natashapb::SymbolBlock::MergeFrom(from.symbolblock());
  }
  if (from.reelsindex() != 0) {
    set_reelsindex(from.reelsindex());
  }
  if (from.downnums() != 0) {
    set_downnums(from.downnums());
  }
}

void StaticCascadingRandomResult3X5::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.StaticCascadingRandomResult3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticCascadingRandomResult3X5::CopyFrom(const StaticCascadingRandomResult3X5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.StaticCascadingRandomResult3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticCascadingRandomResult3X5::IsInitialized() const {
  return true;
}

void StaticCascadingRandomResult3X5::Swap(StaticCascadingRandomResult3X5* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticCascadingRandomResult3X5::InternalSwap(StaticCascadingRandomResult3X5* other) {
  using std::swap;
  swap(symbolblock_, other->symbolblock_);
  swap(reelsindex_, other->reelsindex_);
  swap(downnums_, other->downnums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticCascadingRandomResult3X5::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NormalReelsRandomResult3X5::InitAsDefaultInstance() {
  ::natashapb::_NormalReelsRandomResult3X5_default_instance_._instance.get_mutable()->symbolblock_ = const_cast< ::natashapb::SymbolBlock*>(
      ::natashapb::SymbolBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalReelsRandomResult3X5::kReelsIndexFieldNumber;
const int NormalReelsRandomResult3X5::kSymbolblockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalReelsRandomResult3X5::NormalReelsRandomResult3X5()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsNormalReelsRandomResult3X5();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.NormalReelsRandomResult3X5)
}
NormalReelsRandomResult3X5::NormalReelsRandomResult3X5(const NormalReelsRandomResult3X5& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      reelsindex_(from.reelsindex_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbolblock()) {
    symbolblock_ = new ::natashapb::SymbolBlock(*from.symbolblock_);
  } else {
    symbolblock_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.NormalReelsRandomResult3X5)
}

void NormalReelsRandomResult3X5::SharedCtor() {
  symbolblock_ = NULL;
  _cached_size_ = 0;
}

NormalReelsRandomResult3X5::~NormalReelsRandomResult3X5() {
  // @@protoc_insertion_point(destructor:natashapb.NormalReelsRandomResult3X5)
  SharedDtor();
}

void NormalReelsRandomResult3X5::SharedDtor() {
  if (this != internal_default_instance()) delete symbolblock_;
}

void NormalReelsRandomResult3X5::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalReelsRandomResult3X5::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalReelsRandomResult3X5& NormalReelsRandomResult3X5::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsNormalReelsRandomResult3X5();
  return *internal_default_instance();
}


void NormalReelsRandomResult3X5::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.NormalReelsRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reelsindex_.Clear();
  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
  _internal_metadata_.Clear();
}

bool NormalReelsRandomResult3X5::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.NormalReelsRandomResult3X5)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 reelsIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reelsindex())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_reelsindex())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.SymbolBlock symbolblock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbolblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.NormalReelsRandomResult3X5)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.NormalReelsRandomResult3X5)
  return false;
#undef DO_
}

void NormalReelsRandomResult3X5::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.NormalReelsRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 reelsIndex = 1;
  if (this->reelsindex_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _reelsindex_cached_byte_size_));
  }
  for (int i = 0, n = this->reelsindex_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->reelsindex(i), output);
  }

  // .natashapb.SymbolBlock symbolblock = 2;
  if (this->has_symbolblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *symbolblock_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.NormalReelsRandomResult3X5)
}

::google::protobuf::uint8* NormalReelsRandomResult3X5::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.NormalReelsRandomResult3X5)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 reelsIndex = 1;
  if (this->reelsindex_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _reelsindex_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->reelsindex_, target);
  }

  // .natashapb.SymbolBlock symbolblock = 2;
  if (this->has_symbolblock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *symbolblock_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.NormalReelsRandomResult3X5)
  return target;
}

size_t NormalReelsRandomResult3X5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.NormalReelsRandomResult3X5)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 reelsIndex = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->reelsindex_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reelsindex_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .natashapb.SymbolBlock symbolblock = 2;
  if (this->has_symbolblock()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbolblock_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalReelsRandomResult3X5::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.NormalReelsRandomResult3X5)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalReelsRandomResult3X5* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalReelsRandomResult3X5>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.NormalReelsRandomResult3X5)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.NormalReelsRandomResult3X5)
    MergeFrom(*source);
  }
}

void NormalReelsRandomResult3X5::MergeFrom(const NormalReelsRandomResult3X5& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.NormalReelsRandomResult3X5)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reelsindex_.MergeFrom(from.reelsindex_);
  if (from.has_symbolblock()) {
    mutable_symbolblock()->::natashapb::SymbolBlock::MergeFrom(from.symbolblock());
  }
}

void NormalReelsRandomResult3X5::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.NormalReelsRandomResult3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalReelsRandomResult3X5::CopyFrom(const NormalReelsRandomResult3X5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.NormalReelsRandomResult3X5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalReelsRandomResult3X5::IsInitialized() const {
  return true;
}

void NormalReelsRandomResult3X5::Swap(NormalReelsRandomResult3X5* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalReelsRandomResult3X5::InternalSwap(NormalReelsRandomResult3X5* other) {
  using std::swap;
  reelsindex_.InternalSwap(&other->reelsindex_);
  swap(symbolblock_, other->symbolblock_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalReelsRandomResult3X5::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RandomResult::InitAsDefaultInstance() {
  ::natashapb::_RandomResult_default_instance_.scrr3x5_ = const_cast< ::natashapb::StaticCascadingRandomResult3X5*>(
      ::natashapb::StaticCascadingRandomResult3X5::internal_default_instance());
  ::natashapb::_RandomResult_default_instance_.nrrr3x5_ = const_cast< ::natashapb::NormalReelsRandomResult3X5*>(
      ::natashapb::NormalReelsRandomResult3X5::internal_default_instance());
  ::natashapb::_RandomResult_default_instance_._instance.get_mutable()->info_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void RandomResult::set_allocated_scrr3x5(::natashapb::StaticCascadingRandomResult3X5* scrr3x5) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (scrr3x5) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scrr3x5 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scrr3x5, submessage_arena);
    }
    set_has_scrr3x5();
    result_.scrr3x5_ = scrr3x5;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.RandomResult.scrr3x5)
}
void RandomResult::set_allocated_nrrr3x5(::natashapb::NormalReelsRandomResult3X5* nrrr3x5) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_result();
  if (nrrr3x5) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      nrrr3x5 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, nrrr3x5, submessage_arena);
    }
    set_has_nrrr3x5();
    result_.nrrr3x5_ = nrrr3x5;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.RandomResult.nrrr3X5)
}
void RandomResult::clear_info() {
  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RandomResult::kScrr3X5FieldNumber;
const int RandomResult::kNrrr3X5FieldNumber;
const int RandomResult::kInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RandomResult::RandomResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsRandomResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.RandomResult)
}
RandomResult::RandomResult(const RandomResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::google::protobuf::Any(*from.info_);
  } else {
    info_ = NULL;
  }
  clear_has_result();
  switch (from.result_case()) {
    case kScrr3X5: {
      mutable_scrr3x5()->::natashapb::StaticCascadingRandomResult3X5::MergeFrom(from.scrr3x5());
      break;
    }
    case kNrrr3X5: {
      mutable_nrrr3x5()->::natashapb::NormalReelsRandomResult3X5::MergeFrom(from.nrrr3x5());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.RandomResult)
}

void RandomResult::SharedCtor() {
  info_ = NULL;
  clear_has_result();
  _cached_size_ = 0;
}

RandomResult::~RandomResult() {
  // @@protoc_insertion_point(destructor:natashapb.RandomResult)
  SharedDtor();
}

void RandomResult::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
  if (has_result()) {
    clear_result();
  }
}

void RandomResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandomResult::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RandomResult& RandomResult::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsRandomResult();
  return *internal_default_instance();
}


void RandomResult::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:natashapb.RandomResult)
  switch (result_case()) {
    case kScrr3X5: {
      delete result_.scrr3x5_;
      break;
    }
    case kNrrr3X5: {
      delete result_.nrrr3x5_;
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void RandomResult::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.RandomResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && info_ != NULL) {
    delete info_;
  }
  info_ = NULL;
  clear_result();
  _internal_metadata_.Clear();
}

bool RandomResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.RandomResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.StaticCascadingRandomResult3X5 scrr3x5 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scrr3x5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.NormalReelsRandomResult3X5 nrrr3X5 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_nrrr3x5()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any info = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.RandomResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.RandomResult)
  return false;
#undef DO_
}

void RandomResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.RandomResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.StaticCascadingRandomResult3X5 scrr3x5 = 1;
  if (has_scrr3x5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *result_.scrr3x5_, output);
  }

  // .natashapb.NormalReelsRandomResult3X5 nrrr3X5 = 2;
  if (has_nrrr3x5()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *result_.nrrr3x5_, output);
  }

  // .google.protobuf.Any info = 1000;
  if (this->has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *info_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.RandomResult)
}

::google::protobuf::uint8* RandomResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.RandomResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.StaticCascadingRandomResult3X5 scrr3x5 = 1;
  if (has_scrr3x5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *result_.scrr3x5_, deterministic, target);
  }

  // .natashapb.NormalReelsRandomResult3X5 nrrr3X5 = 2;
  if (has_nrrr3x5()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *result_.nrrr3x5_, deterministic, target);
  }

  // .google.protobuf.Any info = 1000;
  if (this->has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *info_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.RandomResult)
  return target;
}

size_t RandomResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.RandomResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Any info = 1000;
  if (this->has_info()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *info_);
  }

  switch (result_case()) {
    // .natashapb.StaticCascadingRandomResult3X5 scrr3x5 = 1;
    case kScrr3X5: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.scrr3x5_);
      break;
    }
    // .natashapb.NormalReelsRandomResult3X5 nrrr3X5 = 2;
    case kNrrr3X5: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *result_.nrrr3x5_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandomResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.RandomResult)
  GOOGLE_DCHECK_NE(&from, this);
  const RandomResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RandomResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.RandomResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.RandomResult)
    MergeFrom(*source);
  }
}

void RandomResult::MergeFrom(const RandomResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.RandomResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_info()) {
    mutable_info()->::google::protobuf::Any::MergeFrom(from.info());
  }
  switch (from.result_case()) {
    case kScrr3X5: {
      mutable_scrr3x5()->::natashapb::StaticCascadingRandomResult3X5::MergeFrom(from.scrr3x5());
      break;
    }
    case kNrrr3X5: {
      mutable_nrrr3x5()->::natashapb::NormalReelsRandomResult3X5::MergeFrom(from.nrrr3x5());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void RandomResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.RandomResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandomResult::CopyFrom(const RandomResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.RandomResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandomResult::IsInitialized() const {
  return true;
}

void RandomResult::Swap(RandomResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RandomResult::InternalSwap(RandomResult* other) {
  using std::swap;
  swap(info_, other->info_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RandomResult::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Position2D::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position2D::kXFieldNumber;
const int Position2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position2D::Position2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsPosition2D();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.Position2D)
}
Position2D::Position2D(const Position2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:natashapb.Position2D)
}

void Position2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

Position2D::~Position2D() {
  // @@protoc_insertion_point(destructor:natashapb.Position2D)
  SharedDtor();
}

void Position2D::SharedDtor() {
}

void Position2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position2D::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position2D& Position2D::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsPosition2D();
  return *internal_default_instance();
}


void Position2D::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.Position2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool Position2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.Position2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.Position2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.Position2D)
  return false;
#undef DO_
}

void Position2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.Position2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.Position2D)
}

::google::protobuf::uint8* Position2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.Position2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.Position2D)
  return target;
}

size_t Position2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.Position2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.Position2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Position2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.Position2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.Position2D)
    MergeFrom(*source);
  }
}

void Position2D::MergeFrom(const Position2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.Position2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void Position2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.Position2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position2D::CopyFrom(const Position2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.Position2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position2D::IsInitialized() const {
  return true;
}

void Position2D::Swap(Position2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position2D::InternalSwap(Position2D* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Position2D::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameResultInfo::InitAsDefaultInstance() {
  ::natashapb::_GameResultInfo_default_instance_._instance.get_mutable()->exdat_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void GameResultInfo::clear_exdat() {
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameResultInfo::kTypeGameResultFieldNumber;
const int GameResultInfo::kLstPosFieldNumber;
const int GameResultInfo::kSymbolFieldNumber;
const int GameResultInfo::kLstSymbolFieldNumber;
const int GameResultInfo::kWinFieldNumber;
const int GameResultInfo::kRealWinFieldNumber;
const int GameResultInfo::kMulFieldNumber;
const int GameResultInfo::kPrizeFieldNumber;
const int GameResultInfo::kLineIndexFieldNumber;
const int GameResultInfo::kExDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameResultInfo::GameResultInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameResultInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameResultInfo)
}
GameResultInfo::GameResultInfo(const GameResultInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lstpos_(from.lstpos_),
      lstsymbol_(from.lstsymbol_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_exdat()) {
    exdat_ = new ::google::protobuf::Any(*from.exdat_);
  } else {
    exdat_ = NULL;
  }
  ::memcpy(&typegameresult_, &from.typegameresult_,
    static_cast<size_t>(reinterpret_cast<char*>(&lineindex_) -
    reinterpret_cast<char*>(&typegameresult_)) + sizeof(lineindex_));
  // @@protoc_insertion_point(copy_constructor:natashapb.GameResultInfo)
}

void GameResultInfo::SharedCtor() {
  ::memset(&exdat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lineindex_) -
      reinterpret_cast<char*>(&exdat_)) + sizeof(lineindex_));
  _cached_size_ = 0;
}

GameResultInfo::~GameResultInfo() {
  // @@protoc_insertion_point(destructor:natashapb.GameResultInfo)
  SharedDtor();
}

void GameResultInfo::SharedDtor() {
  if (this != internal_default_instance()) delete exdat_;
}

void GameResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameResultInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameResultInfo& GameResultInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameResultInfo();
  return *internal_default_instance();
}


void GameResultInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lstpos_.Clear();
  lstsymbol_.Clear();
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
  ::memset(&typegameresult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lineindex_) -
      reinterpret_cast<char*>(&typegameresult_)) + sizeof(lineindex_));
  _internal_metadata_.Clear();
}

bool GameResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameResultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.GAMERESULTTYPE typeGameResult = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_typegameresult(static_cast< ::natashapb::GAMERESULTTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .natashapb.Position2D lstPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lstpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 symbol = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symbol_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 lstSymbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lstsymbol())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34u, input, this->mutable_lstsymbol())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 win = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realWin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mul = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 prize = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lineIndex = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lineindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any exDat = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameResultInfo)
  return false;
#undef DO_
}

void GameResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.GAMERESULTTYPE typeGameResult = 1;
  if (this->typegameresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->typegameresult(), output);
  }

  // repeated .natashapb.Position2D lstPos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lstpos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->lstpos(static_cast<int>(i)),
      output);
  }

  // int32 symbol = 3;
  if (this->symbol() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->symbol(), output);
  }

  // repeated int32 lstSymbol = 4;
  if (this->lstsymbol_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lstsymbol_cached_byte_size_));
  }
  for (int i = 0, n = this->lstsymbol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->lstsymbol(i), output);
  }

  // int64 win = 5;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->win(), output);
  }

  // int64 realWin = 6;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->realwin(), output);
  }

  // int64 mul = 7;
  if (this->mul() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->mul(), output);
  }

  // int64 prize = 8;
  if (this->prize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->prize(), output);
  }

  // int32 lineIndex = 9;
  if (this->lineindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lineindex(), output);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *exdat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameResultInfo)
}

::google::protobuf::uint8* GameResultInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameResultInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.GAMERESULTTYPE typeGameResult = 1;
  if (this->typegameresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->typegameresult(), target);
  }

  // repeated .natashapb.Position2D lstPos = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lstpos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->lstpos(static_cast<int>(i)), deterministic, target);
  }

  // int32 symbol = 3;
  if (this->symbol() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->symbol(), target);
  }

  // repeated int32 lstSymbol = 4;
  if (this->lstsymbol_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _lstsymbol_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->lstsymbol_, target);
  }

  // int64 win = 5;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->win(), target);
  }

  // int64 realWin = 6;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->realwin(), target);
  }

  // int64 mul = 7;
  if (this->mul() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->mul(), target);
  }

  // int64 prize = 8;
  if (this->prize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->prize(), target);
  }

  // int32 lineIndex = 9;
  if (this->lineindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lineindex(), target);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *exdat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameResultInfo)
  return target;
}

size_t GameResultInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameResultInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.Position2D lstPos = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->lstpos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lstpos(static_cast<int>(i)));
    }
  }

  // repeated int32 lstSymbol = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->lstsymbol_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lstsymbol_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exdat_);
  }

  // .natashapb.GAMERESULTTYPE typeGameResult = 1;
  if (this->typegameresult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->typegameresult());
  }

  // int32 symbol = 3;
  if (this->symbol() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->symbol());
  }

  // int64 win = 5;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->win());
  }

  // int64 realWin = 6;
  if (this->realwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  // int64 mul = 7;
  if (this->mul() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mul());
  }

  // int64 prize = 8;
  if (this->prize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->prize());
  }

  // int32 lineIndex = 9;
  if (this->lineindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lineindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResultInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameResultInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameResultInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameResultInfo)
    MergeFrom(*source);
  }
}

void GameResultInfo::MergeFrom(const GameResultInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameResultInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lstpos_.MergeFrom(from.lstpos_);
  lstsymbol_.MergeFrom(from.lstsymbol_);
  if (from.has_exdat()) {
    mutable_exdat()->::google::protobuf::Any::MergeFrom(from.exdat());
  }
  if (from.typegameresult() != 0) {
    set_typegameresult(from.typegameresult());
  }
  if (from.symbol() != 0) {
    set_symbol(from.symbol());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
  if (from.mul() != 0) {
    set_mul(from.mul());
  }
  if (from.prize() != 0) {
    set_prize(from.prize());
  }
  if (from.lineindex() != 0) {
    set_lineindex(from.lineindex());
  }
}

void GameResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResultInfo::CopyFrom(const GameResultInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameResultInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResultInfo::IsInitialized() const {
  return true;
}

void GameResultInfo::Swap(GameResultInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameResultInfo::InternalSwap(GameResultInfo* other) {
  using std::swap;
  CastToBase(&lstpos_)->InternalSwap(CastToBase(&other->lstpos_));
  lstsymbol_.InternalSwap(&other->lstsymbol_);
  swap(exdat_, other->exdat_);
  swap(typegameresult_, other->typegameresult_);
  swap(symbol_, other->symbol_);
  swap(win_, other->win_);
  swap(realwin_, other->realwin_);
  swap(mul_, other->mul_);
  swap(prize_, other->prize_);
  swap(lineindex_, other->lineindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameResultInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpinResult::InitAsDefaultInstance() {
  ::natashapb::_SpinResult_default_instance_._instance.get_mutable()->symbolblock_ = const_cast< ::natashapb::SymbolBlock*>(
      ::natashapb::SymbolBlock::internal_default_instance());
  ::natashapb::_SpinResult_default_instance_._instance.get_mutable()->spin_ = const_cast< ::natashapb::GameCtrlSpin*>(
      ::natashapb::GameCtrlSpin::internal_default_instance());
  ::natashapb::_SpinResult_default_instance_._instance.get_mutable()->exdat_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void SpinResult::clear_exdat() {
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpinResult::kWinFieldNumber;
const int SpinResult::kRealWinFieldNumber;
const int SpinResult::kLstGRIFieldNumber;
const int SpinResult::kFgNumsFieldNumber;
const int SpinResult::kInFGFieldNumber;
const int SpinResult::kInBonusFieldNumber;
const int SpinResult::kInJackpotFieldNumber;
const int SpinResult::kInCommonJackpotFieldNumber;
const int SpinResult::kInRespinFieldNumber;
const int SpinResult::kAwardMulFieldNumber;
const int SpinResult::kRealFGNumsFieldNumber;
const int SpinResult::kSpecialTriggeredFieldNumber;
const int SpinResult::kSymbolblockFieldNumber;
const int SpinResult::kSpinFieldNumber;
const int SpinResult::kExDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpinResult::SpinResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSpinResult();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SpinResult)
}
SpinResult::SpinResult(const SpinResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lstgri_(from.lstgri_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbolblock()) {
    symbolblock_ = new ::natashapb::SymbolBlock(*from.symbolblock_);
  } else {
    symbolblock_ = NULL;
  }
  if (from.has_spin()) {
    spin_ = new ::natashapb::GameCtrlSpin(*from.spin_);
  } else {
    spin_ = NULL;
  }
  if (from.has_exdat()) {
    exdat_ = new ::google::protobuf::Any(*from.exdat_);
  } else {
    exdat_ = NULL;
  }
  ::memcpy(&win_, &from.win_,
    static_cast<size_t>(reinterpret_cast<char*>(&specialtriggered_) -
    reinterpret_cast<char*>(&win_)) + sizeof(specialtriggered_));
  // @@protoc_insertion_point(copy_constructor:natashapb.SpinResult)
}

void SpinResult::SharedCtor() {
  ::memset(&symbolblock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&specialtriggered_) -
      reinterpret_cast<char*>(&symbolblock_)) + sizeof(specialtriggered_));
  _cached_size_ = 0;
}

SpinResult::~SpinResult() {
  // @@protoc_insertion_point(destructor:natashapb.SpinResult)
  SharedDtor();
}

void SpinResult::SharedDtor() {
  if (this != internal_default_instance()) delete symbolblock_;
  if (this != internal_default_instance()) delete spin_;
  if (this != internal_default_instance()) delete exdat_;
}

void SpinResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpinResult::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpinResult& SpinResult::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSpinResult();
  return *internal_default_instance();
}


void SpinResult::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SpinResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lstgri_.Clear();
  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
  if (GetArenaNoVirtual() == NULL && spin_ != NULL) {
    delete spin_;
  }
  spin_ = NULL;
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
  ::memset(&win_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&specialtriggered_) -
      reinterpret_cast<char*>(&win_)) + sizeof(specialtriggered_));
  _internal_metadata_.Clear();
}

bool SpinResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SpinResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 win = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realWin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .natashapb.GameResultInfo lstGRI = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lstgri()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fgNums = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fgnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inFG = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inBonus = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inbonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inJackpot = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &injackpot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inCommonJackpot = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incommonjackpot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool inRespin = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inrespin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 awardMul = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &awardmul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 realFGNums = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realfgnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 specialTriggered = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialtriggered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.SymbolBlock symbolblock = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbolblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlSpin spin = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any exDat = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SpinResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SpinResult)
  return false;
#undef DO_
}

void SpinResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SpinResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 win = 1;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->win(), output);
  }

  // int64 realWin = 2;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->realwin(), output);
  }

  // repeated .natashapb.GameResultInfo lstGRI = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lstgri_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->lstgri(static_cast<int>(i)),
      output);
  }

  // int32 fgNums = 4;
  if (this->fgnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fgnums(), output);
  }

  // bool inFG = 5;
  if (this->infg() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->infg(), output);
  }

  // bool inBonus = 6;
  if (this->inbonus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->inbonus(), output);
  }

  // bool inJackpot = 7;
  if (this->injackpot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->injackpot(), output);
  }

  // bool inCommonJackpot = 8;
  if (this->incommonjackpot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->incommonjackpot(), output);
  }

  // bool inRespin = 9;
  if (this->inrespin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->inrespin(), output);
  }

  // int64 awardMul = 10;
  if (this->awardmul() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->awardmul(), output);
  }

  // int32 realFGNums = 11;
  if (this->realfgnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->realfgnums(), output);
  }

  // int32 specialTriggered = 12;
  if (this->specialtriggered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->specialtriggered(), output);
  }

  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *symbolblock_, output);
  }

  // .natashapb.GameCtrlSpin spin = 101;
  if (this->has_spin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101, *spin_, output);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *exdat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SpinResult)
}

::google::protobuf::uint8* SpinResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SpinResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 win = 1;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->win(), target);
  }

  // int64 realWin = 2;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->realwin(), target);
  }

  // repeated .natashapb.GameResultInfo lstGRI = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lstgri_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->lstgri(static_cast<int>(i)), deterministic, target);
  }

  // int32 fgNums = 4;
  if (this->fgnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fgnums(), target);
  }

  // bool inFG = 5;
  if (this->infg() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->infg(), target);
  }

  // bool inBonus = 6;
  if (this->inbonus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->inbonus(), target);
  }

  // bool inJackpot = 7;
  if (this->injackpot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->injackpot(), target);
  }

  // bool inCommonJackpot = 8;
  if (this->incommonjackpot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->incommonjackpot(), target);
  }

  // bool inRespin = 9;
  if (this->inrespin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->inrespin(), target);
  }

  // int64 awardMul = 10;
  if (this->awardmul() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->awardmul(), target);
  }

  // int32 realFGNums = 11;
  if (this->realfgnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->realfgnums(), target);
  }

  // int32 specialTriggered = 12;
  if (this->specialtriggered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->specialtriggered(), target);
  }

  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, *symbolblock_, deterministic, target);
  }

  // .natashapb.GameCtrlSpin spin = 101;
  if (this->has_spin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, *spin_, deterministic, target);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *exdat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SpinResult)
  return target;
}

size_t SpinResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SpinResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.GameResultInfo lstGRI = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->lstgri_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lstgri(static_cast<int>(i)));
    }
  }

  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbolblock_);
  }

  // .natashapb.GameCtrlSpin spin = 101;
  if (this->has_spin()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spin_);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exdat_);
  }

  // int64 win = 1;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->win());
  }

  // int64 realWin = 2;
  if (this->realwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  // int32 fgNums = 4;
  if (this->fgnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fgnums());
  }

  // bool inFG = 5;
  if (this->infg() != 0) {
    total_size += 1 + 1;
  }

  // bool inBonus = 6;
  if (this->inbonus() != 0) {
    total_size += 1 + 1;
  }

  // bool inJackpot = 7;
  if (this->injackpot() != 0) {
    total_size += 1 + 1;
  }

  // bool inCommonJackpot = 8;
  if (this->incommonjackpot() != 0) {
    total_size += 1 + 1;
  }

  // int64 awardMul = 10;
  if (this->awardmul() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->awardmul());
  }

  // bool inRespin = 9;
  if (this->inrespin() != 0) {
    total_size += 1 + 1;
  }

  // int32 realFGNums = 11;
  if (this->realfgnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->realfgnums());
  }

  // int32 specialTriggered = 12;
  if (this->specialtriggered() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->specialtriggered());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpinResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SpinResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SpinResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpinResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SpinResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SpinResult)
    MergeFrom(*source);
  }
}

void SpinResult::MergeFrom(const SpinResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SpinResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lstgri_.MergeFrom(from.lstgri_);
  if (from.has_symbolblock()) {
    mutable_symbolblock()->::natashapb::SymbolBlock::MergeFrom(from.symbolblock());
  }
  if (from.has_spin()) {
    mutable_spin()->::natashapb::GameCtrlSpin::MergeFrom(from.spin());
  }
  if (from.has_exdat()) {
    mutable_exdat()->::google::protobuf::Any::MergeFrom(from.exdat());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
  if (from.fgnums() != 0) {
    set_fgnums(from.fgnums());
  }
  if (from.infg() != 0) {
    set_infg(from.infg());
  }
  if (from.inbonus() != 0) {
    set_inbonus(from.inbonus());
  }
  if (from.injackpot() != 0) {
    set_injackpot(from.injackpot());
  }
  if (from.incommonjackpot() != 0) {
    set_incommonjackpot(from.incommonjackpot());
  }
  if (from.awardmul() != 0) {
    set_awardmul(from.awardmul());
  }
  if (from.inrespin() != 0) {
    set_inrespin(from.inrespin());
  }
  if (from.realfgnums() != 0) {
    set_realfgnums(from.realfgnums());
  }
  if (from.specialtriggered() != 0) {
    set_specialtriggered(from.specialtriggered());
  }
}

void SpinResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SpinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpinResult::CopyFrom(const SpinResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SpinResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpinResult::IsInitialized() const {
  return true;
}

void SpinResult::Swap(SpinResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpinResult::InternalSwap(SpinResult* other) {
  using std::swap;
  CastToBase(&lstgri_)->InternalSwap(CastToBase(&other->lstgri_));
  swap(symbolblock_, other->symbolblock_);
  swap(spin_, other->spin_);
  swap(exdat_, other->exdat_);
  swap(win_, other->win_);
  swap(realwin_, other->realwin_);
  swap(fgnums_, other->fgnums_);
  swap(infg_, other->infg_);
  swap(inbonus_, other->inbonus_);
  swap(injackpot_, other->injackpot_);
  swap(incommonjackpot_, other->incommonjackpot_);
  swap(awardmul_, other->awardmul_);
  swap(inrespin_, other->inrespin_);
  swap(realfgnums_, other->realfgnums_);
  swap(specialtriggered_, other->specialtriggered_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpinResult::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlID::kCtrlIDFieldNumber;
const int GameCtrlID::kBaseIDFieldNumber;
const int GameCtrlID::kParentIDFieldNumber;
const int GameCtrlID::kGameModFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlID::GameCtrlID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlID();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlID)
}
GameCtrlID::GameCtrlID(const GameCtrlID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ctrlid_, &from.ctrlid_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamemod_) -
    reinterpret_cast<char*>(&ctrlid_)) + sizeof(gamemod_));
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlID)
}

void GameCtrlID::SharedCtor() {
  ::memset(&ctrlid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamemod_) -
      reinterpret_cast<char*>(&ctrlid_)) + sizeof(gamemod_));
  _cached_size_ = 0;
}

GameCtrlID::~GameCtrlID() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlID)
  SharedDtor();
}

void GameCtrlID::SharedDtor() {
}

void GameCtrlID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlID::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlID& GameCtrlID::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlID();
  return *internal_default_instance();
}


void GameCtrlID::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ctrlid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamemod_) -
      reinterpret_cast<char*>(&ctrlid_)) + sizeof(gamemod_));
  _internal_metadata_.Clear();
}

bool GameCtrlID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ctrlID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctrlid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 baseID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &baseid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 parentID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &parentid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GAMEMODTYPE gameMod = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gamemod(static_cast< ::natashapb::GAMEMODTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlID)
  return false;
#undef DO_
}

void GameCtrlID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ctrlid(), output);
  }

  // int64 baseID = 2;
  if (this->baseid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->baseid(), output);
  }

  // int64 parentID = 3;
  if (this->parentid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->parentid(), output);
  }

  // .natashapb.GAMEMODTYPE gameMod = 4;
  if (this->gamemod() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gamemod(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlID)
}

::google::protobuf::uint8* GameCtrlID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ctrlid(), target);
  }

  // int64 baseID = 2;
  if (this->baseid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->baseid(), target);
  }

  // int64 parentID = 3;
  if (this->parentid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->parentid(), target);
  }

  // .natashapb.GAMEMODTYPE gameMod = 4;
  if (this->gamemod() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gamemod(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlID)
  return target;
}

size_t GameCtrlID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ctrlid());
  }

  // int64 baseID = 2;
  if (this->baseid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->baseid());
  }

  // int64 parentID = 3;
  if (this->parentid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->parentid());
  }

  // .natashapb.GAMEMODTYPE gameMod = 4;
  if (this->gamemod() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gamemod());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlID)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlID)
    MergeFrom(*source);
  }
}

void GameCtrlID::MergeFrom(const GameCtrlID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctrlid() != 0) {
    set_ctrlid(from.ctrlid());
  }
  if (from.baseid() != 0) {
    set_baseid(from.baseid());
  }
  if (from.parentid() != 0) {
    set_parentid(from.parentid());
  }
  if (from.gamemod() != 0) {
    set_gamemod(from.gamemod());
  }
}

void GameCtrlID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlID::CopyFrom(const GameCtrlID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlID::IsInitialized() const {
  return true;
}

void GameCtrlID::Swap(GameCtrlID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlID::InternalSwap(GameCtrlID* other) {
  using std::swap;
  swap(ctrlid_, other->ctrlid_);
  swap(baseid_, other->baseid_);
  swap(parentid_, other->parentid_);
  swap(gamemod_, other->gamemod_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlID::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BaseCascadingInfo::InitAsDefaultInstance() {
  ::natashapb::_BaseCascadingInfo_default_instance_._instance.get_mutable()->symbolblock_ = const_cast< ::natashapb::SymbolBlock*>(
      ::natashapb::SymbolBlock::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseCascadingInfo::kCurBetFieldNumber;
const int BaseCascadingInfo::kCurLinesFieldNumber;
const int BaseCascadingInfo::kCurTimesFieldNumber;
const int BaseCascadingInfo::kTurnNumsFieldNumber;
const int BaseCascadingInfo::kTurnWinFieldNumber;
const int BaseCascadingInfo::kFreeStateFieldNumber;
const int BaseCascadingInfo::kIsEndFieldNumber;
const int BaseCascadingInfo::kSymbolblockFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseCascadingInfo::BaseCascadingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsBaseCascadingInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.BaseCascadingInfo)
}
BaseCascadingInfo::BaseCascadingInfo(const BaseCascadingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_symbolblock()) {
    symbolblock_ = new ::natashapb::SymbolBlock(*from.symbolblock_);
  } else {
    symbolblock_ = NULL;
  }
  ::memcpy(&curbet_, &from.curbet_,
    static_cast<size_t>(reinterpret_cast<char*>(&isend_) -
    reinterpret_cast<char*>(&curbet_)) + sizeof(isend_));
  // @@protoc_insertion_point(copy_constructor:natashapb.BaseCascadingInfo)
}

void BaseCascadingInfo::SharedCtor() {
  ::memset(&symbolblock_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isend_) -
      reinterpret_cast<char*>(&symbolblock_)) + sizeof(isend_));
  _cached_size_ = 0;
}

BaseCascadingInfo::~BaseCascadingInfo() {
  // @@protoc_insertion_point(destructor:natashapb.BaseCascadingInfo)
  SharedDtor();
}

void BaseCascadingInfo::SharedDtor() {
  if (this != internal_default_instance()) delete symbolblock_;
}

void BaseCascadingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseCascadingInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseCascadingInfo& BaseCascadingInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsBaseCascadingInfo();
  return *internal_default_instance();
}


void BaseCascadingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.BaseCascadingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
  ::memset(&curbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isend_) -
      reinterpret_cast<char*>(&curbet_)) + sizeof(isend_));
  _internal_metadata_.Clear();
}

bool BaseCascadingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.BaseCascadingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 curBet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curLines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curTimes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 turnNums = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turnnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 turnWin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &turnwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.CASCADINGFREESTATE freeState = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_freestate(static_cast< ::natashapb::CASCADINGFREESTATE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isEnd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.SymbolBlock symbolblock = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbolblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.BaseCascadingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.BaseCascadingInfo)
  return false;
#undef DO_
}

void BaseCascadingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.BaseCascadingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 curBet = 1;
  if (this->curbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->curbet(), output);
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curlines(), output);
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curtimes(), output);
  }

  // int32 turnNums = 4;
  if (this->turnnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->turnnums(), output);
  }

  // int64 turnWin = 5;
  if (this->turnwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->turnwin(), output);
  }

  // .natashapb.CASCADINGFREESTATE freeState = 6;
  if (this->freestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->freestate(), output);
  }

  // bool isEnd = 7;
  if (this->isend() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isend(), output);
  }

  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *symbolblock_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.BaseCascadingInfo)
}

::google::protobuf::uint8* BaseCascadingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.BaseCascadingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 curBet = 1;
  if (this->curbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->curbet(), target);
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curlines(), target);
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curtimes(), target);
  }

  // int32 turnNums = 4;
  if (this->turnnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->turnnums(), target);
  }

  // int64 turnWin = 5;
  if (this->turnwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->turnwin(), target);
  }

  // .natashapb.CASCADINGFREESTATE freeState = 6;
  if (this->freestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->freestate(), target);
  }

  // bool isEnd = 7;
  if (this->isend() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isend(), target);
  }

  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, *symbolblock_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.BaseCascadingInfo)
  return target;
}

size_t BaseCascadingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.BaseCascadingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbolblock_);
  }

  // int64 curBet = 1;
  if (this->curbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curbet());
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curlines());
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curtimes());
  }

  // int64 turnWin = 5;
  if (this->turnwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->turnwin());
  }

  // int32 turnNums = 4;
  if (this->turnnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->turnnums());
  }

  // .natashapb.CASCADINGFREESTATE freeState = 6;
  if (this->freestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->freestate());
  }

  // bool isEnd = 7;
  if (this->isend() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseCascadingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.BaseCascadingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseCascadingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseCascadingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.BaseCascadingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.BaseCascadingInfo)
    MergeFrom(*source);
  }
}

void BaseCascadingInfo::MergeFrom(const BaseCascadingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.BaseCascadingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_symbolblock()) {
    mutable_symbolblock()->::natashapb::SymbolBlock::MergeFrom(from.symbolblock());
  }
  if (from.curbet() != 0) {
    set_curbet(from.curbet());
  }
  if (from.curlines() != 0) {
    set_curlines(from.curlines());
  }
  if (from.curtimes() != 0) {
    set_curtimes(from.curtimes());
  }
  if (from.turnwin() != 0) {
    set_turnwin(from.turnwin());
  }
  if (from.turnnums() != 0) {
    set_turnnums(from.turnnums());
  }
  if (from.freestate() != 0) {
    set_freestate(from.freestate());
  }
  if (from.isend() != 0) {
    set_isend(from.isend());
  }
}

void BaseCascadingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.BaseCascadingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseCascadingInfo::CopyFrom(const BaseCascadingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.BaseCascadingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseCascadingInfo::IsInitialized() const {
  return true;
}

void BaseCascadingInfo::Swap(BaseCascadingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseCascadingInfo::InternalSwap(BaseCascadingInfo* other) {
  using std::swap;
  swap(symbolblock_, other->symbolblock_);
  swap(curbet_, other->curbet_);
  swap(curlines_, other->curlines_);
  swap(curtimes_, other->curtimes_);
  swap(turnwin_, other->turnwin_);
  swap(turnnums_, other->turnnums_);
  swap(freestate_, other->freestate_);
  swap(isend_, other->isend_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseCascadingInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FGCache::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FGCache::kFgNumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FGCache::FGCache()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsFGCache();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.FGCache)
}
FGCache::FGCache(const FGCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fgnums_ = from.fgnums_;
  // @@protoc_insertion_point(copy_constructor:natashapb.FGCache)
}

void FGCache::SharedCtor() {
  fgnums_ = 0;
  _cached_size_ = 0;
}

FGCache::~FGCache() {
  // @@protoc_insertion_point(destructor:natashapb.FGCache)
  SharedDtor();
}

void FGCache::SharedDtor() {
}

void FGCache::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FGCache::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FGCache& FGCache::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsFGCache();
  return *internal_default_instance();
}


void FGCache::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.FGCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fgnums_ = 0;
  _internal_metadata_.Clear();
}

bool FGCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.FGCache)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 fgNums = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fgnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.FGCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.FGCache)
  return false;
#undef DO_
}

void FGCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.FGCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fgNums = 1;
  if (this->fgnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fgnums(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.FGCache)
}

::google::protobuf::uint8* FGCache::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.FGCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 fgNums = 1;
  if (this->fgnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fgnums(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.FGCache)
  return target;
}

size_t FGCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.FGCache)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 fgNums = 1;
  if (this->fgnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fgnums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FGCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.FGCache)
  GOOGLE_DCHECK_NE(&from, this);
  const FGCache* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FGCache>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.FGCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.FGCache)
    MergeFrom(*source);
  }
}

void FGCache::MergeFrom(const FGCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.FGCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.fgnums() != 0) {
    set_fgnums(from.fgnums());
  }
}

void FGCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.FGCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FGCache::CopyFrom(const FGCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.FGCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FGCache::IsInitialized() const {
  return true;
}

void FGCache::Swap(FGCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FGCache::InternalSwap(FGCache* other) {
  using std::swap;
  swap(fgnums_, other->fgnums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FGCache::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BaseFreeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseFreeInfo::kCurBetFieldNumber;
const int BaseFreeInfo::kCurLinesFieldNumber;
const int BaseFreeInfo::kCurTimesFieldNumber;
const int BaseFreeInfo::kTotalWinFieldNumber;
const int BaseFreeInfo::kLastNumsFieldNumber;
const int BaseFreeInfo::kCurNumsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseFreeInfo::BaseFreeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsBaseFreeInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.BaseFreeInfo)
}
BaseFreeInfo::BaseFreeInfo(const BaseFreeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&curbet_, &from.curbet_,
    static_cast<size_t>(reinterpret_cast<char*>(&curnums_) -
    reinterpret_cast<char*>(&curbet_)) + sizeof(curnums_));
  // @@protoc_insertion_point(copy_constructor:natashapb.BaseFreeInfo)
}

void BaseFreeInfo::SharedCtor() {
  ::memset(&curbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curnums_) -
      reinterpret_cast<char*>(&curbet_)) + sizeof(curnums_));
  _cached_size_ = 0;
}

BaseFreeInfo::~BaseFreeInfo() {
  // @@protoc_insertion_point(destructor:natashapb.BaseFreeInfo)
  SharedDtor();
}

void BaseFreeInfo::SharedDtor() {
}

void BaseFreeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseFreeInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BaseFreeInfo& BaseFreeInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsBaseFreeInfo();
  return *internal_default_instance();
}


void BaseFreeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.BaseFreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&curbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curnums_) -
      reinterpret_cast<char*>(&curbet_)) + sizeof(curnums_));
  _internal_metadata_.Clear();
}

bool BaseFreeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.BaseFreeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 curBet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curLines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curlines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curTimes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtimes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalWin = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lastNums = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 curNums = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.BaseFreeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.BaseFreeInfo)
  return false;
#undef DO_
}

void BaseFreeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.BaseFreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 curBet = 1;
  if (this->curbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->curbet(), output);
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curlines(), output);
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curtimes(), output);
  }

  // int64 totalWin = 4;
  if (this->totalwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->totalwin(), output);
  }

  // int32 lastNums = 5;
  if (this->lastnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastnums(), output);
  }

  // int32 curNums = 6;
  if (this->curnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curnums(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.BaseFreeInfo)
}

::google::protobuf::uint8* BaseFreeInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.BaseFreeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 curBet = 1;
  if (this->curbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->curbet(), target);
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curlines(), target);
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curtimes(), target);
  }

  // int64 totalWin = 4;
  if (this->totalwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->totalwin(), target);
  }

  // int32 lastNums = 5;
  if (this->lastnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastnums(), target);
  }

  // int32 curNums = 6;
  if (this->curnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curnums(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.BaseFreeInfo)
  return target;
}

size_t BaseFreeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.BaseFreeInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 curBet = 1;
  if (this->curbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curbet());
  }

  // int32 curLines = 2;
  if (this->curlines() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curlines());
  }

  // int32 curTimes = 3;
  if (this->curtimes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curtimes());
  }

  // int64 totalWin = 4;
  if (this->totalwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalwin());
  }

  // int32 lastNums = 5;
  if (this->lastnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lastnums());
  }

  // int32 curNums = 6;
  if (this->curnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->curnums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseFreeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.BaseFreeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseFreeInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseFreeInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.BaseFreeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.BaseFreeInfo)
    MergeFrom(*source);
  }
}

void BaseFreeInfo::MergeFrom(const BaseFreeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.BaseFreeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.curbet() != 0) {
    set_curbet(from.curbet());
  }
  if (from.curlines() != 0) {
    set_curlines(from.curlines());
  }
  if (from.curtimes() != 0) {
    set_curtimes(from.curtimes());
  }
  if (from.totalwin() != 0) {
    set_totalwin(from.totalwin());
  }
  if (from.lastnums() != 0) {
    set_lastnums(from.lastnums());
  }
  if (from.curnums() != 0) {
    set_curnums(from.curnums());
  }
}

void BaseFreeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.BaseFreeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseFreeInfo::CopyFrom(const BaseFreeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.BaseFreeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseFreeInfo::IsInitialized() const {
  return true;
}

void BaseFreeInfo::Swap(BaseFreeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseFreeInfo::InternalSwap(BaseFreeInfo* other) {
  using std::swap;
  swap(curbet_, other->curbet_);
  swap(curlines_, other->curlines_);
  swap(curtimes_, other->curtimes_);
  swap(totalwin_, other->totalwin_);
  swap(lastnums_, other->lastnums_);
  swap(curnums_, other->curnums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseFreeInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespinHistory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespinHistory::kRealWinFieldNumber;
const int RespinHistory::kWinFieldNumber;
const int RespinHistory::kMulFieldNumber;
const int RespinHistory::kIsSpecialFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespinHistory::RespinHistory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsRespinHistory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.RespinHistory)
}
RespinHistory::RespinHistory(const RespinHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&realwin_, &from.realwin_,
    static_cast<size_t>(reinterpret_cast<char*>(&isspecial_) -
    reinterpret_cast<char*>(&realwin_)) + sizeof(isspecial_));
  // @@protoc_insertion_point(copy_constructor:natashapb.RespinHistory)
}

void RespinHistory::SharedCtor() {
  ::memset(&realwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isspecial_) -
      reinterpret_cast<char*>(&realwin_)) + sizeof(isspecial_));
  _cached_size_ = 0;
}

RespinHistory::~RespinHistory() {
  // @@protoc_insertion_point(destructor:natashapb.RespinHistory)
  SharedDtor();
}

void RespinHistory::SharedDtor() {
}

void RespinHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespinHistory::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespinHistory& RespinHistory::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsRespinHistory();
  return *internal_default_instance();
}


void RespinHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.RespinHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&realwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isspecial_) -
      reinterpret_cast<char*>(&realwin_)) + sizeof(isspecial_));
  _internal_metadata_.Clear();
}

bool RespinHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.RespinHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 realWin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 win = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &win_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 mul = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mul_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isSpecial = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isspecial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.RespinHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.RespinHistory)
  return false;
#undef DO_
}

void RespinHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.RespinHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 realWin = 1;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->realwin(), output);
  }

  // int64 win = 2;
  if (this->win() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->win(), output);
  }

  // int64 mul = 3;
  if (this->mul() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mul(), output);
  }

  // bool isSpecial = 4;
  if (this->isspecial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isspecial(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.RespinHistory)
}

::google::protobuf::uint8* RespinHistory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.RespinHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 realWin = 1;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->realwin(), target);
  }

  // int64 win = 2;
  if (this->win() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->win(), target);
  }

  // int64 mul = 3;
  if (this->mul() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mul(), target);
  }

  // bool isSpecial = 4;
  if (this->isspecial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isspecial(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.RespinHistory)
  return target;
}

size_t RespinHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.RespinHistory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 realWin = 1;
  if (this->realwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  // int64 win = 2;
  if (this->win() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->win());
  }

  // int64 mul = 3;
  if (this->mul() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->mul());
  }

  // bool isSpecial = 4;
  if (this->isspecial() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespinHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.RespinHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const RespinHistory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespinHistory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.RespinHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.RespinHistory)
    MergeFrom(*source);
  }
}

void RespinHistory::MergeFrom(const RespinHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.RespinHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
  if (from.win() != 0) {
    set_win(from.win());
  }
  if (from.mul() != 0) {
    set_mul(from.mul());
  }
  if (from.isspecial() != 0) {
    set_isspecial(from.isspecial());
  }
}

void RespinHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.RespinHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespinHistory::CopyFrom(const RespinHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.RespinHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespinHistory::IsInitialized() const {
  return true;
}

void RespinHistory::Swap(RespinHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespinHistory::InternalSwap(RespinHistory* other) {
  using std::swap;
  swap(realwin_, other->realwin_);
  swap(win_, other->win_);
  swap(mul_, other->mul_);
  swap(isspecial_, other->isspecial_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespinHistory::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RespinHistoryList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespinHistoryList::kLstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespinHistoryList::RespinHistoryList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsRespinHistoryList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.RespinHistoryList)
}
RespinHistoryList::RespinHistoryList(const RespinHistoryList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lst_(from.lst_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:natashapb.RespinHistoryList)
}

void RespinHistoryList::SharedCtor() {
  _cached_size_ = 0;
}

RespinHistoryList::~RespinHistoryList() {
  // @@protoc_insertion_point(destructor:natashapb.RespinHistoryList)
  SharedDtor();
}

void RespinHistoryList::SharedDtor() {
}

void RespinHistoryList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespinHistoryList::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RespinHistoryList& RespinHistoryList::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsRespinHistoryList();
  return *internal_default_instance();
}


void RespinHistoryList::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.RespinHistoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lst_.Clear();
  _internal_metadata_.Clear();
}

bool RespinHistoryList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.RespinHistoryList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .natashapb.RespinHistory lst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.RespinHistoryList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.RespinHistoryList)
  return false;
#undef DO_
}

void RespinHistoryList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.RespinHistoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.RespinHistory lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lst_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lst(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.RespinHistoryList)
}

::google::protobuf::uint8* RespinHistoryList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.RespinHistoryList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.RespinHistory lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lst_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lst(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.RespinHistoryList)
  return target;
}

size_t RespinHistoryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.RespinHistoryList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.RespinHistory lst = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lst_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lst(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespinHistoryList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.RespinHistoryList)
  GOOGLE_DCHECK_NE(&from, this);
  const RespinHistoryList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RespinHistoryList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.RespinHistoryList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.RespinHistoryList)
    MergeFrom(*source);
  }
}

void RespinHistoryList::MergeFrom(const RespinHistoryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.RespinHistoryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lst_.MergeFrom(from.lst_);
}

void RespinHistoryList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.RespinHistoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespinHistoryList::CopyFrom(const RespinHistoryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.RespinHistoryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespinHistoryList::IsInitialized() const {
  return true;
}

void RespinHistoryList::Swap(RespinHistoryList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespinHistoryList::InternalSwap(RespinHistoryList* other) {
  using std::swap;
  CastToBase(&lst_)->InternalSwap(CastToBase(&other->lst_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RespinHistoryList::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserGameModInfo::InitAsDefaultInstance() {
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->randomresult_ = const_cast< ::natashapb::RandomResult*>(
      ::natashapb::RandomResult::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->spinresult_ = const_cast< ::natashapb::SpinResult*>(
      ::natashapb::SpinResult::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->gamectrlid_ = const_cast< ::natashapb::GameCtrlID*>(
      ::natashapb::GameCtrlID::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->cascadinginfo_ = const_cast< ::natashapb::BaseCascadingInfo*>(
      ::natashapb::BaseCascadingInfo::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->lsthistory_ = const_cast< ::natashapb::RespinHistoryList*>(
      ::natashapb::RespinHistoryList::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->freeinfo_ = const_cast< ::natashapb::BaseFreeInfo*>(
      ::natashapb::BaseFreeInfo::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->fgcache_ = const_cast< ::natashapb::FGCache*>(
      ::natashapb::FGCache::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->symbolblock_ = const_cast< ::natashapb::SymbolBlock*>(
      ::natashapb::SymbolBlock::internal_default_instance());
  ::natashapb::_UserGameModInfo_default_instance_._instance.get_mutable()->exdat_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void UserGameModInfo::clear_exdat() {
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameModInfo::kVerFieldNumber;
const int UserGameModInfo::kRandomResultFieldNumber;
const int UserGameModInfo::kSpinResultFieldNumber;
const int UserGameModInfo::kGameCtrlIDFieldNumber;
const int UserGameModInfo::kCascadingInfoFieldNumber;
const int UserGameModInfo::kLstHistoryFieldNumber;
const int UserGameModInfo::kFreeInfoFieldNumber;
const int UserGameModInfo::kFgCacheFieldNumber;
const int UserGameModInfo::kSymbolblockFieldNumber;
const int UserGameModInfo::kExDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameModInfo::UserGameModInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsUserGameModInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.UserGameModInfo)
}
UserGameModInfo::UserGameModInfo(const UserGameModInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_randomresult()) {
    randomresult_ = new ::natashapb::RandomResult(*from.randomresult_);
  } else {
    randomresult_ = NULL;
  }
  if (from.has_spinresult()) {
    spinresult_ = new ::natashapb::SpinResult(*from.spinresult_);
  } else {
    spinresult_ = NULL;
  }
  if (from.has_gamectrlid()) {
    gamectrlid_ = new ::natashapb::GameCtrlID(*from.gamectrlid_);
  } else {
    gamectrlid_ = NULL;
  }
  if (from.has_cascadinginfo()) {
    cascadinginfo_ = new ::natashapb::BaseCascadingInfo(*from.cascadinginfo_);
  } else {
    cascadinginfo_ = NULL;
  }
  if (from.has_lsthistory()) {
    lsthistory_ = new ::natashapb::RespinHistoryList(*from.lsthistory_);
  } else {
    lsthistory_ = NULL;
  }
  if (from.has_freeinfo()) {
    freeinfo_ = new ::natashapb::BaseFreeInfo(*from.freeinfo_);
  } else {
    freeinfo_ = NULL;
  }
  if (from.has_fgcache()) {
    fgcache_ = new ::natashapb::FGCache(*from.fgcache_);
  } else {
    fgcache_ = NULL;
  }
  if (from.has_symbolblock()) {
    symbolblock_ = new ::natashapb::SymbolBlock(*from.symbolblock_);
  } else {
    symbolblock_ = NULL;
  }
  if (from.has_exdat()) {
    exdat_ = new ::google::protobuf::Any(*from.exdat_);
  } else {
    exdat_ = NULL;
  }
  ver_ = from.ver_;
  // @@protoc_insertion_point(copy_constructor:natashapb.UserGameModInfo)
}

void UserGameModInfo::SharedCtor() {
  ::memset(&randomresult_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ver_) -
      reinterpret_cast<char*>(&randomresult_)) + sizeof(ver_));
  _cached_size_ = 0;
}

UserGameModInfo::~UserGameModInfo() {
  // @@protoc_insertion_point(destructor:natashapb.UserGameModInfo)
  SharedDtor();
}

void UserGameModInfo::SharedDtor() {
  if (this != internal_default_instance()) delete randomresult_;
  if (this != internal_default_instance()) delete spinresult_;
  if (this != internal_default_instance()) delete gamectrlid_;
  if (this != internal_default_instance()) delete cascadinginfo_;
  if (this != internal_default_instance()) delete lsthistory_;
  if (this != internal_default_instance()) delete freeinfo_;
  if (this != internal_default_instance()) delete fgcache_;
  if (this != internal_default_instance()) delete symbolblock_;
  if (this != internal_default_instance()) delete exdat_;
}

void UserGameModInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameModInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGameModInfo& UserGameModInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsUserGameModInfo();
  return *internal_default_instance();
}


void UserGameModInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.UserGameModInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && randomresult_ != NULL) {
    delete randomresult_;
  }
  randomresult_ = NULL;
  if (GetArenaNoVirtual() == NULL && spinresult_ != NULL) {
    delete spinresult_;
  }
  spinresult_ = NULL;
  if (GetArenaNoVirtual() == NULL && gamectrlid_ != NULL) {
    delete gamectrlid_;
  }
  gamectrlid_ = NULL;
  if (GetArenaNoVirtual() == NULL && cascadinginfo_ != NULL) {
    delete cascadinginfo_;
  }
  cascadinginfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && lsthistory_ != NULL) {
    delete lsthistory_;
  }
  lsthistory_ = NULL;
  if (GetArenaNoVirtual() == NULL && freeinfo_ != NULL) {
    delete freeinfo_;
  }
  freeinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && fgcache_ != NULL) {
    delete fgcache_;
  }
  fgcache_ = NULL;
  if (GetArenaNoVirtual() == NULL && symbolblock_ != NULL) {
    delete symbolblock_;
  }
  symbolblock_ = NULL;
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
  ver_ = 0;
  _internal_metadata_.Clear();
}

bool UserGameModInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.UserGameModInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ver = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.RandomResult randomResult = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_randomresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.SpinResult spinResult = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spinresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlID gameCtrlID = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_gamectrlid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.BaseCascadingInfo cascadingInfo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cascadinginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.RespinHistoryList lstHistory = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lsthistory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.BaseFreeInfo freeInfo = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.FGCache fgCache = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fgcache()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.SymbolBlock symbolblock = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_symbolblock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any exDat = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.UserGameModInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.UserGameModInfo)
  return false;
#undef DO_
}

void UserGameModInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.UserGameModInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ver = 1;
  if (this->ver() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ver(), output);
  }

  // .natashapb.RandomResult randomResult = 10;
  if (this->has_randomresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *randomresult_, output);
  }

  // .natashapb.SpinResult spinResult = 11;
  if (this->has_spinresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *spinresult_, output);
  }

  // .natashapb.GameCtrlID gameCtrlID = 12;
  if (this->has_gamectrlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *gamectrlid_, output);
  }

  // .natashapb.BaseCascadingInfo cascadingInfo = 13;
  if (this->has_cascadinginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *cascadinginfo_, output);
  }

  // .natashapb.RespinHistoryList lstHistory = 14;
  if (this->has_lsthistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *lsthistory_, output);
  }

  // .natashapb.BaseFreeInfo freeInfo = 15;
  if (this->has_freeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *freeinfo_, output);
  }

  // .natashapb.FGCache fgCache = 16;
  if (this->has_fgcache()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *fgcache_, output);
  }

  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *symbolblock_, output);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *exdat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.UserGameModInfo)
}

::google::protobuf::uint8* UserGameModInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.UserGameModInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ver = 1;
  if (this->ver() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ver(), target);
  }

  // .natashapb.RandomResult randomResult = 10;
  if (this->has_randomresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *randomresult_, deterministic, target);
  }

  // .natashapb.SpinResult spinResult = 11;
  if (this->has_spinresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *spinresult_, deterministic, target);
  }

  // .natashapb.GameCtrlID gameCtrlID = 12;
  if (this->has_gamectrlid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *gamectrlid_, deterministic, target);
  }

  // .natashapb.BaseCascadingInfo cascadingInfo = 13;
  if (this->has_cascadinginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *cascadinginfo_, deterministic, target);
  }

  // .natashapb.RespinHistoryList lstHistory = 14;
  if (this->has_lsthistory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *lsthistory_, deterministic, target);
  }

  // .natashapb.BaseFreeInfo freeInfo = 15;
  if (this->has_freeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *freeinfo_, deterministic, target);
  }

  // .natashapb.FGCache fgCache = 16;
  if (this->has_fgcache()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *fgcache_, deterministic, target);
  }

  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, *symbolblock_, deterministic, target);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *exdat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.UserGameModInfo)
  return target;
}

size_t UserGameModInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.UserGameModInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.RandomResult randomResult = 10;
  if (this->has_randomresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *randomresult_);
  }

  // .natashapb.SpinResult spinResult = 11;
  if (this->has_spinresult()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *spinresult_);
  }

  // .natashapb.GameCtrlID gameCtrlID = 12;
  if (this->has_gamectrlid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *gamectrlid_);
  }

  // .natashapb.BaseCascadingInfo cascadingInfo = 13;
  if (this->has_cascadinginfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *cascadinginfo_);
  }

  // .natashapb.RespinHistoryList lstHistory = 14;
  if (this->has_lsthistory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *lsthistory_);
  }

  // .natashapb.BaseFreeInfo freeInfo = 15;
  if (this->has_freeinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freeinfo_);
  }

  // .natashapb.FGCache fgCache = 16;
  if (this->has_fgcache()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *fgcache_);
  }

  // .natashapb.SymbolBlock symbolblock = 100;
  if (this->has_symbolblock()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *symbolblock_);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exdat_);
  }

  // int32 ver = 1;
  if (this->ver() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ver());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameModInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.UserGameModInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameModInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGameModInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.UserGameModInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.UserGameModInfo)
    MergeFrom(*source);
  }
}

void UserGameModInfo::MergeFrom(const UserGameModInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.UserGameModInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_randomresult()) {
    mutable_randomresult()->::natashapb::RandomResult::MergeFrom(from.randomresult());
  }
  if (from.has_spinresult()) {
    mutable_spinresult()->::natashapb::SpinResult::MergeFrom(from.spinresult());
  }
  if (from.has_gamectrlid()) {
    mutable_gamectrlid()->::natashapb::GameCtrlID::MergeFrom(from.gamectrlid());
  }
  if (from.has_cascadinginfo()) {
    mutable_cascadinginfo()->::natashapb::BaseCascadingInfo::MergeFrom(from.cascadinginfo());
  }
  if (from.has_lsthistory()) {
    mutable_lsthistory()->::natashapb::RespinHistoryList::MergeFrom(from.lsthistory());
  }
  if (from.has_freeinfo()) {
    mutable_freeinfo()->::natashapb::BaseFreeInfo::MergeFrom(from.freeinfo());
  }
  if (from.has_fgcache()) {
    mutable_fgcache()->::natashapb::FGCache::MergeFrom(from.fgcache());
  }
  if (from.has_symbolblock()) {
    mutable_symbolblock()->::natashapb::SymbolBlock::MergeFrom(from.symbolblock());
  }
  if (from.has_exdat()) {
    mutable_exdat()->::google::protobuf::Any::MergeFrom(from.exdat());
  }
  if (from.ver() != 0) {
    set_ver(from.ver());
  }
}

void UserGameModInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.UserGameModInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameModInfo::CopyFrom(const UserGameModInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.UserGameModInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameModInfo::IsInitialized() const {
  return true;
}

void UserGameModInfo::Swap(UserGameModInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameModInfo::InternalSwap(UserGameModInfo* other) {
  using std::swap;
  swap(randomresult_, other->randomresult_);
  swap(spinresult_, other->spinresult_);
  swap(gamectrlid_, other->gamectrlid_);
  swap(cascadinginfo_, other->cascadinginfo_);
  swap(lsthistory_, other->lsthistory_);
  swap(freeinfo_, other->freeinfo_);
  swap(fgcache_, other->fgcache_);
  swap(symbolblock_, other->symbolblock_);
  swap(exdat_, other->exdat_);
  swap(ver_, other->ver_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserGameModInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UserGameLogicInfo::InitAsDefaultInstance() {
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->basegame_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->freegame_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->bonus_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->jackpot_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->commonjackpot_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
  ::natashapb::_UserGameLogicInfo_default_instance_._instance.get_mutable()->respin_ = const_cast< ::natashapb::UserGameModInfo*>(
      ::natashapb::UserGameModInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserGameLogicInfo::kBasegameFieldNumber;
const int UserGameLogicInfo::kFreegameFieldNumber;
const int UserGameLogicInfo::kBonusFieldNumber;
const int UserGameLogicInfo::kJackpotFieldNumber;
const int UserGameLogicInfo::kCommonjackpotFieldNumber;
const int UserGameLogicInfo::kRespinFieldNumber;
const int UserGameLogicInfo::kIsCompletedFieldNumber;
const int UserGameLogicInfo::kCurBetFieldNumber;
const int UserGameLogicInfo::kRealWinFieldNumber;
const int UserGameLogicInfo::kConfigNameFieldNumber;
const int UserGameLogicInfo::kCurGameModTypeFieldNumber;
const int UserGameLogicInfo::kNextGameModTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserGameLogicInfo::UserGameLogicInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsUserGameLogicInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.UserGameLogicInfo)
}
UserGameLogicInfo::UserGameLogicInfo(const UserGameLogicInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  configname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.configname().size() > 0) {
    configname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configname_);
  }
  if (from.has_basegame()) {
    basegame_ = new ::natashapb::UserGameModInfo(*from.basegame_);
  } else {
    basegame_ = NULL;
  }
  if (from.has_freegame()) {
    freegame_ = new ::natashapb::UserGameModInfo(*from.freegame_);
  } else {
    freegame_ = NULL;
  }
  if (from.has_bonus()) {
    bonus_ = new ::natashapb::UserGameModInfo(*from.bonus_);
  } else {
    bonus_ = NULL;
  }
  if (from.has_jackpot()) {
    jackpot_ = new ::natashapb::UserGameModInfo(*from.jackpot_);
  } else {
    jackpot_ = NULL;
  }
  if (from.has_commonjackpot()) {
    commonjackpot_ = new ::natashapb::UserGameModInfo(*from.commonjackpot_);
  } else {
    commonjackpot_ = NULL;
  }
  if (from.has_respin()) {
    respin_ = new ::natashapb::UserGameModInfo(*from.respin_);
  } else {
    respin_ = NULL;
  }
  ::memcpy(&nextgamemodtype_, &from.nextgamemodtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&curgamemodtype_) -
    reinterpret_cast<char*>(&nextgamemodtype_)) + sizeof(curgamemodtype_));
  // @@protoc_insertion_point(copy_constructor:natashapb.UserGameLogicInfo)
}

void UserGameLogicInfo::SharedCtor() {
  configname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&basegame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curgamemodtype_) -
      reinterpret_cast<char*>(&basegame_)) + sizeof(curgamemodtype_));
  _cached_size_ = 0;
}

UserGameLogicInfo::~UserGameLogicInfo() {
  // @@protoc_insertion_point(destructor:natashapb.UserGameLogicInfo)
  SharedDtor();
}

void UserGameLogicInfo::SharedDtor() {
  configname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete basegame_;
  if (this != internal_default_instance()) delete freegame_;
  if (this != internal_default_instance()) delete bonus_;
  if (this != internal_default_instance()) delete jackpot_;
  if (this != internal_default_instance()) delete commonjackpot_;
  if (this != internal_default_instance()) delete respin_;
}

void UserGameLogicInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGameLogicInfo::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserGameLogicInfo& UserGameLogicInfo::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsUserGameLogicInfo();
  return *internal_default_instance();
}


void UserGameLogicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.UserGameLogicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && basegame_ != NULL) {
    delete basegame_;
  }
  basegame_ = NULL;
  if (GetArenaNoVirtual() == NULL && freegame_ != NULL) {
    delete freegame_;
  }
  freegame_ = NULL;
  if (GetArenaNoVirtual() == NULL && bonus_ != NULL) {
    delete bonus_;
  }
  bonus_ = NULL;
  if (GetArenaNoVirtual() == NULL && jackpot_ != NULL) {
    delete jackpot_;
  }
  jackpot_ = NULL;
  if (GetArenaNoVirtual() == NULL && commonjackpot_ != NULL) {
    delete commonjackpot_;
  }
  commonjackpot_ = NULL;
  if (GetArenaNoVirtual() == NULL && respin_ != NULL) {
    delete respin_;
  }
  respin_ = NULL;
  ::memset(&nextgamemodtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curgamemodtype_) -
      reinterpret_cast<char*>(&nextgamemodtype_)) + sizeof(curgamemodtype_));
  _internal_metadata_.Clear();
}

bool UserGameLogicInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.UserGameLogicInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.UserGameModInfo basegame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basegame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo freegame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freegame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo bonus = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bonus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo jackpot = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jackpot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo commonjackpot = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commonjackpot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.UserGameModInfo respin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_respin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isCompleted = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u /* 240 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscompleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 curBet = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u /* 248 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realWin = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(0u /* 256 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string configName = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_configname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->configname().data(), static_cast<int>(this->configname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.UserGameLogicInfo.configName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GAMEMODTYPE curGameModType = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_curgamemodtype(static_cast< ::natashapb::GAMEMODTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GAMEMODTYPE nextGameModType = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_nextgamemodtype(static_cast< ::natashapb::GAMEMODTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.UserGameLogicInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.UserGameLogicInfo)
  return false;
#undef DO_
}

void UserGameLogicInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.UserGameLogicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.UserGameModInfo basegame = 1;
  if (this->has_basegame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *basegame_, output);
  }

  // .natashapb.UserGameModInfo freegame = 2;
  if (this->has_freegame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *freegame_, output);
  }

  // .natashapb.UserGameModInfo bonus = 3;
  if (this->has_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *bonus_, output);
  }

  // .natashapb.UserGameModInfo jackpot = 4;
  if (this->has_jackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *jackpot_, output);
  }

  // .natashapb.UserGameModInfo commonjackpot = 5;
  if (this->has_commonjackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *commonjackpot_, output);
  }

  // .natashapb.UserGameModInfo respin = 6;
  if (this->has_respin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *respin_, output);
  }

  // bool isCompleted = 30;
  if (this->iscompleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->iscompleted(), output);
  }

  // int64 curBet = 31;
  if (this->curbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->curbet(), output);
  }

  // int64 realWin = 32;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->realwin(), output);
  }

  // string configName = 50;
  if (this->configname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->configname().data(), static_cast<int>(this->configname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.UserGameLogicInfo.configName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->configname(), output);
  }

  // .natashapb.GAMEMODTYPE curGameModType = 100;
  if (this->curgamemodtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->curgamemodtype(), output);
  }

  // .natashapb.GAMEMODTYPE nextGameModType = 101;
  if (this->nextgamemodtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      101, this->nextgamemodtype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.UserGameLogicInfo)
}

::google::protobuf::uint8* UserGameLogicInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.UserGameLogicInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.UserGameModInfo basegame = 1;
  if (this->has_basegame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *basegame_, deterministic, target);
  }

  // .natashapb.UserGameModInfo freegame = 2;
  if (this->has_freegame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *freegame_, deterministic, target);
  }

  // .natashapb.UserGameModInfo bonus = 3;
  if (this->has_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *bonus_, deterministic, target);
  }

  // .natashapb.UserGameModInfo jackpot = 4;
  if (this->has_jackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *jackpot_, deterministic, target);
  }

  // .natashapb.UserGameModInfo commonjackpot = 5;
  if (this->has_commonjackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *commonjackpot_, deterministic, target);
  }

  // .natashapb.UserGameModInfo respin = 6;
  if (this->has_respin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *respin_, deterministic, target);
  }

  // bool isCompleted = 30;
  if (this->iscompleted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->iscompleted(), target);
  }

  // int64 curBet = 31;
  if (this->curbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->curbet(), target);
  }

  // int64 realWin = 32;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->realwin(), target);
  }

  // string configName = 50;
  if (this->configname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->configname().data(), static_cast<int>(this->configname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.UserGameLogicInfo.configName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->configname(), target);
  }

  // .natashapb.GAMEMODTYPE curGameModType = 100;
  if (this->curgamemodtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->curgamemodtype(), target);
  }

  // .natashapb.GAMEMODTYPE nextGameModType = 101;
  if (this->nextgamemodtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      101, this->nextgamemodtype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.UserGameLogicInfo)
  return target;
}

size_t UserGameLogicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.UserGameLogicInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string configName = 50;
  if (this->configname().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->configname());
  }

  // .natashapb.UserGameModInfo basegame = 1;
  if (this->has_basegame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *basegame_);
  }

  // .natashapb.UserGameModInfo freegame = 2;
  if (this->has_freegame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *freegame_);
  }

  // .natashapb.UserGameModInfo bonus = 3;
  if (this->has_bonus()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *bonus_);
  }

  // .natashapb.UserGameModInfo jackpot = 4;
  if (this->has_jackpot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *jackpot_);
  }

  // .natashapb.UserGameModInfo commonjackpot = 5;
  if (this->has_commonjackpot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *commonjackpot_);
  }

  // .natashapb.UserGameModInfo respin = 6;
  if (this->has_respin()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *respin_);
  }

  // .natashapb.GAMEMODTYPE nextGameModType = 101;
  if (this->nextgamemodtype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->nextgamemodtype());
  }

  // int64 curBet = 31;
  if (this->curbet() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->curbet());
  }

  // int64 realWin = 32;
  if (this->realwin() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  // bool isCompleted = 30;
  if (this->iscompleted() != 0) {
    total_size += 2 + 1;
  }

  // .natashapb.GAMEMODTYPE curGameModType = 100;
  if (this->curgamemodtype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curgamemodtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGameLogicInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.UserGameLogicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserGameLogicInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserGameLogicInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.UserGameLogicInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.UserGameLogicInfo)
    MergeFrom(*source);
  }
}

void UserGameLogicInfo::MergeFrom(const UserGameLogicInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.UserGameLogicInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.configname().size() > 0) {

    configname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.configname_);
  }
  if (from.has_basegame()) {
    mutable_basegame()->::natashapb::UserGameModInfo::MergeFrom(from.basegame());
  }
  if (from.has_freegame()) {
    mutable_freegame()->::natashapb::UserGameModInfo::MergeFrom(from.freegame());
  }
  if (from.has_bonus()) {
    mutable_bonus()->::natashapb::UserGameModInfo::MergeFrom(from.bonus());
  }
  if (from.has_jackpot()) {
    mutable_jackpot()->::natashapb::UserGameModInfo::MergeFrom(from.jackpot());
  }
  if (from.has_commonjackpot()) {
    mutable_commonjackpot()->::natashapb::UserGameModInfo::MergeFrom(from.commonjackpot());
  }
  if (from.has_respin()) {
    mutable_respin()->::natashapb::UserGameModInfo::MergeFrom(from.respin());
  }
  if (from.nextgamemodtype() != 0) {
    set_nextgamemodtype(from.nextgamemodtype());
  }
  if (from.curbet() != 0) {
    set_curbet(from.curbet());
  }
  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
  if (from.iscompleted() != 0) {
    set_iscompleted(from.iscompleted());
  }
  if (from.curgamemodtype() != 0) {
    set_curgamemodtype(from.curgamemodtype());
  }
}

void UserGameLogicInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.UserGameLogicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGameLogicInfo::CopyFrom(const UserGameLogicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.UserGameLogicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGameLogicInfo::IsInitialized() const {
  return true;
}

void UserGameLogicInfo::Swap(UserGameLogicInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserGameLogicInfo::InternalSwap(UserGameLogicInfo* other) {
  using std::swap;
  configname_.Swap(&other->configname_);
  swap(basegame_, other->basegame_);
  swap(freegame_, other->freegame_);
  swap(bonus_, other->bonus_);
  swap(jackpot_, other->jackpot_);
  swap(commonjackpot_, other->commonjackpot_);
  swap(respin_, other->respin_);
  swap(nextgamemodtype_, other->nextgamemodtype_);
  swap(curbet_, other->curbet_);
  swap(realwin_, other->realwin_);
  swap(iscompleted_, other->iscompleted_);
  swap(curgamemodtype_, other->curgamemodtype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserGameLogicInfo::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlSpin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlSpin::kBetFieldNumber;
const int GameCtrlSpin::kLinesFieldNumber;
const int GameCtrlSpin::kTimesFieldNumber;
const int GameCtrlSpin::kTotalBetFieldNumber;
const int GameCtrlSpin::kRealBetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlSpin::GameCtrlSpin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlSpin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlSpin)
}
GameCtrlSpin::GameCtrlSpin(const GameCtrlSpin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bet_, &from.bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&realbet_) -
    reinterpret_cast<char*>(&bet_)) + sizeof(realbet_));
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlSpin)
}

void GameCtrlSpin::SharedCtor() {
  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realbet_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(realbet_));
  _cached_size_ = 0;
}

GameCtrlSpin::~GameCtrlSpin() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlSpin)
  SharedDtor();
}

void GameCtrlSpin::SharedDtor() {
}

void GameCtrlSpin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlSpin::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlSpin& GameCtrlSpin::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlSpin();
  return *internal_default_instance();
}


void GameCtrlSpin::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlSpin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realbet_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(realbet_));
  _internal_metadata_.Clear();
}

bool GameCtrlSpin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlSpin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 bet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalBet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realBet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlSpin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlSpin)
  return false;
#undef DO_
}

void GameCtrlSpin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlSpin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bet(), output);
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lines(), output);
  }

  // int32 times = 3;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  // int64 totalBet = 4;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->totalbet(), output);
  }

  // int64 realBet = 5;
  if (this->realbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->realbet(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlSpin)
}

::google::protobuf::uint8* GameCtrlSpin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlSpin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bet(), target);
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lines(), target);
  }

  // int32 times = 3;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  // int64 totalBet = 4;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->totalbet(), target);
  }

  // int64 realBet = 5;
  if (this->realbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->realbet(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlSpin)
  return target;
}

size_t GameCtrlSpin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlSpin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 bet = 1;
  if (this->bet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet());
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lines());
  }

  // int32 times = 3;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times());
  }

  // int64 totalBet = 4;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalbet());
  }

  // int64 realBet = 5;
  if (this->realbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realbet());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlSpin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlSpin)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlSpin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlSpin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlSpin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlSpin)
    MergeFrom(*source);
  }
}

void GameCtrlSpin::MergeFrom(const GameCtrlSpin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlSpin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet() != 0) {
    set_bet(from.bet());
  }
  if (from.lines() != 0) {
    set_lines(from.lines());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
  if (from.realbet() != 0) {
    set_realbet(from.realbet());
  }
}

void GameCtrlSpin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlSpin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlSpin::CopyFrom(const GameCtrlSpin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlSpin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlSpin::IsInitialized() const {
  return true;
}

void GameCtrlSpin::Swap(GameCtrlSpin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlSpin::InternalSwap(GameCtrlSpin* other) {
  using std::swap;
  swap(bet_, other->bet_);
  swap(lines_, other->lines_);
  swap(times_, other->times_);
  swap(totalbet_, other->totalbet_);
  swap(realbet_, other->realbet_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlSpin::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlSelectFree::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlSelectFree::kTypeIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlSelectFree::GameCtrlSelectFree()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlSelectFree();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlSelectFree)
}
GameCtrlSelectFree::GameCtrlSelectFree(const GameCtrlSelectFree& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typeindex_ = from.typeindex_;
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlSelectFree)
}

void GameCtrlSelectFree::SharedCtor() {
  typeindex_ = 0;
  _cached_size_ = 0;
}

GameCtrlSelectFree::~GameCtrlSelectFree() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlSelectFree)
  SharedDtor();
}

void GameCtrlSelectFree::SharedDtor() {
}

void GameCtrlSelectFree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlSelectFree::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlSelectFree& GameCtrlSelectFree::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlSelectFree();
  return *internal_default_instance();
}


void GameCtrlSelectFree::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlSelectFree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  typeindex_ = 0;
  _internal_metadata_.Clear();
}

bool GameCtrlSelectFree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlSelectFree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 typeIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlSelectFree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlSelectFree)
  return false;
#undef DO_
}

void GameCtrlSelectFree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlSelectFree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 typeIndex = 1;
  if (this->typeindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlSelectFree)
}

::google::protobuf::uint8* GameCtrlSelectFree::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlSelectFree)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 typeIndex = 1;
  if (this->typeindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlSelectFree)
  return target;
}

size_t GameCtrlSelectFree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlSelectFree)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 typeIndex = 1;
  if (this->typeindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlSelectFree::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlSelectFree)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlSelectFree* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlSelectFree>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlSelectFree)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlSelectFree)
    MergeFrom(*source);
  }
}

void GameCtrlSelectFree::MergeFrom(const GameCtrlSelectFree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlSelectFree)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.typeindex() != 0) {
    set_typeindex(from.typeindex());
  }
}

void GameCtrlSelectFree::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlSelectFree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlSelectFree::CopyFrom(const GameCtrlSelectFree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlSelectFree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlSelectFree::IsInitialized() const {
  return true;
}

void GameCtrlSelectFree::Swap(GameCtrlSelectFree* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlSelectFree::InternalSwap(GameCtrlSelectFree* other) {
  using std::swap;
  swap(typeindex_, other->typeindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlSelectFree::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlBonus::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlBonus::kItemIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlBonus::GameCtrlBonus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlBonus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlBonus)
}
GameCtrlBonus::GameCtrlBonus(const GameCtrlBonus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itemindex_ = from.itemindex_;
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlBonus)
}

void GameCtrlBonus::SharedCtor() {
  itemindex_ = 0;
  _cached_size_ = 0;
}

GameCtrlBonus::~GameCtrlBonus() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlBonus)
  SharedDtor();
}

void GameCtrlBonus::SharedDtor() {
}

void GameCtrlBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlBonus::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlBonus& GameCtrlBonus::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlBonus();
  return *internal_default_instance();
}


void GameCtrlBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemindex_ = 0;
  _internal_metadata_.Clear();
}

bool GameCtrlBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 itemIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlBonus)
  return false;
#undef DO_
}

void GameCtrlBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlBonus)
}

::google::protobuf::uint8* GameCtrlBonus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlBonus)
  return target;
}

size_t GameCtrlBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlBonus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlBonus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlBonus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlBonus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlBonus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlBonus)
    MergeFrom(*source);
  }
}

void GameCtrlBonus::MergeFrom(const GameCtrlBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemindex() != 0) {
    set_itemindex(from.itemindex());
  }
}

void GameCtrlBonus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlBonus::CopyFrom(const GameCtrlBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlBonus::IsInitialized() const {
  return true;
}

void GameCtrlBonus::Swap(GameCtrlBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlBonus::InternalSwap(GameCtrlBonus* other) {
  using std::swap;
  swap(itemindex_, other->itemindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlBonus::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlJackpot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlJackpot::kItemIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlJackpot::GameCtrlJackpot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlJackpot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlJackpot)
}
GameCtrlJackpot::GameCtrlJackpot(const GameCtrlJackpot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itemindex_ = from.itemindex_;
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlJackpot)
}

void GameCtrlJackpot::SharedCtor() {
  itemindex_ = 0;
  _cached_size_ = 0;
}

GameCtrlJackpot::~GameCtrlJackpot() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlJackpot)
  SharedDtor();
}

void GameCtrlJackpot::SharedDtor() {
}

void GameCtrlJackpot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlJackpot::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlJackpot& GameCtrlJackpot::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlJackpot();
  return *internal_default_instance();
}


void GameCtrlJackpot::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlJackpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemindex_ = 0;
  _internal_metadata_.Clear();
}

bool GameCtrlJackpot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlJackpot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 itemIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlJackpot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlJackpot)
  return false;
#undef DO_
}

void GameCtrlJackpot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlJackpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlJackpot)
}

::google::protobuf::uint8* GameCtrlJackpot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlJackpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlJackpot)
  return target;
}

size_t GameCtrlJackpot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlJackpot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlJackpot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlJackpot)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlJackpot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlJackpot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlJackpot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlJackpot)
    MergeFrom(*source);
  }
}

void GameCtrlJackpot::MergeFrom(const GameCtrlJackpot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlJackpot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemindex() != 0) {
    set_itemindex(from.itemindex());
  }
}

void GameCtrlJackpot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlJackpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlJackpot::CopyFrom(const GameCtrlJackpot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlJackpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlJackpot::IsInitialized() const {
  return true;
}

void GameCtrlJackpot::Swap(GameCtrlJackpot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlJackpot::InternalSwap(GameCtrlJackpot* other) {
  using std::swap;
  swap(itemindex_, other->itemindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlJackpot::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlCommonJackpot::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlCommonJackpot::kItemIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlCommonJackpot::GameCtrlCommonJackpot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlCommonJackpot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlCommonJackpot)
}
GameCtrlCommonJackpot::GameCtrlCommonJackpot(const GameCtrlCommonJackpot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itemindex_ = from.itemindex_;
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlCommonJackpot)
}

void GameCtrlCommonJackpot::SharedCtor() {
  itemindex_ = 0;
  _cached_size_ = 0;
}

GameCtrlCommonJackpot::~GameCtrlCommonJackpot() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlCommonJackpot)
  SharedDtor();
}

void GameCtrlCommonJackpot::SharedDtor() {
}

void GameCtrlCommonJackpot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlCommonJackpot::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlCommonJackpot& GameCtrlCommonJackpot::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlCommonJackpot();
  return *internal_default_instance();
}


void GameCtrlCommonJackpot::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlCommonJackpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  itemindex_ = 0;
  _internal_metadata_.Clear();
}

bool GameCtrlCommonJackpot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlCommonJackpot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 itemIndex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlCommonJackpot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlCommonJackpot)
  return false;
#undef DO_
}

void GameCtrlCommonJackpot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlCommonJackpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemindex(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlCommonJackpot)
}

::google::protobuf::uint8* GameCtrlCommonJackpot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlCommonJackpot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemindex(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlCommonJackpot)
  return target;
}

size_t GameCtrlCommonJackpot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlCommonJackpot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 itemIndex = 1;
  if (this->itemindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->itemindex());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlCommonJackpot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlCommonJackpot)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlCommonJackpot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlCommonJackpot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlCommonJackpot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlCommonJackpot)
    MergeFrom(*source);
  }
}

void GameCtrlCommonJackpot::MergeFrom(const GameCtrlCommonJackpot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlCommonJackpot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.itemindex() != 0) {
    set_itemindex(from.itemindex());
  }
}

void GameCtrlCommonJackpot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlCommonJackpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlCommonJackpot::CopyFrom(const GameCtrlCommonJackpot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlCommonJackpot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlCommonJackpot::IsInitialized() const {
  return true;
}

void GameCtrlCommonJackpot::Swap(GameCtrlCommonJackpot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlCommonJackpot::InternalSwap(GameCtrlCommonJackpot* other) {
  using std::swap;
  swap(itemindex_, other->itemindex_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlCommonJackpot::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlAwardSpin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlAwardSpin::kBetFieldNumber;
const int GameCtrlAwardSpin::kLinesFieldNumber;
const int GameCtrlAwardSpin::kTimesFieldNumber;
const int GameCtrlAwardSpin::kTotalBetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlAwardSpin::GameCtrlAwardSpin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlAwardSpin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlAwardSpin)
}
GameCtrlAwardSpin::GameCtrlAwardSpin(const GameCtrlAwardSpin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bet_, &from.bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalbet_) -
    reinterpret_cast<char*>(&bet_)) + sizeof(totalbet_));
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlAwardSpin)
}

void GameCtrlAwardSpin::SharedCtor() {
  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalbet_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(totalbet_));
  _cached_size_ = 0;
}

GameCtrlAwardSpin::~GameCtrlAwardSpin() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlAwardSpin)
  SharedDtor();
}

void GameCtrlAwardSpin::SharedDtor() {
}

void GameCtrlAwardSpin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlAwardSpin::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlAwardSpin& GameCtrlAwardSpin::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlAwardSpin();
  return *internal_default_instance();
}


void GameCtrlAwardSpin::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlAwardSpin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalbet_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(totalbet_));
  _internal_metadata_.Clear();
}

bool GameCtrlAwardSpin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlAwardSpin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 bet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalBet = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlAwardSpin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlAwardSpin)
  return false;
#undef DO_
}

void GameCtrlAwardSpin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlAwardSpin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bet(), output);
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lines(), output);
  }

  // int32 times = 3;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  // int64 totalBet = 4;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->totalbet(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlAwardSpin)
}

::google::protobuf::uint8* GameCtrlAwardSpin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlAwardSpin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bet(), target);
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lines(), target);
  }

  // int32 times = 3;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  // int64 totalBet = 4;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->totalbet(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlAwardSpin)
  return target;
}

size_t GameCtrlAwardSpin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlAwardSpin)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 bet = 1;
  if (this->bet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet());
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lines());
  }

  // int32 times = 3;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times());
  }

  // int64 totalBet = 4;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalbet());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlAwardSpin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlAwardSpin)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlAwardSpin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlAwardSpin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlAwardSpin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlAwardSpin)
    MergeFrom(*source);
  }
}

void GameCtrlAwardSpin::MergeFrom(const GameCtrlAwardSpin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlAwardSpin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet() != 0) {
    set_bet(from.bet());
  }
  if (from.lines() != 0) {
    set_lines(from.lines());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
}

void GameCtrlAwardSpin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlAwardSpin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlAwardSpin::CopyFrom(const GameCtrlAwardSpin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlAwardSpin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlAwardSpin::IsInitialized() const {
  return true;
}

void GameCtrlAwardSpin::Swap(GameCtrlAwardSpin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlAwardSpin::InternalSwap(GameCtrlAwardSpin* other) {
  using std::swap;
  swap(bet_, other->bet_);
  swap(lines_, other->lines_);
  swap(times_, other->times_);
  swap(totalbet_, other->totalbet_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlAwardSpin::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrlDebug::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrlDebug::kDebugStateFieldNumber;
const int GameCtrlDebug::kLstRandomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrlDebug::GameCtrlDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrlDebug();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrlDebug)
}
GameCtrlDebug::GameCtrlDebug(const GameCtrlDebug& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lstrandom_(from.lstrandom_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  debugstate_ = from.debugstate_;
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrlDebug)
}

void GameCtrlDebug::SharedCtor() {
  debugstate_ = 0;
  _cached_size_ = 0;
}

GameCtrlDebug::~GameCtrlDebug() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrlDebug)
  SharedDtor();
}

void GameCtrlDebug::SharedDtor() {
}

void GameCtrlDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrlDebug::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrlDebug& GameCtrlDebug::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrlDebug();
  return *internal_default_instance();
}


void GameCtrlDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrlDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lstrandom_.Clear();
  debugstate_ = 0;
  _internal_metadata_.Clear();
}

bool GameCtrlDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrlDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.DEBUGSTATE debugState = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_debugstate(static_cast< ::natashapb::DEBUGSTATE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int64 lstRandom = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_lstrandom())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18u, input, this->mutable_lstrandom())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrlDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrlDebug)
  return false;
#undef DO_
}

void GameCtrlDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrlDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.DEBUGSTATE debugState = 1;
  if (this->debugstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->debugstate(), output);
  }

  // repeated int64 lstRandom = 2;
  if (this->lstrandom_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _lstrandom_cached_byte_size_));
  }
  for (int i = 0, n = this->lstrandom_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->lstrandom(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrlDebug)
}

::google::protobuf::uint8* GameCtrlDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrlDebug)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.DEBUGSTATE debugState = 1;
  if (this->debugstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->debugstate(), target);
  }

  // repeated int64 lstRandom = 2;
  if (this->lstrandom_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _lstrandom_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->lstrandom_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrlDebug)
  return target;
}

size_t GameCtrlDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrlDebug)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int64 lstRandom = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int64Size(this->lstrandom_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _lstrandom_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .natashapb.DEBUGSTATE debugState = 1;
  if (this->debugstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->debugstate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrlDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrlDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrlDebug* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrlDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrlDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrlDebug)
    MergeFrom(*source);
  }
}

void GameCtrlDebug::MergeFrom(const GameCtrlDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrlDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lstrandom_.MergeFrom(from.lstrandom_);
  if (from.debugstate() != 0) {
    set_debugstate(from.debugstate());
  }
}

void GameCtrlDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrlDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrlDebug::CopyFrom(const GameCtrlDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrlDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrlDebug::IsInitialized() const {
  return true;
}

void GameCtrlDebug::Swap(GameCtrlDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrlDebug::InternalSwap(GameCtrlDebug* other) {
  using std::swap;
  lstrandom_.InternalSwap(&other->lstrandom_);
  swap(debugstate_, other->debugstate_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrlDebug::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GameCtrl::InitAsDefaultInstance() {
  ::natashapb::_GameCtrl_default_instance_.spin_ = const_cast< ::natashapb::GameCtrlSpin*>(
      ::natashapb::GameCtrlSpin::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_.selectfree_ = const_cast< ::natashapb::GameCtrlSelectFree*>(
      ::natashapb::GameCtrlSelectFree::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_.freespin_ = const_cast< ::natashapb::GameCtrlSpin*>(
      ::natashapb::GameCtrlSpin::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_.bonus_ = const_cast< ::natashapb::GameCtrlBonus*>(
      ::natashapb::GameCtrlBonus::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_.jackpot_ = const_cast< ::natashapb::GameCtrlJackpot*>(
      ::natashapb::GameCtrlJackpot::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_.commonjackpot_ = const_cast< ::natashapb::GameCtrlCommonJackpot*>(
      ::natashapb::GameCtrlCommonJackpot::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_.awardspin_ = const_cast< ::natashapb::GameCtrlAwardSpin*>(
      ::natashapb::GameCtrlAwardSpin::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_.respin_ = const_cast< ::natashapb::GameCtrlSpin*>(
      ::natashapb::GameCtrlSpin::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_._instance.get_mutable()->debug_ = const_cast< ::natashapb::GameCtrlDebug*>(
      ::natashapb::GameCtrlDebug::internal_default_instance());
  ::natashapb::_GameCtrl_default_instance_._instance.get_mutable()->exdat_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void GameCtrl::set_allocated_spin(::natashapb::GameCtrlSpin* spin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (spin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spin, submessage_arena);
    }
    set_has_spin();
    ctrl_.spin_ = spin;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.spin)
}
void GameCtrl::set_allocated_selectfree(::natashapb::GameCtrlSelectFree* selectfree) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (selectfree) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      selectfree = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, selectfree, submessage_arena);
    }
    set_has_selectfree();
    ctrl_.selectfree_ = selectfree;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.selectFree)
}
void GameCtrl::set_allocated_freespin(::natashapb::GameCtrlSpin* freespin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (freespin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      freespin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freespin, submessage_arena);
    }
    set_has_freespin();
    ctrl_.freespin_ = freespin;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.freeSpin)
}
void GameCtrl::set_allocated_bonus(::natashapb::GameCtrlBonus* bonus) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (bonus) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      bonus = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bonus, submessage_arena);
    }
    set_has_bonus();
    ctrl_.bonus_ = bonus;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.bonus)
}
void GameCtrl::set_allocated_jackpot(::natashapb::GameCtrlJackpot* jackpot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (jackpot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      jackpot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, jackpot, submessage_arena);
    }
    set_has_jackpot();
    ctrl_.jackpot_ = jackpot;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.jackpot)
}
void GameCtrl::set_allocated_commonjackpot(::natashapb::GameCtrlCommonJackpot* commonjackpot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (commonjackpot) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      commonjackpot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, commonjackpot, submessage_arena);
    }
    set_has_commonjackpot();
    ctrl_.commonjackpot_ = commonjackpot;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.commonJackpot)
}
void GameCtrl::set_allocated_awardspin(::natashapb::GameCtrlAwardSpin* awardspin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (awardspin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      awardspin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, awardspin, submessage_arena);
    }
    set_has_awardspin();
    ctrl_.awardspin_ = awardspin;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.awardSpin)
}
void GameCtrl::set_allocated_respin(::natashapb::GameCtrlSpin* respin) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_ctrl();
  if (respin) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      respin = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, respin, submessage_arena);
    }
    set_has_respin();
    ctrl_.respin_ = respin;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.GameCtrl.respin)
}
void GameCtrl::clear_exdat() {
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameCtrl::kCtrlIDFieldNumber;
const int GameCtrl::kRealBetFieldNumber;
const int GameCtrl::kSpinFieldNumber;
const int GameCtrl::kSelectFreeFieldNumber;
const int GameCtrl::kFreeSpinFieldNumber;
const int GameCtrl::kBonusFieldNumber;
const int GameCtrl::kJackpotFieldNumber;
const int GameCtrl::kCommonJackpotFieldNumber;
const int GameCtrl::kAwardSpinFieldNumber;
const int GameCtrl::kRespinFieldNumber;
const int GameCtrl::kDebugFieldNumber;
const int GameCtrl::kExDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameCtrl::GameCtrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameCtrl();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameCtrl)
}
GameCtrl::GameCtrl(const GameCtrl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_debug()) {
    debug_ = new ::natashapb::GameCtrlDebug(*from.debug_);
  } else {
    debug_ = NULL;
  }
  if (from.has_exdat()) {
    exdat_ = new ::google::protobuf::Any(*from.exdat_);
  } else {
    exdat_ = NULL;
  }
  ::memcpy(&ctrlid_, &from.ctrlid_,
    static_cast<size_t>(reinterpret_cast<char*>(&realbet_) -
    reinterpret_cast<char*>(&ctrlid_)) + sizeof(realbet_));
  clear_has_ctrl();
  switch (from.ctrl_case()) {
    case kSpin: {
      mutable_spin()->::natashapb::GameCtrlSpin::MergeFrom(from.spin());
      break;
    }
    case kSelectFree: {
      mutable_selectfree()->::natashapb::GameCtrlSelectFree::MergeFrom(from.selectfree());
      break;
    }
    case kFreeSpin: {
      mutable_freespin()->::natashapb::GameCtrlSpin::MergeFrom(from.freespin());
      break;
    }
    case kBonus: {
      mutable_bonus()->::natashapb::GameCtrlBonus::MergeFrom(from.bonus());
      break;
    }
    case kJackpot: {
      mutable_jackpot()->::natashapb::GameCtrlJackpot::MergeFrom(from.jackpot());
      break;
    }
    case kCommonJackpot: {
      mutable_commonjackpot()->::natashapb::GameCtrlCommonJackpot::MergeFrom(from.commonjackpot());
      break;
    }
    case kAwardSpin: {
      mutable_awardspin()->::natashapb::GameCtrlAwardSpin::MergeFrom(from.awardspin());
      break;
    }
    case kRespin: {
      mutable_respin()->::natashapb::GameCtrlSpin::MergeFrom(from.respin());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.GameCtrl)
}

void GameCtrl::SharedCtor() {
  ::memset(&debug_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realbet_) -
      reinterpret_cast<char*>(&debug_)) + sizeof(realbet_));
  clear_has_ctrl();
  _cached_size_ = 0;
}

GameCtrl::~GameCtrl() {
  // @@protoc_insertion_point(destructor:natashapb.GameCtrl)
  SharedDtor();
}

void GameCtrl::SharedDtor() {
  if (this != internal_default_instance()) delete debug_;
  if (this != internal_default_instance()) delete exdat_;
  if (has_ctrl()) {
    clear_ctrl();
  }
}

void GameCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameCtrl::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameCtrl& GameCtrl::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameCtrl();
  return *internal_default_instance();
}


void GameCtrl::clear_ctrl() {
// @@protoc_insertion_point(one_of_clear_start:natashapb.GameCtrl)
  switch (ctrl_case()) {
    case kSpin: {
      delete ctrl_.spin_;
      break;
    }
    case kSelectFree: {
      delete ctrl_.selectfree_;
      break;
    }
    case kFreeSpin: {
      delete ctrl_.freespin_;
      break;
    }
    case kBonus: {
      delete ctrl_.bonus_;
      break;
    }
    case kJackpot: {
      delete ctrl_.jackpot_;
      break;
    }
    case kCommonJackpot: {
      delete ctrl_.commonjackpot_;
      break;
    }
    case kAwardSpin: {
      delete ctrl_.awardspin_;
      break;
    }
    case kRespin: {
      delete ctrl_.respin_;
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CTRL_NOT_SET;
}


void GameCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameCtrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && debug_ != NULL) {
    delete debug_;
  }
  debug_ = NULL;
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
  ::memset(&ctrlid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realbet_) -
      reinterpret_cast<char*>(&ctrlid_)) + sizeof(realbet_));
  clear_ctrl();
  _internal_metadata_.Clear();
}

bool GameCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameCtrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 ctrlID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ctrlid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realBet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlSpin spin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlSelectFree selectFree = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_selectfree()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlSpin freeSpin = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freespin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlBonus bonus = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bonus()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlJackpot jackpot = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_jackpot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlCommonJackpot commonJackpot = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commonjackpot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlAwardSpin awardSpin = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_awardspin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlSpin respin = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_respin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlDebug debug = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any exDat = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameCtrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameCtrl)
  return false;
#undef DO_
}

void GameCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameCtrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ctrlid(), output);
  }

  // int64 realBet = 2;
  if (this->realbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->realbet(), output);
  }

  // .natashapb.GameCtrlSpin spin = 10;
  if (has_spin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *ctrl_.spin_, output);
  }

  // .natashapb.GameCtrlSelectFree selectFree = 11;
  if (has_selectfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *ctrl_.selectfree_, output);
  }

  // .natashapb.GameCtrlSpin freeSpin = 12;
  if (has_freespin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *ctrl_.freespin_, output);
  }

  // .natashapb.GameCtrlBonus bonus = 13;
  if (has_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *ctrl_.bonus_, output);
  }

  // .natashapb.GameCtrlJackpot jackpot = 14;
  if (has_jackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *ctrl_.jackpot_, output);
  }

  // .natashapb.GameCtrlCommonJackpot commonJackpot = 15;
  if (has_commonjackpot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *ctrl_.commonjackpot_, output);
  }

  // .natashapb.GameCtrlAwardSpin awardSpin = 16;
  if (has_awardspin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *ctrl_.awardspin_, output);
  }

  // .natashapb.GameCtrlSpin respin = 17;
  if (has_respin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *ctrl_.respin_, output);
  }

  // .natashapb.GameCtrlDebug debug = 100;
  if (this->has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *debug_, output);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *exdat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameCtrl)
}

::google::protobuf::uint8* GameCtrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameCtrl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ctrlid(), target);
  }

  // int64 realBet = 2;
  if (this->realbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->realbet(), target);
  }

  // .natashapb.GameCtrlSpin spin = 10;
  if (has_spin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, *ctrl_.spin_, deterministic, target);
  }

  // .natashapb.GameCtrlSelectFree selectFree = 11;
  if (has_selectfree()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, *ctrl_.selectfree_, deterministic, target);
  }

  // .natashapb.GameCtrlSpin freeSpin = 12;
  if (has_freespin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, *ctrl_.freespin_, deterministic, target);
  }

  // .natashapb.GameCtrlBonus bonus = 13;
  if (has_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, *ctrl_.bonus_, deterministic, target);
  }

  // .natashapb.GameCtrlJackpot jackpot = 14;
  if (has_jackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *ctrl_.jackpot_, deterministic, target);
  }

  // .natashapb.GameCtrlCommonJackpot commonJackpot = 15;
  if (has_commonjackpot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, *ctrl_.commonjackpot_, deterministic, target);
  }

  // .natashapb.GameCtrlAwardSpin awardSpin = 16;
  if (has_awardspin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, *ctrl_.awardspin_, deterministic, target);
  }

  // .natashapb.GameCtrlSpin respin = 17;
  if (has_respin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, *ctrl_.respin_, deterministic, target);
  }

  // .natashapb.GameCtrlDebug debug = 100;
  if (this->has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, *debug_, deterministic, target);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *exdat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameCtrl)
  return target;
}

size_t GameCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameCtrl)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.GameCtrlDebug debug = 100;
  if (this->has_debug()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *debug_);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exdat_);
  }

  // int64 ctrlID = 1;
  if (this->ctrlid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->ctrlid());
  }

  // int64 realBet = 2;
  if (this->realbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realbet());
  }

  switch (ctrl_case()) {
    // .natashapb.GameCtrlSpin spin = 10;
    case kSpin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.spin_);
      break;
    }
    // .natashapb.GameCtrlSelectFree selectFree = 11;
    case kSelectFree: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.selectfree_);
      break;
    }
    // .natashapb.GameCtrlSpin freeSpin = 12;
    case kFreeSpin: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.freespin_);
      break;
    }
    // .natashapb.GameCtrlBonus bonus = 13;
    case kBonus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.bonus_);
      break;
    }
    // .natashapb.GameCtrlJackpot jackpot = 14;
    case kJackpot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.jackpot_);
      break;
    }
    // .natashapb.GameCtrlCommonJackpot commonJackpot = 15;
    case kCommonJackpot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.commonjackpot_);
      break;
    }
    // .natashapb.GameCtrlAwardSpin awardSpin = 16;
    case kAwardSpin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.awardspin_);
      break;
    }
    // .natashapb.GameCtrlSpin respin = 17;
    case kRespin: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ctrl_.respin_);
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameCtrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  const GameCtrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameCtrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameCtrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameCtrl)
    MergeFrom(*source);
  }
}

void GameCtrl::MergeFrom(const GameCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameCtrl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_debug()) {
    mutable_debug()->::natashapb::GameCtrlDebug::MergeFrom(from.debug());
  }
  if (from.has_exdat()) {
    mutable_exdat()->::google::protobuf::Any::MergeFrom(from.exdat());
  }
  if (from.ctrlid() != 0) {
    set_ctrlid(from.ctrlid());
  }
  if (from.realbet() != 0) {
    set_realbet(from.realbet());
  }
  switch (from.ctrl_case()) {
    case kSpin: {
      mutable_spin()->::natashapb::GameCtrlSpin::MergeFrom(from.spin());
      break;
    }
    case kSelectFree: {
      mutable_selectfree()->::natashapb::GameCtrlSelectFree::MergeFrom(from.selectfree());
      break;
    }
    case kFreeSpin: {
      mutable_freespin()->::natashapb::GameCtrlSpin::MergeFrom(from.freespin());
      break;
    }
    case kBonus: {
      mutable_bonus()->::natashapb::GameCtrlBonus::MergeFrom(from.bonus());
      break;
    }
    case kJackpot: {
      mutable_jackpot()->::natashapb::GameCtrlJackpot::MergeFrom(from.jackpot());
      break;
    }
    case kCommonJackpot: {
      mutable_commonjackpot()->::natashapb::GameCtrlCommonJackpot::MergeFrom(from.commonjackpot());
      break;
    }
    case kAwardSpin: {
      mutable_awardspin()->::natashapb::GameCtrlAwardSpin::MergeFrom(from.awardspin());
      break;
    }
    case kRespin: {
      mutable_respin()->::natashapb::GameCtrlSpin::MergeFrom(from.respin());
      break;
    }
    case CTRL_NOT_SET: {
      break;
    }
  }
}

void GameCtrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameCtrl::CopyFrom(const GameCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameCtrl::IsInitialized() const {
  return true;
}

void GameCtrl::Swap(GameCtrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameCtrl::InternalSwap(GameCtrl* other) {
  using std::swap;
  swap(debug_, other->debug_);
  swap(exdat_, other->exdat_);
  swap(ctrlid_, other->ctrlid_);
  swap(realbet_, other->realbet_);
  swap(ctrl_, other->ctrl_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameCtrl::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartFreeGame::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartFreeGame::kBetFieldNumber;
const int StartFreeGame::kLinesFieldNumber;
const int StartFreeGame::kTimesFieldNumber;
const int StartFreeGame::kFreeNumsFieldNumber;
const int StartFreeGame::kAvgBetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartFreeGame::StartFreeGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsStartFreeGame();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.StartFreeGame)
}
StartFreeGame::StartFreeGame(const StartFreeGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bet_, &from.bet_,
    static_cast<size_t>(reinterpret_cast<char*>(&freenums_) -
    reinterpret_cast<char*>(&bet_)) + sizeof(freenums_));
  // @@protoc_insertion_point(copy_constructor:natashapb.StartFreeGame)
}

void StartFreeGame::SharedCtor() {
  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freenums_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(freenums_));
  _cached_size_ = 0;
}

StartFreeGame::~StartFreeGame() {
  // @@protoc_insertion_point(destructor:natashapb.StartFreeGame)
  SharedDtor();
}

void StartFreeGame::SharedDtor() {
}

void StartFreeGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartFreeGame::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartFreeGame& StartFreeGame::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsStartFreeGame();
  return *internal_default_instance();
}


void StartFreeGame::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.StartFreeGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&bet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&freenums_) -
      reinterpret_cast<char*>(&bet_)) + sizeof(freenums_));
  _internal_metadata_.Clear();
}

bool StartFreeGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.StartFreeGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 bet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 lines = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 times = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 freeNums = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 avgBet = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &avgbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.StartFreeGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.StartFreeGame)
  return false;
#undef DO_
}

void StartFreeGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.StartFreeGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->bet(), output);
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lines(), output);
  }

  // int32 times = 3;
  if (this->times() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->times(), output);
  }

  // int32 freeNums = 4;
  if (this->freenums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->freenums(), output);
  }

  // int64 avgBet = 5;
  if (this->avgbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->avgbet(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.StartFreeGame)
}

::google::protobuf::uint8* StartFreeGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.StartFreeGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 bet = 1;
  if (this->bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->bet(), target);
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lines(), target);
  }

  // int32 times = 3;
  if (this->times() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->times(), target);
  }

  // int32 freeNums = 4;
  if (this->freenums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->freenums(), target);
  }

  // int64 avgBet = 5;
  if (this->avgbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->avgbet(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.StartFreeGame)
  return target;
}

size_t StartFreeGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.StartFreeGame)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 bet = 1;
  if (this->bet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bet());
  }

  // int32 lines = 2;
  if (this->lines() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->lines());
  }

  // int32 times = 3;
  if (this->times() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->times());
  }

  // int64 avgBet = 5;
  if (this->avgbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->avgbet());
  }

  // int32 freeNums = 4;
  if (this->freenums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->freenums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartFreeGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.StartFreeGame)
  GOOGLE_DCHECK_NE(&from, this);
  const StartFreeGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartFreeGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.StartFreeGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.StartFreeGame)
    MergeFrom(*source);
  }
}

void StartFreeGame::MergeFrom(const StartFreeGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.StartFreeGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bet() != 0) {
    set_bet(from.bet());
  }
  if (from.lines() != 0) {
    set_lines(from.lines());
  }
  if (from.times() != 0) {
    set_times(from.times());
  }
  if (from.avgbet() != 0) {
    set_avgbet(from.avgbet());
  }
  if (from.freenums() != 0) {
    set_freenums(from.freenums());
  }
}

void StartFreeGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.StartFreeGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartFreeGame::CopyFrom(const StartFreeGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.StartFreeGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartFreeGame::IsInitialized() const {
  return true;
}

void StartFreeGame::Swap(StartFreeGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartFreeGame::InternalSwap(StartFreeGame* other) {
  using std::swap;
  swap(bet_, other->bet_);
  swap(lines_, other->lines_);
  swap(times_, other->times_);
  swap(avgbet_, other->avgbet_);
  swap(freenums_, other->freenums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartFreeGame::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartGameMod::InitAsDefaultInstance() {
  ::natashapb::_StartGameMod_default_instance_.freegame_ = const_cast< ::natashapb::StartFreeGame*>(
      ::natashapb::StartFreeGame::internal_default_instance());
  ::natashapb::_StartGameMod_default_instance_._instance.get_mutable()->parentctrlid_ = const_cast< ::natashapb::GameCtrlID*>(
      ::natashapb::GameCtrlID::internal_default_instance());
  ::natashapb::_StartGameMod_default_instance_._instance.get_mutable()->exdat_ = const_cast< ::google::protobuf::Any*>(
      ::google::protobuf::Any::internal_default_instance());
}
void StartGameMod::set_allocated_freegame(::natashapb::StartFreeGame* freegame) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_startParams();
  if (freegame) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      freegame = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, freegame, submessage_arena);
    }
    set_has_freegame();
    startParams_.freegame_ = freegame;
  }
  // @@protoc_insertion_point(field_set_allocated:natashapb.StartGameMod.freegame)
}
void StartGameMod::clear_exdat() {
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartGameMod::kFreegameFieldNumber;
const int StartGameMod::kParentCtrlIDFieldNumber;
const int StartGameMod::kExDatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartGameMod::StartGameMod()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsStartGameMod();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.StartGameMod)
}
StartGameMod::StartGameMod(const StartGameMod& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_parentctrlid()) {
    parentctrlid_ = new ::natashapb::GameCtrlID(*from.parentctrlid_);
  } else {
    parentctrlid_ = NULL;
  }
  if (from.has_exdat()) {
    exdat_ = new ::google::protobuf::Any(*from.exdat_);
  } else {
    exdat_ = NULL;
  }
  clear_has_startParams();
  switch (from.startParams_case()) {
    case kFreegame: {
      mutable_freegame()->::natashapb::StartFreeGame::MergeFrom(from.freegame());
      break;
    }
    case STARTPARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.StartGameMod)
}

void StartGameMod::SharedCtor() {
  ::memset(&parentctrlid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exdat_) -
      reinterpret_cast<char*>(&parentctrlid_)) + sizeof(exdat_));
  clear_has_startParams();
  _cached_size_ = 0;
}

StartGameMod::~StartGameMod() {
  // @@protoc_insertion_point(destructor:natashapb.StartGameMod)
  SharedDtor();
}

void StartGameMod::SharedDtor() {
  if (this != internal_default_instance()) delete parentctrlid_;
  if (this != internal_default_instance()) delete exdat_;
  if (has_startParams()) {
    clear_startParams();
  }
}

void StartGameMod::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartGameMod::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartGameMod& StartGameMod::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsStartGameMod();
  return *internal_default_instance();
}


void StartGameMod::clear_startParams() {
// @@protoc_insertion_point(one_of_clear_start:natashapb.StartGameMod)
  switch (startParams_case()) {
    case kFreegame: {
      delete startParams_.freegame_;
      break;
    }
    case STARTPARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STARTPARAMS_NOT_SET;
}


void StartGameMod::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.StartGameMod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && parentctrlid_ != NULL) {
    delete parentctrlid_;
  }
  parentctrlid_ = NULL;
  if (GetArenaNoVirtual() == NULL && exdat_ != NULL) {
    delete exdat_;
  }
  exdat_ = NULL;
  clear_startParams();
  _internal_metadata_.Clear();
}

bool StartGameMod::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.StartGameMod)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.StartFreeGame freegame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_freegame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.GameCtrlID parentCtrlID = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_parentctrlid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Any exDat = 1000;
      case 1000: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 8002 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_exdat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.StartGameMod)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.StartGameMod)
  return false;
#undef DO_
}

void StartGameMod::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.StartGameMod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.StartFreeGame freegame = 1;
  if (has_freegame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *startParams_.freegame_, output);
  }

  // .natashapb.GameCtrlID parentCtrlID = 100;
  if (this->has_parentctrlid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, *parentctrlid_, output);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1000, *exdat_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.StartGameMod)
}

::google::protobuf::uint8* StartGameMod::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.StartGameMod)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.StartFreeGame freegame = 1;
  if (has_freegame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *startParams_.freegame_, deterministic, target);
  }

  // .natashapb.GameCtrlID parentCtrlID = 100;
  if (this->has_parentctrlid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, *parentctrlid_, deterministic, target);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1000, *exdat_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.StartGameMod)
  return target;
}

size_t StartGameMod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.StartGameMod)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.GameCtrlID parentCtrlID = 100;
  if (this->has_parentctrlid()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *parentctrlid_);
  }

  // .google.protobuf.Any exDat = 1000;
  if (this->has_exdat()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *exdat_);
  }

  switch (startParams_case()) {
    // .natashapb.StartFreeGame freegame = 1;
    case kFreegame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *startParams_.freegame_);
      break;
    }
    case STARTPARAMS_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartGameMod::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.StartGameMod)
  GOOGLE_DCHECK_NE(&from, this);
  const StartGameMod* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartGameMod>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.StartGameMod)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.StartGameMod)
    MergeFrom(*source);
  }
}

void StartGameMod::MergeFrom(const StartGameMod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.StartGameMod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_parentctrlid()) {
    mutable_parentctrlid()->::natashapb::GameCtrlID::MergeFrom(from.parentctrlid());
  }
  if (from.has_exdat()) {
    mutable_exdat()->::google::protobuf::Any::MergeFrom(from.exdat());
  }
  switch (from.startParams_case()) {
    case kFreegame: {
      mutable_freegame()->::natashapb::StartFreeGame::MergeFrom(from.freegame());
      break;
    }
    case STARTPARAMS_NOT_SET: {
      break;
    }
  }
}

void StartGameMod::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.StartGameMod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartGameMod::CopyFrom(const StartGameMod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.StartGameMod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartGameMod::IsInitialized() const {
  return true;
}

void StartGameMod::Swap(StartGameMod* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartGameMod::InternalSwap(StartGameMod* other) {
  using std::swap;
  swap(parentctrlid_, other->parentctrlid_);
  swap(exdat_, other->exdat_);
  swap(startParams_, other->startParams_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartGameMod::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolRTP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolRTP::kTotalWinFieldNumber;
const int SymbolRTP::kWinNumsFieldNumber;
const int SymbolRTP::kRealWinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolRTP::SymbolRTP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSymbolRTP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SymbolRTP)
}
SymbolRTP::SymbolRTP(const SymbolRTP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&totalwin_, &from.totalwin_,
    static_cast<size_t>(reinterpret_cast<char*>(&realwin_) -
    reinterpret_cast<char*>(&totalwin_)) + sizeof(realwin_));
  // @@protoc_insertion_point(copy_constructor:natashapb.SymbolRTP)
}

void SymbolRTP::SharedCtor() {
  ::memset(&totalwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realwin_) -
      reinterpret_cast<char*>(&totalwin_)) + sizeof(realwin_));
  _cached_size_ = 0;
}

SymbolRTP::~SymbolRTP() {
  // @@protoc_insertion_point(destructor:natashapb.SymbolRTP)
  SharedDtor();
}

void SymbolRTP::SharedDtor() {
}

void SymbolRTP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolRTP::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolRTP& SymbolRTP::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSymbolRTP();
  return *internal_default_instance();
}


void SymbolRTP::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SymbolRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&totalwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realwin_) -
      reinterpret_cast<char*>(&totalwin_)) + sizeof(realwin_));
  _internal_metadata_.Clear();
}

bool SymbolRTP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SymbolRTP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 totalWin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 winNums = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realWin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SymbolRTP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SymbolRTP)
  return false;
#undef DO_
}

void SymbolRTP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SymbolRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->totalwin(), output);
  }

  // int64 winNums = 2;
  if (this->winnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->winnums(), output);
  }

  // int64 realWin = 3;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->realwin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SymbolRTP)
}

::google::protobuf::uint8* SymbolRTP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SymbolRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->totalwin(), target);
  }

  // int64 winNums = 2;
  if (this->winnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->winnums(), target);
  }

  // int64 realWin = 3;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->realwin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SymbolRTP)
  return target;
}

size_t SymbolRTP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SymbolRTP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalwin());
  }

  // int64 winNums = 2;
  if (this->winnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->winnums());
  }

  // int64 realWin = 3;
  if (this->realwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolRTP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SymbolRTP)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolRTP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolRTP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SymbolRTP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SymbolRTP)
    MergeFrom(*source);
  }
}

void SymbolRTP::MergeFrom(const SymbolRTP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SymbolRTP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.totalwin() != 0) {
    set_totalwin(from.totalwin());
  }
  if (from.winnums() != 0) {
    set_winnums(from.winnums());
  }
  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
}

void SymbolRTP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SymbolRTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolRTP::CopyFrom(const SymbolRTP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SymbolRTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRTP::IsInitialized() const {
  return true;
}

void SymbolRTP::Swap(SymbolRTP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolRTP::InternalSwap(SymbolRTP* other) {
  using std::swap;
  swap(totalwin_, other->totalwin_);
  swap(winnums_, other->winnums_);
  swap(realwin_, other->realwin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolRTP::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SymbolRTPList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SymbolRTPList::kLstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SymbolRTPList::SymbolRTPList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsSymbolRTPList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.SymbolRTPList)
}
SymbolRTPList::SymbolRTPList(const SymbolRTPList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lst_(from.lst_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:natashapb.SymbolRTPList)
}

void SymbolRTPList::SharedCtor() {
  _cached_size_ = 0;
}

SymbolRTPList::~SymbolRTPList() {
  // @@protoc_insertion_point(destructor:natashapb.SymbolRTPList)
  SharedDtor();
}

void SymbolRTPList::SharedDtor() {
}

void SymbolRTPList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SymbolRTPList::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SymbolRTPList& SymbolRTPList::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsSymbolRTPList();
  return *internal_default_instance();
}


void SymbolRTPList::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.SymbolRTPList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lst_.Clear();
  _internal_metadata_.Clear();
}

bool SymbolRTPList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.SymbolRTPList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .natashapb.SymbolRTP lst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.SymbolRTPList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.SymbolRTPList)
  return false;
#undef DO_
}

void SymbolRTPList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.SymbolRTPList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.SymbolRTP lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lst_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lst(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.SymbolRTPList)
}

::google::protobuf::uint8* SymbolRTPList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.SymbolRTPList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.SymbolRTP lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lst_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lst(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.SymbolRTPList)
  return target;
}

size_t SymbolRTPList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.SymbolRTPList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.SymbolRTP lst = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lst_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lst(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SymbolRTPList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.SymbolRTPList)
  GOOGLE_DCHECK_NE(&from, this);
  const SymbolRTPList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SymbolRTPList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.SymbolRTPList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.SymbolRTPList)
    MergeFrom(*source);
  }
}

void SymbolRTPList::MergeFrom(const SymbolRTPList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.SymbolRTPList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lst_.MergeFrom(from.lst_);
}

void SymbolRTPList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.SymbolRTPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SymbolRTPList::CopyFrom(const SymbolRTPList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.SymbolRTPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SymbolRTPList::IsInitialized() const {
  return true;
}

void SymbolRTPList::Swap(SymbolRTPList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SymbolRTPList::InternalSwap(SymbolRTPList* other) {
  using std::swap;
  CastToBase(&lst_)->InternalSwap(CastToBase(&other->lst_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SymbolRTPList::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BonusRTP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BonusRTP::kTotalWinFieldNumber;
const int BonusRTP::kWinNumsFieldNumber;
const int BonusRTP::kRealWinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BonusRTP::BonusRTP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsBonusRTP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.BonusRTP)
}
BonusRTP::BonusRTP(const BonusRTP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&totalwin_, &from.totalwin_,
    static_cast<size_t>(reinterpret_cast<char*>(&realwin_) -
    reinterpret_cast<char*>(&totalwin_)) + sizeof(realwin_));
  // @@protoc_insertion_point(copy_constructor:natashapb.BonusRTP)
}

void BonusRTP::SharedCtor() {
  ::memset(&totalwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realwin_) -
      reinterpret_cast<char*>(&totalwin_)) + sizeof(realwin_));
  _cached_size_ = 0;
}

BonusRTP::~BonusRTP() {
  // @@protoc_insertion_point(destructor:natashapb.BonusRTP)
  SharedDtor();
}

void BonusRTP::SharedDtor() {
}

void BonusRTP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BonusRTP::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BonusRTP& BonusRTP::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsBonusRTP();
  return *internal_default_instance();
}


void BonusRTP::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.BonusRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&totalwin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&realwin_) -
      reinterpret_cast<char*>(&totalwin_)) + sizeof(realwin_));
  _internal_metadata_.Clear();
}

bool BonusRTP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.BonusRTP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 totalWin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 winNums = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 realWin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &realwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.BonusRTP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.BonusRTP)
  return false;
#undef DO_
}

void BonusRTP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.BonusRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->totalwin(), output);
  }

  // int64 winNums = 2;
  if (this->winnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->winnums(), output);
  }

  // int64 realWin = 3;
  if (this->realwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->realwin(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.BonusRTP)
}

::google::protobuf::uint8* BonusRTP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.BonusRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->totalwin(), target);
  }

  // int64 winNums = 2;
  if (this->winnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->winnums(), target);
  }

  // int64 realWin = 3;
  if (this->realwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->realwin(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.BonusRTP)
  return target;
}

size_t BonusRTP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.BonusRTP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 totalWin = 1;
  if (this->totalwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalwin());
  }

  // int64 winNums = 2;
  if (this->winnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->winnums());
  }

  // int64 realWin = 3;
  if (this->realwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->realwin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BonusRTP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.BonusRTP)
  GOOGLE_DCHECK_NE(&from, this);
  const BonusRTP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BonusRTP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.BonusRTP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.BonusRTP)
    MergeFrom(*source);
  }
}

void BonusRTP::MergeFrom(const BonusRTP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.BonusRTP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.totalwin() != 0) {
    set_totalwin(from.totalwin());
  }
  if (from.winnums() != 0) {
    set_winnums(from.winnums());
  }
  if (from.realwin() != 0) {
    set_realwin(from.realwin());
  }
}

void BonusRTP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.BonusRTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BonusRTP::CopyFrom(const BonusRTP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.BonusRTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BonusRTP::IsInitialized() const {
  return true;
}

void BonusRTP::Swap(BonusRTP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BonusRTP::InternalSwap(BonusRTP* other) {
  using std::swap;
  swap(totalwin_, other->totalwin_);
  swap(winnums_, other->winnums_);
  swap(realwin_, other->realwin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BonusRTP::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BonusRTPList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BonusRTPList::kLstFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BonusRTPList::BonusRTPList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsBonusRTPList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.BonusRTPList)
}
BonusRTPList::BonusRTPList(const BonusRTPList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      lst_(from.lst_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:natashapb.BonusRTPList)
}

void BonusRTPList::SharedCtor() {
  _cached_size_ = 0;
}

BonusRTPList::~BonusRTPList() {
  // @@protoc_insertion_point(destructor:natashapb.BonusRTPList)
  SharedDtor();
}

void BonusRTPList::SharedDtor() {
}

void BonusRTPList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BonusRTPList::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BonusRTPList& BonusRTPList::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsBonusRTPList();
  return *internal_default_instance();
}


void BonusRTPList::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.BonusRTPList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lst_.Clear();
  _internal_metadata_.Clear();
}

bool BonusRTPList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.BonusRTPList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .natashapb.BonusRTP lst = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_lst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.BonusRTPList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.BonusRTPList)
  return false;
#undef DO_
}

void BonusRTPList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.BonusRTPList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.BonusRTP lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lst_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->lst(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.BonusRTPList)
}

::google::protobuf::uint8* BonusRTPList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.BonusRTPList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.BonusRTP lst = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->lst_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->lst(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.BonusRTPList)
  return target;
}

size_t BonusRTPList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.BonusRTPList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.BonusRTP lst = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->lst_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->lst(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BonusRTPList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.BonusRTPList)
  GOOGLE_DCHECK_NE(&from, this);
  const BonusRTPList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BonusRTPList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.BonusRTPList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.BonusRTPList)
    MergeFrom(*source);
  }
}

void BonusRTPList::MergeFrom(const BonusRTPList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.BonusRTPList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lst_.MergeFrom(from.lst_);
}

void BonusRTPList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.BonusRTPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BonusRTPList::CopyFrom(const BonusRTPList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.BonusRTPList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BonusRTPList::IsInitialized() const {
  return true;
}

void BonusRTPList::Swap(BonusRTPList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BonusRTPList::InternalSwap(BonusRTPList* other) {
  using std::swap;
  CastToBase(&lst_)->InternalSwap(CastToBase(&other->lst_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BonusRTPList::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

GameModuleRTP_BonusEntry_DoNotUse::GameModuleRTP_BonusEntry_DoNotUse() {}
GameModuleRTP_BonusEntry_DoNotUse::GameModuleRTP_BonusEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GameModuleRTP_BonusEntry_DoNotUse::MergeFrom(const GameModuleRTP_BonusEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GameModuleRTP_BonusEntry_DoNotUse::GetMetadata() const {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[30];
}
void GameModuleRTP_BonusEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void GameModuleRTP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameModuleRTP::kTotalBetFieldNumber;
const int GameModuleRTP::kTotalWinFieldNumber;
const int GameModuleRTP::kSpinNumsFieldNumber;
const int GameModuleRTP::kWinNumsFieldNumber;
const int GameModuleRTP::kInNumsFieldNumber;
const int GameModuleRTP::kSymbolsFieldNumber;
const int GameModuleRTP::kBonusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameModuleRTP::GameModuleRTP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameModuleRTP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameModuleRTP)
}
GameModuleRTP::GameModuleRTP(const GameModuleRTP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      symbols_(from.symbols_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bonus_.MergeFrom(from.bonus_);
  ::memcpy(&totalbet_, &from.totalbet_,
    static_cast<size_t>(reinterpret_cast<char*>(&innums_) -
    reinterpret_cast<char*>(&totalbet_)) + sizeof(innums_));
  // @@protoc_insertion_point(copy_constructor:natashapb.GameModuleRTP)
}

void GameModuleRTP::SharedCtor() {
  ::memset(&totalbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&innums_) -
      reinterpret_cast<char*>(&totalbet_)) + sizeof(innums_));
  _cached_size_ = 0;
}

GameModuleRTP::~GameModuleRTP() {
  // @@protoc_insertion_point(destructor:natashapb.GameModuleRTP)
  SharedDtor();
}

void GameModuleRTP::SharedDtor() {
}

void GameModuleRTP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameModuleRTP::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameModuleRTP& GameModuleRTP::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameModuleRTP();
  return *internal_default_instance();
}


void GameModuleRTP::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameModuleRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbols_.Clear();
  bonus_.Clear();
  ::memset(&totalbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&innums_) -
      reinterpret_cast<char*>(&totalbet_)) + sizeof(innums_));
  _internal_metadata_.Clear();
}

bool GameModuleRTP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameModuleRTP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 totalBet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalWin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 spinNums = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &spinnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 winNums = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &winnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 inNums = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &innums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .natashapb.SymbolRTPList symbols = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_symbols()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .natashapb.BonusRTPList> bonus = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          GameModuleRTP_BonusEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GameModuleRTP_BonusEntry_DoNotUse,
              ::std::string, ::natashapb::BonusRTPList,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList > > parser(&bonus_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.GameModuleRTP.BonusEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameModuleRTP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameModuleRTP)
  return false;
#undef DO_
}

void GameModuleRTP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameModuleRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalBet = 1;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->totalbet(), output);
  }

  // int64 totalWin = 2;
  if (this->totalwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->totalwin(), output);
  }

  // int64 spinNums = 3;
  if (this->spinnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->spinnums(), output);
  }

  // int64 winNums = 4;
  if (this->winnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->winnums(), output);
  }

  // int64 inNums = 5;
  if (this->innums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->innums(), output);
  }

  // repeated .natashapb.SymbolRTPList symbols = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->symbols_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100,
      this->symbols(static_cast<int>(i)),
      output);
  }

  // map<string, .natashapb.BonusRTPList> bonus = 101;
  if (!this->bonus().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.GameModuleRTP.BonusEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->bonus().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->bonus().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::const_iterator
          it = this->bonus().begin();
          it != this->bonus().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameModuleRTP_BonusEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bonus_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            101, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameModuleRTP_BonusEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::const_iterator
          it = this->bonus().begin();
          it != this->bonus().end(); ++it) {
        entry.reset(bonus_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            101, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameModuleRTP)
}

::google::protobuf::uint8* GameModuleRTP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameModuleRTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalBet = 1;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->totalbet(), target);
  }

  // int64 totalWin = 2;
  if (this->totalwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->totalwin(), target);
  }

  // int64 spinNums = 3;
  if (this->spinnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->spinnums(), target);
  }

  // int64 winNums = 4;
  if (this->winnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->winnums(), target);
  }

  // int64 inNums = 5;
  if (this->innums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->innums(), target);
  }

  // repeated .natashapb.SymbolRTPList symbols = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->symbols_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        100, this->symbols(static_cast<int>(i)), deterministic, target);
  }

  // map<string, .natashapb.BonusRTPList> bonus = 101;
  if (!this->bonus().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.GameModuleRTP.BonusEntry.key");
      }
    };

    if (deterministic &&
        this->bonus().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->bonus().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::const_iterator
          it = this->bonus().begin();
          it != this->bonus().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameModuleRTP_BonusEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(bonus_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       101, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameModuleRTP_BonusEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::const_iterator
          it = this->bonus().begin();
          it != this->bonus().end(); ++it) {
        entry.reset(bonus_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       101, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameModuleRTP)
  return target;
}

size_t GameModuleRTP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameModuleRTP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.SymbolRTPList symbols = 100;
  {
    unsigned int count = static_cast<unsigned int>(this->symbols_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->symbols(static_cast<int>(i)));
    }
  }

  // map<string, .natashapb.BonusRTPList> bonus = 101;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->bonus_size());
  {
    ::google::protobuf::scoped_ptr<GameModuleRTP_BonusEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::natashapb::BonusRTPList >::const_iterator
        it = this->bonus().begin();
        it != this->bonus().end(); ++it) {
      entry.reset(bonus_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int64 totalBet = 1;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalbet());
  }

  // int64 totalWin = 2;
  if (this->totalwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalwin());
  }

  // int64 spinNums = 3;
  if (this->spinnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->spinnums());
  }

  // int64 winNums = 4;
  if (this->winnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->winnums());
  }

  // int64 inNums = 5;
  if (this->innums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->innums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameModuleRTP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameModuleRTP)
  GOOGLE_DCHECK_NE(&from, this);
  const GameModuleRTP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameModuleRTP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameModuleRTP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameModuleRTP)
    MergeFrom(*source);
  }
}

void GameModuleRTP::MergeFrom(const GameModuleRTP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameModuleRTP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  symbols_.MergeFrom(from.symbols_);
  bonus_.MergeFrom(from.bonus_);
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
  if (from.totalwin() != 0) {
    set_totalwin(from.totalwin());
  }
  if (from.spinnums() != 0) {
    set_spinnums(from.spinnums());
  }
  if (from.winnums() != 0) {
    set_winnums(from.winnums());
  }
  if (from.innums() != 0) {
    set_innums(from.innums());
  }
}

void GameModuleRTP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameModuleRTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameModuleRTP::CopyFrom(const GameModuleRTP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameModuleRTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameModuleRTP::IsInitialized() const {
  return true;
}

void GameModuleRTP::Swap(GameModuleRTP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameModuleRTP::InternalSwap(GameModuleRTP* other) {
  using std::swap;
  CastToBase(&symbols_)->InternalSwap(CastToBase(&other->symbols_));
  bonus_.Swap(&other->bonus_);
  swap(totalbet_, other->totalbet_);
  swap(totalwin_, other->totalwin_);
  swap(spinnums_, other->spinnums_);
  swap(winnums_, other->winnums_);
  swap(innums_, other->innums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameModuleRTP::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

RTP_GameModulesEntry_DoNotUse::RTP_GameModulesEntry_DoNotUse() {}
RTP_GameModulesEntry_DoNotUse::RTP_GameModulesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void RTP_GameModulesEntry_DoNotUse::MergeFrom(const RTP_GameModulesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata RTP_GameModulesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[32];
}
void RTP_GameModulesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void RTP::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RTP::kTotalBetFieldNumber;
const int RTP::kTotalWinFieldNumber;
const int RTP::kSpinNumsFieldNumber;
const int RTP::kGameModulesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RTP::RTP()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsRTP();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.RTP)
}
RTP::RTP(const RTP& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gamemodules_.MergeFrom(from.gamemodules_);
  ::memcpy(&totalbet_, &from.totalbet_,
    static_cast<size_t>(reinterpret_cast<char*>(&spinnums_) -
    reinterpret_cast<char*>(&totalbet_)) + sizeof(spinnums_));
  // @@protoc_insertion_point(copy_constructor:natashapb.RTP)
}

void RTP::SharedCtor() {
  ::memset(&totalbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spinnums_) -
      reinterpret_cast<char*>(&totalbet_)) + sizeof(spinnums_));
  _cached_size_ = 0;
}

RTP::~RTP() {
  // @@protoc_insertion_point(destructor:natashapb.RTP)
  SharedDtor();
}

void RTP::SharedDtor() {
}

void RTP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTP::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RTP& RTP::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsRTP();
  return *internal_default_instance();
}


void RTP::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.RTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamemodules_.Clear();
  ::memset(&totalbet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spinnums_) -
      reinterpret_cast<char*>(&totalbet_)) + sizeof(spinnums_));
  _internal_metadata_.Clear();
}

bool RTP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.RTP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 totalBet = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalbet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 totalWin = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalwin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 spinNums = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &spinnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .natashapb.GameModuleRTP> gameModules = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          RTP_GameModulesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              RTP_GameModulesEntry_DoNotUse,
              ::std::string, ::natashapb::GameModuleRTP,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP > > parser(&gamemodules_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.RTP.GameModulesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.RTP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.RTP)
  return false;
#undef DO_
}

void RTP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.RTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalBet = 1;
  if (this->totalbet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->totalbet(), output);
  }

  // int64 totalWin = 2;
  if (this->totalwin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->totalwin(), output);
  }

  // int64 spinNums = 3;
  if (this->spinnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->spinnums(), output);
  }

  // map<string, .natashapb.GameModuleRTP> gameModules = 100;
  if (!this->gamemodules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.RTP.GameModulesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->gamemodules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gamemodules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::const_iterator
          it = this->gamemodules().begin();
          it != this->gamemodules().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<RTP_GameModulesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gamemodules_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RTP_GameModulesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::const_iterator
          it = this->gamemodules().begin();
          it != this->gamemodules().end(); ++it) {
        entry.reset(gamemodules_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            100, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.RTP)
}

::google::protobuf::uint8* RTP::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.RTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 totalBet = 1;
  if (this->totalbet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->totalbet(), target);
  }

  // int64 totalWin = 2;
  if (this->totalwin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->totalwin(), target);
  }

  // int64 spinNums = 3;
  if (this->spinnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->spinnums(), target);
  }

  // map<string, .natashapb.GameModuleRTP> gameModules = 100;
  if (!this->gamemodules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.RTP.GameModulesEntry.key");
      }
    };

    if (deterministic &&
        this->gamemodules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->gamemodules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::const_iterator
          it = this->gamemodules().begin();
          it != this->gamemodules().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<RTP_GameModulesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(gamemodules_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<RTP_GameModulesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::const_iterator
          it = this->gamemodules().begin();
          it != this->gamemodules().end(); ++it) {
        entry.reset(gamemodules_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       100, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.RTP)
  return target;
}

size_t RTP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.RTP)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .natashapb.GameModuleRTP> gameModules = 100;
  total_size += 2 *
      ::google::protobuf::internal::FromIntSize(this->gamemodules_size());
  {
    ::google::protobuf::scoped_ptr<RTP_GameModulesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::natashapb::GameModuleRTP >::const_iterator
        it = this->gamemodules().begin();
        it != this->gamemodules().end(); ++it) {
      entry.reset(gamemodules_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // int64 totalBet = 1;
  if (this->totalbet() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalbet());
  }

  // int64 totalWin = 2;
  if (this->totalwin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->totalwin());
  }

  // int64 spinNums = 3;
  if (this->spinnums() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->spinnums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTP::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.RTP)
  GOOGLE_DCHECK_NE(&from, this);
  const RTP* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RTP>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.RTP)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.RTP)
    MergeFrom(*source);
  }
}

void RTP::MergeFrom(const RTP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.RTP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamemodules_.MergeFrom(from.gamemodules_);
  if (from.totalbet() != 0) {
    set_totalbet(from.totalbet());
  }
  if (from.totalwin() != 0) {
    set_totalwin(from.totalwin());
  }
  if (from.spinnums() != 0) {
    set_spinnums(from.spinnums());
  }
}

void RTP::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.RTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTP::CopyFrom(const RTP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.RTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTP::IsInitialized() const {
  return true;
}

void RTP::Swap(RTP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RTP::InternalSwap(RTP* other) {
  using std::swap;
  gamemodules_.Swap(&other->gamemodules_);
  swap(totalbet_, other->totalbet_);
  swap(totalwin_, other->totalwin_);
  swap(spinnums_, other->spinnums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RTP::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NormalReelstriptConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NormalReelstriptConfig::kFilenameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NormalReelstriptConfig::NormalReelstriptConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsNormalReelstriptConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.NormalReelstriptConfig)
}
NormalReelstriptConfig::NormalReelstriptConfig(const NormalReelstriptConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.NormalReelstriptConfig)
}

void NormalReelstriptConfig::SharedCtor() {
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NormalReelstriptConfig::~NormalReelstriptConfig() {
  // @@protoc_insertion_point(destructor:natashapb.NormalReelstriptConfig)
  SharedDtor();
}

void NormalReelstriptConfig::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NormalReelstriptConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NormalReelstriptConfig::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NormalReelstriptConfig& NormalReelstriptConfig::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsNormalReelstriptConfig();
  return *internal_default_instance();
}


void NormalReelstriptConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.NormalReelstriptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool NormalReelstriptConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.NormalReelstriptConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.NormalReelstriptConfig.filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.NormalReelstriptConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.NormalReelstriptConfig)
  return false;
#undef DO_
}

void NormalReelstriptConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.NormalReelstriptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.NormalReelstriptConfig.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.NormalReelstriptConfig)
}

::google::protobuf::uint8* NormalReelstriptConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.NormalReelstriptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.NormalReelstriptConfig.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.NormalReelstriptConfig)
  return target;
}

size_t NormalReelstriptConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.NormalReelstriptConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NormalReelstriptConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.NormalReelstriptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const NormalReelstriptConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NormalReelstriptConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.NormalReelstriptConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.NormalReelstriptConfig)
    MergeFrom(*source);
  }
}

void NormalReelstriptConfig::MergeFrom(const NormalReelstriptConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.NormalReelstriptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void NormalReelstriptConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.NormalReelstriptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NormalReelstriptConfig::CopyFrom(const NormalReelstriptConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.NormalReelstriptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NormalReelstriptConfig::IsInitialized() const {
  return true;
}

void NormalReelstriptConfig::Swap(NormalReelstriptConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NormalReelstriptConfig::InternalSwap(NormalReelstriptConfig* other) {
  using std::swap;
  filename_.Swap(&other->filename_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NormalReelstriptConfig::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticSymbols::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticSymbols::kSymbolsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticSymbols::StaticSymbols()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsStaticSymbols();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.StaticSymbols)
}
StaticSymbols::StaticSymbols(const StaticSymbols& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      symbols_(from.symbols_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:natashapb.StaticSymbols)
}

void StaticSymbols::SharedCtor() {
  _cached_size_ = 0;
}

StaticSymbols::~StaticSymbols() {
  // @@protoc_insertion_point(destructor:natashapb.StaticSymbols)
  SharedDtor();
}

void StaticSymbols::SharedDtor() {
}

void StaticSymbols::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticSymbols::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticSymbols& StaticSymbols::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsStaticSymbols();
  return *internal_default_instance();
}


void StaticSymbols::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.StaticSymbols)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  symbols_.Clear();
  _internal_metadata_.Clear();
}

bool StaticSymbols::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.StaticSymbols)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 symbols = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_symbols())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_symbols())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.StaticSymbols)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.StaticSymbols)
  return false;
#undef DO_
}

void StaticSymbols::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.StaticSymbols)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 symbols = 1;
  if (this->symbols_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _symbols_cached_byte_size_));
  }
  for (int i = 0, n = this->symbols_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->symbols(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.StaticSymbols)
}

::google::protobuf::uint8* StaticSymbols::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.StaticSymbols)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 symbols = 1;
  if (this->symbols_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _symbols_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->symbols_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.StaticSymbols)
  return target;
}

size_t StaticSymbols::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.StaticSymbols)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 symbols = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->symbols_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _symbols_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticSymbols::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.StaticSymbols)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticSymbols* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticSymbols>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.StaticSymbols)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.StaticSymbols)
    MergeFrom(*source);
  }
}

void StaticSymbols::MergeFrom(const StaticSymbols& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.StaticSymbols)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  symbols_.MergeFrom(from.symbols_);
}

void StaticSymbols::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.StaticSymbols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticSymbols::CopyFrom(const StaticSymbols& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.StaticSymbols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticSymbols::IsInitialized() const {
  return true;
}

void StaticSymbols::Swap(StaticSymbols* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticSymbols::InternalSwap(StaticSymbols* other) {
  using std::swap;
  symbols_.InternalSwap(&other->symbols_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticSymbols::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StaticCascadingReels::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticCascadingReels::kScenariosFieldNumber;
const int StaticCascadingReels::kWeightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticCascadingReels::StaticCascadingReels()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsStaticCascadingReels();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.StaticCascadingReels)
}
StaticCascadingReels::StaticCascadingReels(const StaticCascadingReels& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scenarios_(from.scenarios_),
      weights_(from.weights_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:natashapb.StaticCascadingReels)
}

void StaticCascadingReels::SharedCtor() {
  _cached_size_ = 0;
}

StaticCascadingReels::~StaticCascadingReels() {
  // @@protoc_insertion_point(destructor:natashapb.StaticCascadingReels)
  SharedDtor();
}

void StaticCascadingReels::SharedDtor() {
}

void StaticCascadingReels::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticCascadingReels::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StaticCascadingReels& StaticCascadingReels::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsStaticCascadingReels();
  return *internal_default_instance();
}


void StaticCascadingReels::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.StaticCascadingReels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scenarios_.Clear();
  weights_.Clear();
  _internal_metadata_.Clear();
}

bool StaticCascadingReels::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.StaticCascadingReels)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .natashapb.StaticSymbols scenarios = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_scenarios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 weights = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.StaticCascadingReels)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.StaticCascadingReels)
  return false;
#undef DO_
}

void StaticCascadingReels::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.StaticCascadingReels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.StaticSymbols scenarios = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scenarios_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->scenarios(static_cast<int>(i)),
      output);
  }

  // repeated int32 weights = 2;
  if (this->weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _weights_cached_byte_size_));
  }
  for (int i = 0, n = this->weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->weights(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.StaticCascadingReels)
}

::google::protobuf::uint8* StaticCascadingReels::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.StaticCascadingReels)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .natashapb.StaticSymbols scenarios = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->scenarios_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->scenarios(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 weights = 2;
  if (this->weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _weights_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->weights_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.StaticCascadingReels)
  return target;
}

size_t StaticCascadingReels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.StaticCascadingReels)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .natashapb.StaticSymbols scenarios = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->scenarios_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->scenarios(static_cast<int>(i)));
    }
  }

  // repeated int32 weights = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticCascadingReels::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.StaticCascadingReels)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticCascadingReels* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticCascadingReels>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.StaticCascadingReels)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.StaticCascadingReels)
    MergeFrom(*source);
  }
}

void StaticCascadingReels::MergeFrom(const StaticCascadingReels& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.StaticCascadingReels)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scenarios_.MergeFrom(from.scenarios_);
  weights_.MergeFrom(from.weights_);
}

void StaticCascadingReels::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.StaticCascadingReels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticCascadingReels::CopyFrom(const StaticCascadingReels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.StaticCascadingReels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticCascadingReels::IsInitialized() const {
  return true;
}

void StaticCascadingReels::Swap(StaticCascadingReels* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticCascadingReels::InternalSwap(StaticCascadingReels* other) {
  using std::swap;
  CastToBase(&scenarios_)->InternalSwap(CastToBase(&other->scenarios_));
  weights_.InternalSwap(&other->weights_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticCascadingReels::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReelstriptConfig::InitAsDefaultInstance() {
  ::natashapb::_ReelstriptConfig_default_instance_._instance.get_mutable()->normal_ = const_cast< ::natashapb::NormalReelstriptConfig*>(
      ::natashapb::NormalReelstriptConfig::internal_default_instance());
  ::natashapb::_ReelstriptConfig_default_instance_._instance.get_mutable()->static__ = const_cast< ::natashapb::StaticCascadingReels*>(
      ::natashapb::StaticCascadingReels::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReelstriptConfig::kNormalFieldNumber;
const int ReelstriptConfig::kStaticFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReelstriptConfig::ReelstriptConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsReelstriptConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.ReelstriptConfig)
}
ReelstriptConfig::ReelstriptConfig(const ReelstriptConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_normal()) {
    normal_ = new ::natashapb::NormalReelstriptConfig(*from.normal_);
  } else {
    normal_ = NULL;
  }
  if (from.has_static_()) {
    static__ = new ::natashapb::StaticCascadingReels(*from.static__);
  } else {
    static__ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:natashapb.ReelstriptConfig)
}

void ReelstriptConfig::SharedCtor() {
  ::memset(&normal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&static__) -
      reinterpret_cast<char*>(&normal_)) + sizeof(static__));
  _cached_size_ = 0;
}

ReelstriptConfig::~ReelstriptConfig() {
  // @@protoc_insertion_point(destructor:natashapb.ReelstriptConfig)
  SharedDtor();
}

void ReelstriptConfig::SharedDtor() {
  if (this != internal_default_instance()) delete normal_;
  if (this != internal_default_instance()) delete static__;
}

void ReelstriptConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReelstriptConfig::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReelstriptConfig& ReelstriptConfig::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsReelstriptConfig();
  return *internal_default_instance();
}


void ReelstriptConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.ReelstriptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && normal_ != NULL) {
    delete normal_;
  }
  normal_ = NULL;
  if (GetArenaNoVirtual() == NULL && static__ != NULL) {
    delete static__;
  }
  static__ = NULL;
  _internal_metadata_.Clear();
}

bool ReelstriptConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.ReelstriptConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .natashapb.NormalReelstriptConfig normal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .natashapb.StaticCascadingReels static = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_static_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.ReelstriptConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.ReelstriptConfig)
  return false;
#undef DO_
}

void ReelstriptConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.ReelstriptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.NormalReelstriptConfig normal = 1;
  if (this->has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *normal_, output);
  }

  // .natashapb.StaticCascadingReels static = 2;
  if (this->has_static_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *static__, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.ReelstriptConfig)
}

::google::protobuf::uint8* ReelstriptConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.ReelstriptConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .natashapb.NormalReelstriptConfig normal = 1;
  if (this->has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *normal_, deterministic, target);
  }

  // .natashapb.StaticCascadingReels static = 2;
  if (this->has_static_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *static__, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.ReelstriptConfig)
  return target;
}

size_t ReelstriptConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.ReelstriptConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .natashapb.NormalReelstriptConfig normal = 1;
  if (this->has_normal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *normal_);
  }

  // .natashapb.StaticCascadingReels static = 2;
  if (this->has_static_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *static__);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReelstriptConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.ReelstriptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ReelstriptConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReelstriptConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.ReelstriptConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.ReelstriptConfig)
    MergeFrom(*source);
  }
}

void ReelstriptConfig::MergeFrom(const ReelstriptConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.ReelstriptConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_normal()) {
    mutable_normal()->::natashapb::NormalReelstriptConfig::MergeFrom(from.normal());
  }
  if (from.has_static_()) {
    mutable_static_()->::natashapb::StaticCascadingReels::MergeFrom(from.static_());
  }
}

void ReelstriptConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.ReelstriptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReelstriptConfig::CopyFrom(const ReelstriptConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.ReelstriptConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReelstriptConfig::IsInitialized() const {
  return true;
}

void ReelstriptConfig::Swap(ReelstriptConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReelstriptConfig::InternalSwap(ReelstriptConfig* other) {
  using std::swap;
  swap(normal_, other->normal_);
  swap(static__, other->static__);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReelstriptConfig::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WeightConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WeightConfig::kWeightsFieldNumber;
const int WeightConfig::kTotalWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WeightConfig::WeightConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsWeightConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.WeightConfig)
}
WeightConfig::WeightConfig(const WeightConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      weights_(from.weights_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  totalweight_ = from.totalweight_;
  // @@protoc_insertion_point(copy_constructor:natashapb.WeightConfig)
}

void WeightConfig::SharedCtor() {
  totalweight_ = 0;
  _cached_size_ = 0;
}

WeightConfig::~WeightConfig() {
  // @@protoc_insertion_point(destructor:natashapb.WeightConfig)
  SharedDtor();
}

void WeightConfig::SharedDtor() {
}

void WeightConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightConfig::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WeightConfig& WeightConfig::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsWeightConfig();
  return *internal_default_instance();
}


void WeightConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.WeightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  totalweight_ = 0;
  _internal_metadata_.Clear();
}

bool WeightConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.WeightConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 weights = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_weights())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_weights())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 totalWeight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalweight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.WeightConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.WeightConfig)
  return false;
#undef DO_
}

void WeightConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.WeightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 weights = 1;
  if (this->weights_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _weights_cached_byte_size_));
  }
  for (int i = 0, n = this->weights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->weights(i), output);
  }

  // int32 totalWeight = 2;
  if (this->totalweight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalweight(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.WeightConfig)
}

::google::protobuf::uint8* WeightConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.WeightConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 weights = 1;
  if (this->weights_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _weights_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->weights_, target);
  }

  // int32 totalWeight = 2;
  if (this->totalweight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalweight(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.WeightConfig)
  return target;
}

size_t WeightConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.WeightConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 weights = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->weights_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _weights_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // int32 totalWeight = 2;
  if (this->totalweight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalweight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.WeightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const WeightConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WeightConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.WeightConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.WeightConfig)
    MergeFrom(*source);
  }
}

void WeightConfig::MergeFrom(const WeightConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.WeightConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  if (from.totalweight() != 0) {
    set_totalweight(from.totalweight());
  }
}

void WeightConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.WeightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightConfig::CopyFrom(const WeightConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.WeightConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightConfig::IsInitialized() const {
  return true;
}

void WeightConfig::Swap(WeightConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WeightConfig::InternalSwap(WeightConfig* other) {
  using std::swap;
  weights_.InternalSwap(&other->weights_);
  swap(totalweight_, other->totalweight_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WeightConfig::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MuseumRTPConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MuseumRTPConfig::kBgReelstripsFieldNumber;
const int MuseumRTPConfig::kBgBonusPrizeFieldNumber;
const int MuseumRTPConfig::kBgMultipliersFieldNumber;
const int MuseumRTPConfig::kBgMysteryWildFieldNumber;
const int MuseumRTPConfig::kFgNumsFieldNumber;
const int MuseumRTPConfig::kFgReelstripsFieldNumber;
const int MuseumRTPConfig::kFgBonusPrizeFieldNumber;
const int MuseumRTPConfig::kFgMultipliersFieldNumber;
const int MuseumRTPConfig::kFgMysteryWildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MuseumRTPConfig::MuseumRTPConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsMuseumRTPConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.MuseumRTPConfig)
}
MuseumRTPConfig::MuseumRTPConfig(const MuseumRTPConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bgbonusprize_(from.bgbonusprize_),
      bgmultipliers_(from.bgmultipliers_),
      bgmysterywild_(from.bgmysterywild_),
      fgbonusprize_(from.fgbonusprize_),
      fgmultipliers_(from.fgmultipliers_),
      fgmysterywild_(from.fgmysterywild_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bgreelstrips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bgreelstrips().size() > 0) {
    bgreelstrips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgreelstrips_);
  }
  fgreelstrips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fgreelstrips().size() > 0) {
    fgreelstrips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fgreelstrips_);
  }
  fgnums_ = from.fgnums_;
  // @@protoc_insertion_point(copy_constructor:natashapb.MuseumRTPConfig)
}

void MuseumRTPConfig::SharedCtor() {
  bgreelstrips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgreelstrips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgnums_ = 0;
  _cached_size_ = 0;
}

MuseumRTPConfig::~MuseumRTPConfig() {
  // @@protoc_insertion_point(destructor:natashapb.MuseumRTPConfig)
  SharedDtor();
}

void MuseumRTPConfig::SharedDtor() {
  bgreelstrips_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgreelstrips_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MuseumRTPConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MuseumRTPConfig::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MuseumRTPConfig& MuseumRTPConfig::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsMuseumRTPConfig();
  return *internal_default_instance();
}


void MuseumRTPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.MuseumRTPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgbonusprize_.Clear();
  bgmultipliers_.Clear();
  bgmysterywild_.Clear();
  fgbonusprize_.Clear();
  fgmultipliers_.Clear();
  fgmysterywild_.Clear();
  bgreelstrips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgreelstrips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgnums_ = 0;
  _internal_metadata_.Clear();
}

bool MuseumRTPConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.MuseumRTPConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bgReelstrips = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgreelstrips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bgreelstrips().data(), static_cast<int>(this->bgreelstrips().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.MuseumRTPConfig.bgReelstrips"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bgBonusPrize = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bgbonusprize())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 808 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 810u, input, this->mutable_bgbonusprize())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 bgMultipliers = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 818 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bgmultipliers())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 816 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 818u, input, this->mutable_bgmultipliers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .natashapb.WeightConfig bgMysteryWild = 103;
      case 103: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 826 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_bgmysterywild()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fgNums = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 1600 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fgnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fgReelstrips = 300;
      case 300: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 2402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fgreelstrips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fgreelstrips().data(), static_cast<int>(this->fgreelstrips().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.MuseumRTPConfig.fgReelstrips"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fgBonusPrize = 301;
      case 301: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 2410 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fgbonusprize())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 2408 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2410u, input, this->mutable_fgbonusprize())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 fgMultipliers = 302;
      case 302: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 2418 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fgmultipliers())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 2416 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 2418u, input, this->mutable_fgmultipliers())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .natashapb.WeightConfig fgMysteryWild = 303;
      case 303: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 2426 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fgmysterywild()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.MuseumRTPConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.MuseumRTPConfig)
  return false;
#undef DO_
}

void MuseumRTPConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.MuseumRTPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bgReelstrips = 100;
  if (this->bgreelstrips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgreelstrips().data(), static_cast<int>(this->bgreelstrips().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.MuseumRTPConfig.bgReelstrips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->bgreelstrips(), output);
  }

  // repeated int32 bgBonusPrize = 101;
  if (this->bgbonusprize_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(101, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bgbonusprize_cached_byte_size_));
  }
  for (int i = 0, n = this->bgbonusprize_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bgbonusprize(i), output);
  }

  // repeated int32 bgMultipliers = 102;
  if (this->bgmultipliers_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(102, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bgmultipliers_cached_byte_size_));
  }
  for (int i = 0, n = this->bgmultipliers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->bgmultipliers(i), output);
  }

  // repeated .natashapb.WeightConfig bgMysteryWild = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bgmysterywild_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103,
      this->bgmysterywild(static_cast<int>(i)),
      output);
  }

  // int32 fgNums = 200;
  if (this->fgnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(200, this->fgnums(), output);
  }

  // string fgReelstrips = 300;
  if (this->fgreelstrips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fgreelstrips().data(), static_cast<int>(this->fgreelstrips().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.MuseumRTPConfig.fgReelstrips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      300, this->fgreelstrips(), output);
  }

  // repeated int32 fgBonusPrize = 301;
  if (this->fgbonusprize_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(301, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fgbonusprize_cached_byte_size_));
  }
  for (int i = 0, n = this->fgbonusprize_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fgbonusprize(i), output);
  }

  // repeated int32 fgMultipliers = 302;
  if (this->fgmultipliers_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(302, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _fgmultipliers_cached_byte_size_));
  }
  for (int i = 0, n = this->fgmultipliers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->fgmultipliers(i), output);
  }

  // repeated .natashapb.WeightConfig fgMysteryWild = 303;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fgmysterywild_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      303,
      this->fgmysterywild(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.MuseumRTPConfig)
}

::google::protobuf::uint8* MuseumRTPConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.MuseumRTPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bgReelstrips = 100;
  if (this->bgreelstrips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgreelstrips().data(), static_cast<int>(this->bgreelstrips().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.MuseumRTPConfig.bgReelstrips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->bgreelstrips(), target);
  }

  // repeated int32 bgBonusPrize = 101;
  if (this->bgbonusprize_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      101,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _bgbonusprize_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bgbonusprize_, target);
  }

  // repeated int32 bgMultipliers = 102;
  if (this->bgmultipliers_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      102,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _bgmultipliers_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->bgmultipliers_, target);
  }

  // repeated .natashapb.WeightConfig bgMysteryWild = 103;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->bgmysterywild_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        103, this->bgmysterywild(static_cast<int>(i)), deterministic, target);
  }

  // int32 fgNums = 200;
  if (this->fgnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(200, this->fgnums(), target);
  }

  // string fgReelstrips = 300;
  if (this->fgreelstrips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fgreelstrips().data(), static_cast<int>(this->fgreelstrips().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.MuseumRTPConfig.fgReelstrips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        300, this->fgreelstrips(), target);
  }

  // repeated int32 fgBonusPrize = 301;
  if (this->fgbonusprize_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      301,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _fgbonusprize_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fgbonusprize_, target);
  }

  // repeated int32 fgMultipliers = 302;
  if (this->fgmultipliers_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      302,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _fgmultipliers_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->fgmultipliers_, target);
  }

  // repeated .natashapb.WeightConfig fgMysteryWild = 303;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fgmysterywild_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        303, this->fgmysterywild(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.MuseumRTPConfig)
  return target;
}

size_t MuseumRTPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.MuseumRTPConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 bgBonusPrize = 101;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bgbonusprize_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bgbonusprize_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 bgMultipliers = 102;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->bgmultipliers_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bgmultipliers_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .natashapb.WeightConfig bgMysteryWild = 103;
  {
    unsigned int count = static_cast<unsigned int>(this->bgmysterywild_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->bgmysterywild(static_cast<int>(i)));
    }
  }

  // repeated int32 fgBonusPrize = 301;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fgbonusprize_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fgbonusprize_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 fgMultipliers = 302;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->fgmultipliers_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fgmultipliers_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .natashapb.WeightConfig fgMysteryWild = 303;
  {
    unsigned int count = static_cast<unsigned int>(this->fgmysterywild_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fgmysterywild(static_cast<int>(i)));
    }
  }

  // string bgReelstrips = 100;
  if (this->bgreelstrips().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bgreelstrips());
  }

  // string fgReelstrips = 300;
  if (this->fgreelstrips().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fgreelstrips());
  }

  // int32 fgNums = 200;
  if (this->fgnums() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fgnums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MuseumRTPConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.MuseumRTPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MuseumRTPConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MuseumRTPConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.MuseumRTPConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.MuseumRTPConfig)
    MergeFrom(*source);
  }
}

void MuseumRTPConfig::MergeFrom(const MuseumRTPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.MuseumRTPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bgbonusprize_.MergeFrom(from.bgbonusprize_);
  bgmultipliers_.MergeFrom(from.bgmultipliers_);
  bgmysterywild_.MergeFrom(from.bgmysterywild_);
  fgbonusprize_.MergeFrom(from.fgbonusprize_);
  fgmultipliers_.MergeFrom(from.fgmultipliers_);
  fgmysterywild_.MergeFrom(from.fgmysterywild_);
  if (from.bgreelstrips().size() > 0) {

    bgreelstrips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgreelstrips_);
  }
  if (from.fgreelstrips().size() > 0) {

    fgreelstrips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fgreelstrips_);
  }
  if (from.fgnums() != 0) {
    set_fgnums(from.fgnums());
  }
}

void MuseumRTPConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.MuseumRTPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MuseumRTPConfig::CopyFrom(const MuseumRTPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.MuseumRTPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuseumRTPConfig::IsInitialized() const {
  return true;
}

void MuseumRTPConfig::Swap(MuseumRTPConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MuseumRTPConfig::InternalSwap(MuseumRTPConfig* other) {
  using std::swap;
  bgbonusprize_.InternalSwap(&other->bgbonusprize_);
  bgmultipliers_.InternalSwap(&other->bgmultipliers_);
  CastToBase(&bgmysterywild_)->InternalSwap(CastToBase(&other->bgmysterywild_));
  fgbonusprize_.InternalSwap(&other->fgbonusprize_);
  fgmultipliers_.InternalSwap(&other->fgmultipliers_);
  CastToBase(&fgmysterywild_)->InternalSwap(CastToBase(&other->fgmysterywild_));
  bgreelstrips_.Swap(&other->bgreelstrips_);
  fgreelstrips_.Swap(&other->fgreelstrips_);
  swap(fgnums_, other->fgnums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MuseumRTPConfig::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

MuseumConfig_ReelstriptsEntry_DoNotUse::MuseumConfig_ReelstriptsEntry_DoNotUse() {}
MuseumConfig_ReelstriptsEntry_DoNotUse::MuseumConfig_ReelstriptsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MuseumConfig_ReelstriptsEntry_DoNotUse::MergeFrom(const MuseumConfig_ReelstriptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MuseumConfig_ReelstriptsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[40];
}
void MuseumConfig_ReelstriptsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

MuseumConfig_RtpEntry_DoNotUse::MuseumConfig_RtpEntry_DoNotUse() {}
MuseumConfig_RtpEntry_DoNotUse::MuseumConfig_RtpEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MuseumConfig_RtpEntry_DoNotUse::MergeFrom(const MuseumConfig_RtpEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MuseumConfig_RtpEntry_DoNotUse::GetMetadata() const {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[41];
}
void MuseumConfig_RtpEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MuseumConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MuseumConfig::kReelstriptsFieldNumber;
const int MuseumConfig::kRtpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MuseumConfig::MuseumConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsMuseumConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.MuseumConfig)
}
MuseumConfig::MuseumConfig(const MuseumConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reelstripts_.MergeFrom(from.reelstripts_);
  rtp_.MergeFrom(from.rtp_);
  // @@protoc_insertion_point(copy_constructor:natashapb.MuseumConfig)
}

void MuseumConfig::SharedCtor() {
  _cached_size_ = 0;
}

MuseumConfig::~MuseumConfig() {
  // @@protoc_insertion_point(destructor:natashapb.MuseumConfig)
  SharedDtor();
}

void MuseumConfig::SharedDtor() {
}

void MuseumConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MuseumConfig::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MuseumConfig& MuseumConfig::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsMuseumConfig();
  return *internal_default_instance();
}


void MuseumConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.MuseumConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reelstripts_.Clear();
  rtp_.Clear();
  _internal_metadata_.Clear();
}

bool MuseumConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.MuseumConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          MuseumConfig_ReelstriptsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MuseumConfig_ReelstriptsEntry_DoNotUse,
              ::std::string, ::natashapb::ReelstriptConfig,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig > > parser(&reelstripts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.MuseumConfig.ReelstriptsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .natashapb.MuseumRTPConfig> rtp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          MuseumConfig_RtpEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MuseumConfig_RtpEntry_DoNotUse,
              ::std::string, ::natashapb::MuseumRTPConfig,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig > > parser(&rtp_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.MuseumConfig.RtpEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.MuseumConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.MuseumConfig)
  return false;
#undef DO_
}

void MuseumConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.MuseumConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  if (!this->reelstripts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.MuseumConfig.ReelstriptsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->reelstripts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reelstripts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MuseumConfig_ReelstriptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reelstripts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MuseumConfig_ReelstriptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it) {
        entry.reset(reelstripts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .natashapb.MuseumRTPConfig> rtp = 2;
  if (!this->rtp().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.MuseumConfig.RtpEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->rtp().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rtp().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MuseumConfig_RtpEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rtp_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MuseumConfig_RtpEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it) {
        entry.reset(rtp_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.MuseumConfig)
}

::google::protobuf::uint8* MuseumConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.MuseumConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  if (!this->reelstripts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.MuseumConfig.ReelstriptsEntry.key");
      }
    };

    if (deterministic &&
        this->reelstripts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reelstripts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MuseumConfig_ReelstriptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reelstripts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MuseumConfig_ReelstriptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it) {
        entry.reset(reelstripts_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .natashapb.MuseumRTPConfig> rtp = 2;
  if (!this->rtp().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.MuseumConfig.RtpEntry.key");
      }
    };

    if (deterministic &&
        this->rtp().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rtp().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<MuseumConfig_RtpEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rtp_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<MuseumConfig_RtpEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it) {
        entry.reset(rtp_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.MuseumConfig)
  return target;
}

size_t MuseumConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.MuseumConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reelstripts_size());
  {
    ::google::protobuf::scoped_ptr<MuseumConfig_ReelstriptsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
        it = this->reelstripts().begin();
        it != this->reelstripts().end(); ++it) {
      entry.reset(reelstripts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .natashapb.MuseumRTPConfig> rtp = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rtp_size());
  {
    ::google::protobuf::scoped_ptr<MuseumConfig_RtpEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::natashapb::MuseumRTPConfig >::const_iterator
        it = this->rtp().begin();
        it != this->rtp().end(); ++it) {
      entry.reset(rtp_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MuseumConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.MuseumConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const MuseumConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MuseumConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.MuseumConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.MuseumConfig)
    MergeFrom(*source);
  }
}

void MuseumConfig::MergeFrom(const MuseumConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.MuseumConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reelstripts_.MergeFrom(from.reelstripts_);
  rtp_.MergeFrom(from.rtp_);
}

void MuseumConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.MuseumConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MuseumConfig::CopyFrom(const MuseumConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.MuseumConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuseumConfig::IsInitialized() const {
  return true;
}

void MuseumConfig::Swap(MuseumConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MuseumConfig::InternalSwap(MuseumConfig* other) {
  using std::swap;
  reelstripts_.Swap(&other->reelstripts_);
  rtp_.Swap(&other->rtp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MuseumConfig::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TLODRTPConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLODRTPConfig::kBgReelstripsFieldNumber;
const int TLODRTPConfig::kFgNumsFieldNumber;
const int TLODRTPConfig::kFgReelstripsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLODRTPConfig::TLODRTPConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsTLODRTPConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.TLODRTPConfig)
}
TLODRTPConfig::TLODRTPConfig(const TLODRTPConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  bgreelstrips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bgreelstrips().size() > 0) {
    bgreelstrips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgreelstrips_);
  }
  fgreelstrips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.fgreelstrips().size() > 0) {
    fgreelstrips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fgreelstrips_);
  }
  fgnums_ = from.fgnums_;
  // @@protoc_insertion_point(copy_constructor:natashapb.TLODRTPConfig)
}

void TLODRTPConfig::SharedCtor() {
  bgreelstrips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgreelstrips_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgnums_ = 0;
  _cached_size_ = 0;
}

TLODRTPConfig::~TLODRTPConfig() {
  // @@protoc_insertion_point(destructor:natashapb.TLODRTPConfig)
  SharedDtor();
}

void TLODRTPConfig::SharedDtor() {
  bgreelstrips_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgreelstrips_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TLODRTPConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLODRTPConfig::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TLODRTPConfig& TLODRTPConfig::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsTLODRTPConfig();
  return *internal_default_instance();
}


void TLODRTPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.TLODRTPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bgreelstrips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgreelstrips_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fgnums_ = 0;
  _internal_metadata_.Clear();
}

bool TLODRTPConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.TLODRTPConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string bgReelstrips = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 802 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgreelstrips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->bgreelstrips().data(), static_cast<int>(this->bgreelstrips().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.TLODRTPConfig.bgReelstrips"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fgNums = 200;
      case 200: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 1600 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fgnums_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fgReelstrips = 300;
      case 300: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 2402 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fgreelstrips()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->fgreelstrips().data(), static_cast<int>(this->fgreelstrips().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.TLODRTPConfig.fgReelstrips"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.TLODRTPConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.TLODRTPConfig)
  return false;
#undef DO_
}

void TLODRTPConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.TLODRTPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bgReelstrips = 100;
  if (this->bgreelstrips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgreelstrips().data(), static_cast<int>(this->bgreelstrips().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.TLODRTPConfig.bgReelstrips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      100, this->bgreelstrips(), output);
  }

  // int32 fgNums = 200;
  if (this->fgnums() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(200, this->fgnums(), output);
  }

  // string fgReelstrips = 300;
  if (this->fgreelstrips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fgreelstrips().data(), static_cast<int>(this->fgreelstrips().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.TLODRTPConfig.fgReelstrips");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      300, this->fgreelstrips(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.TLODRTPConfig)
}

::google::protobuf::uint8* TLODRTPConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.TLODRTPConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string bgReelstrips = 100;
  if (this->bgreelstrips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->bgreelstrips().data(), static_cast<int>(this->bgreelstrips().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.TLODRTPConfig.bgReelstrips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        100, this->bgreelstrips(), target);
  }

  // int32 fgNums = 200;
  if (this->fgnums() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(200, this->fgnums(), target);
  }

  // string fgReelstrips = 300;
  if (this->fgreelstrips().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->fgreelstrips().data(), static_cast<int>(this->fgreelstrips().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "natashapb.TLODRTPConfig.fgReelstrips");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        300, this->fgreelstrips(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.TLODRTPConfig)
  return target;
}

size_t TLODRTPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.TLODRTPConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string bgReelstrips = 100;
  if (this->bgreelstrips().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->bgreelstrips());
  }

  // string fgReelstrips = 300;
  if (this->fgreelstrips().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fgreelstrips());
  }

  // int32 fgNums = 200;
  if (this->fgnums() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->fgnums());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLODRTPConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.TLODRTPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TLODRTPConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLODRTPConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.TLODRTPConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.TLODRTPConfig)
    MergeFrom(*source);
  }
}

void TLODRTPConfig::MergeFrom(const TLODRTPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.TLODRTPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.bgreelstrips().size() > 0) {

    bgreelstrips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bgreelstrips_);
  }
  if (from.fgreelstrips().size() > 0) {

    fgreelstrips_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fgreelstrips_);
  }
  if (from.fgnums() != 0) {
    set_fgnums(from.fgnums());
  }
}

void TLODRTPConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.TLODRTPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLODRTPConfig::CopyFrom(const TLODRTPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.TLODRTPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLODRTPConfig::IsInitialized() const {
  return true;
}

void TLODRTPConfig::Swap(TLODRTPConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLODRTPConfig::InternalSwap(TLODRTPConfig* other) {
  using std::swap;
  bgreelstrips_.Swap(&other->bgreelstrips_);
  fgreelstrips_.Swap(&other->fgreelstrips_);
  swap(fgnums_, other->fgnums_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLODRTPConfig::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

TLODConfig_ReelstriptsEntry_DoNotUse::TLODConfig_ReelstriptsEntry_DoNotUse() {}
TLODConfig_ReelstriptsEntry_DoNotUse::TLODConfig_ReelstriptsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TLODConfig_ReelstriptsEntry_DoNotUse::MergeFrom(const TLODConfig_ReelstriptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TLODConfig_ReelstriptsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[44];
}
void TLODConfig_ReelstriptsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

TLODConfig_RtpEntry_DoNotUse::TLODConfig_RtpEntry_DoNotUse() {}
TLODConfig_RtpEntry_DoNotUse::TLODConfig_RtpEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void TLODConfig_RtpEntry_DoNotUse::MergeFrom(const TLODConfig_RtpEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata TLODConfig_RtpEntry_DoNotUse::GetMetadata() const {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[45];
}
void TLODConfig_RtpEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void TLODConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TLODConfig::kReelstriptsFieldNumber;
const int TLODConfig::kRtpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TLODConfig::TLODConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsTLODConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.TLODConfig)
}
TLODConfig::TLODConfig(const TLODConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reelstripts_.MergeFrom(from.reelstripts_);
  rtp_.MergeFrom(from.rtp_);
  // @@protoc_insertion_point(copy_constructor:natashapb.TLODConfig)
}

void TLODConfig::SharedCtor() {
  _cached_size_ = 0;
}

TLODConfig::~TLODConfig() {
  // @@protoc_insertion_point(destructor:natashapb.TLODConfig)
  SharedDtor();
}

void TLODConfig::SharedDtor() {
}

void TLODConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLODConfig::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TLODConfig& TLODConfig::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsTLODConfig();
  return *internal_default_instance();
}


void TLODConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.TLODConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reelstripts_.Clear();
  rtp_.Clear();
  _internal_metadata_.Clear();
}

bool TLODConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.TLODConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          TLODConfig_ReelstriptsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TLODConfig_ReelstriptsEntry_DoNotUse,
              ::std::string, ::natashapb::ReelstriptConfig,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig > > parser(&reelstripts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.TLODConfig.ReelstriptsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .natashapb.TLODRTPConfig> rtp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          TLODConfig_RtpEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              TLODConfig_RtpEntry_DoNotUse,
              ::std::string, ::natashapb::TLODRTPConfig,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig > > parser(&rtp_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.TLODConfig.RtpEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.TLODConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.TLODConfig)
  return false;
#undef DO_
}

void TLODConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.TLODConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  if (!this->reelstripts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.TLODConfig.ReelstriptsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->reelstripts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reelstripts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TLODConfig_ReelstriptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reelstripts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TLODConfig_ReelstriptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it) {
        entry.reset(reelstripts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .natashapb.TLODRTPConfig> rtp = 2;
  if (!this->rtp().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.TLODConfig.RtpEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->rtp().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rtp().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TLODConfig_RtpEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rtp_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TLODConfig_RtpEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it) {
        entry.reset(rtp_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.TLODConfig)
}

::google::protobuf::uint8* TLODConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.TLODConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  if (!this->reelstripts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.TLODConfig.ReelstriptsEntry.key");
      }
    };

    if (deterministic &&
        this->reelstripts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reelstripts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TLODConfig_ReelstriptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reelstripts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TLODConfig_ReelstriptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it) {
        entry.reset(reelstripts_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .natashapb.TLODRTPConfig> rtp = 2;
  if (!this->rtp().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.TLODConfig.RtpEntry.key");
      }
    };

    if (deterministic &&
        this->rtp().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rtp().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<TLODConfig_RtpEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rtp_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<TLODConfig_RtpEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it) {
        entry.reset(rtp_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.TLODConfig)
  return target;
}

size_t TLODConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.TLODConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reelstripts_size());
  {
    ::google::protobuf::scoped_ptr<TLODConfig_ReelstriptsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
        it = this->reelstripts().begin();
        it != this->reelstripts().end(); ++it) {
      entry.reset(reelstripts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .natashapb.TLODRTPConfig> rtp = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rtp_size());
  {
    ::google::protobuf::scoped_ptr<TLODConfig_RtpEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::natashapb::TLODRTPConfig >::const_iterator
        it = this->rtp().begin();
        it != this->rtp().end(); ++it) {
      entry.reset(rtp_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLODConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.TLODConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const TLODConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TLODConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.TLODConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.TLODConfig)
    MergeFrom(*source);
  }
}

void TLODConfig::MergeFrom(const TLODConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.TLODConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reelstripts_.MergeFrom(from.reelstripts_);
  rtp_.MergeFrom(from.rtp_);
}

void TLODConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.TLODConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLODConfig::CopyFrom(const TLODConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.TLODConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLODConfig::IsInitialized() const {
  return true;
}

void TLODConfig::Swap(TLODConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TLODConfig::InternalSwap(TLODConfig* other) {
  using std::swap;
  reelstripts_.Swap(&other->reelstripts_);
  rtp_.Swap(&other->rtp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TLODConfig::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

GameConfig_ReelstriptsEntry_DoNotUse::GameConfig_ReelstriptsEntry_DoNotUse() {}
GameConfig_ReelstriptsEntry_DoNotUse::GameConfig_ReelstriptsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GameConfig_ReelstriptsEntry_DoNotUse::MergeFrom(const GameConfig_ReelstriptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GameConfig_ReelstriptsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[47];
}
void GameConfig_ReelstriptsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

GameConfig_RtpEntry_DoNotUse::GameConfig_RtpEntry_DoNotUse() {}
GameConfig_RtpEntry_DoNotUse::GameConfig_RtpEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void GameConfig_RtpEntry_DoNotUse::MergeFrom(const GameConfig_RtpEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata GameConfig_RtpEntry_DoNotUse::GetMetadata() const {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[48];
}
void GameConfig_RtpEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void GameConfig::InitAsDefaultInstance() {
}
void GameConfig::clear_rtp() {
  rtp_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GameConfig::kReelstriptsFieldNumber;
const int GameConfig::kRtpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GameConfig::GameConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_base_2eproto::InitDefaultsGameConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:natashapb.GameConfig)
}
GameConfig::GameConfig(const GameConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reelstripts_.MergeFrom(from.reelstripts_);
  rtp_.MergeFrom(from.rtp_);
  // @@protoc_insertion_point(copy_constructor:natashapb.GameConfig)
}

void GameConfig::SharedCtor() {
  _cached_size_ = 0;
}

GameConfig::~GameConfig() {
  // @@protoc_insertion_point(destructor:natashapb.GameConfig)
  SharedDtor();
}

void GameConfig::SharedDtor() {
}

void GameConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameConfig::descriptor() {
  ::protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GameConfig& GameConfig::default_instance() {
  ::protobuf_base_2eproto::InitDefaultsGameConfig();
  return *internal_default_instance();
}


void GameConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:natashapb.GameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reelstripts_.Clear();
  rtp_.Clear();
  _internal_metadata_.Clear();
}

bool GameConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:natashapb.GameConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          GameConfig_ReelstriptsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GameConfig_ReelstriptsEntry_DoNotUse,
              ::std::string, ::natashapb::ReelstriptConfig,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig > > parser(&reelstripts_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.GameConfig.ReelstriptsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.protobuf.Any> rtp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          GameConfig_RtpEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              GameConfig_RtpEntry_DoNotUse,
              ::std::string, ::google::protobuf::Any,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::protobuf::Any > > parser(&rtp_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "natashapb.GameConfig.RtpEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:natashapb.GameConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:natashapb.GameConfig)
  return false;
#undef DO_
}

void GameConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:natashapb.GameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  if (!this->reelstripts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.GameConfig.ReelstriptsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->reelstripts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reelstripts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameConfig_ReelstriptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reelstripts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameConfig_ReelstriptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it) {
        entry.reset(reelstripts_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.protobuf.Any> rtp = 2;
  if (!this->rtp().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.GameConfig.RtpEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->rtp().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rtp().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameConfig_RtpEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rtp_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameConfig_RtpEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it) {
        entry.reset(rtp_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:natashapb.GameConfig)
}

::google::protobuf::uint8* GameConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:natashapb.GameConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  if (!this->reelstripts().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.GameConfig.ReelstriptsEntry.key");
      }
    };

    if (deterministic &&
        this->reelstripts().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->reelstripts().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameConfig_ReelstriptsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(reelstripts_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameConfig_ReelstriptsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
          it = this->reelstripts().begin();
          it != this->reelstripts().end(); ++it) {
        entry.reset(reelstripts_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .google.protobuf.Any> rtp = 2;
  if (!this->rtp().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "natashapb.GameConfig.RtpEntry.key");
      }
    };

    if (deterministic &&
        this->rtp().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rtp().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<GameConfig_RtpEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rtp_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<GameConfig_RtpEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
          it = this->rtp().begin();
          it != this->rtp().end(); ++it) {
        entry.reset(rtp_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:natashapb.GameConfig)
  return target;
}

size_t GameConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:natashapb.GameConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .natashapb.ReelstriptConfig> reelstripts = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->reelstripts_size());
  {
    ::google::protobuf::scoped_ptr<GameConfig_ReelstriptsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::natashapb::ReelstriptConfig >::const_iterator
        it = this->reelstripts().begin();
        it != this->reelstripts().end(); ++it) {
      entry.reset(reelstripts_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .google.protobuf.Any> rtp = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rtp_size());
  {
    ::google::protobuf::scoped_ptr<GameConfig_RtpEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::protobuf::Any >::const_iterator
        it = this->rtp().begin();
        it != this->rtp().end(); ++it) {
      entry.reset(rtp_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:natashapb.GameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GameConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GameConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:natashapb.GameConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:natashapb.GameConfig)
    MergeFrom(*source);
  }
}

void GameConfig::MergeFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:natashapb.GameConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reelstripts_.MergeFrom(from.reelstripts_);
  rtp_.MergeFrom(from.rtp_);
}

void GameConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:natashapb.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameConfig::CopyFrom(const GameConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:natashapb.GameConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameConfig::IsInitialized() const {
  return true;
}

void GameConfig::Swap(GameConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GameConfig::InternalSwap(GameConfig* other) {
  using std::swap;
  reelstripts_.Swap(&other->reelstripts_);
  rtp_.Swap(&other->rtp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GameConfig::GetMetadata() const {
  protobuf_base_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_base_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace natashapb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SymbolBlock3X5* Arena::Create< ::natashapb::SymbolBlock3X5 >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SymbolBlock3X5 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SymbolBlock* Arena::Create< ::natashapb::SymbolBlock >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SymbolBlock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::StaticCascadingRandomResult3X5* Arena::Create< ::natashapb::StaticCascadingRandomResult3X5 >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::StaticCascadingRandomResult3X5 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::NormalReelsRandomResult3X5* Arena::Create< ::natashapb::NormalReelsRandomResult3X5 >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::NormalReelsRandomResult3X5 >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::RandomResult* Arena::Create< ::natashapb::RandomResult >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::RandomResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::Position2D* Arena::Create< ::natashapb::Position2D >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::Position2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameResultInfo* Arena::Create< ::natashapb::GameResultInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameResultInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SpinResult* Arena::Create< ::natashapb::SpinResult >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SpinResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlID* Arena::Create< ::natashapb::GameCtrlID >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlID >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::BaseCascadingInfo* Arena::Create< ::natashapb::BaseCascadingInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::BaseCascadingInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::FGCache* Arena::Create< ::natashapb::FGCache >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::FGCache >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::BaseFreeInfo* Arena::Create< ::natashapb::BaseFreeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::BaseFreeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::RespinHistory* Arena::Create< ::natashapb::RespinHistory >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::RespinHistory >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::RespinHistoryList* Arena::Create< ::natashapb::RespinHistoryList >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::RespinHistoryList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::UserGameModInfo* Arena::Create< ::natashapb::UserGameModInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::UserGameModInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::UserGameLogicInfo* Arena::Create< ::natashapb::UserGameLogicInfo >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::UserGameLogicInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlSpin* Arena::Create< ::natashapb::GameCtrlSpin >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlSpin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlSelectFree* Arena::Create< ::natashapb::GameCtrlSelectFree >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlSelectFree >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlBonus* Arena::Create< ::natashapb::GameCtrlBonus >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlBonus >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlJackpot* Arena::Create< ::natashapb::GameCtrlJackpot >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlJackpot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlCommonJackpot* Arena::Create< ::natashapb::GameCtrlCommonJackpot >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlCommonJackpot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlAwardSpin* Arena::Create< ::natashapb::GameCtrlAwardSpin >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlAwardSpin >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrlDebug* Arena::Create< ::natashapb::GameCtrlDebug >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrlDebug >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameCtrl* Arena::Create< ::natashapb::GameCtrl >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameCtrl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::StartFreeGame* Arena::Create< ::natashapb::StartFreeGame >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::StartFreeGame >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::StartGameMod* Arena::Create< ::natashapb::StartGameMod >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::StartGameMod >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SymbolRTP* Arena::Create< ::natashapb::SymbolRTP >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SymbolRTP >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::SymbolRTPList* Arena::Create< ::natashapb::SymbolRTPList >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::SymbolRTPList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::BonusRTP* Arena::Create< ::natashapb::BonusRTP >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::BonusRTP >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::BonusRTPList* Arena::Create< ::natashapb::BonusRTPList >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::BonusRTPList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameModuleRTP_BonusEntry_DoNotUse* Arena::Create< ::natashapb::GameModuleRTP_BonusEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameModuleRTP_BonusEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameModuleRTP* Arena::Create< ::natashapb::GameModuleRTP >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameModuleRTP >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::RTP_GameModulesEntry_DoNotUse* Arena::Create< ::natashapb::RTP_GameModulesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::RTP_GameModulesEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::RTP* Arena::Create< ::natashapb::RTP >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::RTP >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::NormalReelstriptConfig* Arena::Create< ::natashapb::NormalReelstriptConfig >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::NormalReelstriptConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::StaticSymbols* Arena::Create< ::natashapb::StaticSymbols >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::StaticSymbols >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::StaticCascadingReels* Arena::Create< ::natashapb::StaticCascadingReels >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::StaticCascadingReels >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::ReelstriptConfig* Arena::Create< ::natashapb::ReelstriptConfig >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::ReelstriptConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::WeightConfig* Arena::Create< ::natashapb::WeightConfig >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::WeightConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::MuseumRTPConfig* Arena::Create< ::natashapb::MuseumRTPConfig >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::MuseumRTPConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse* Arena::Create< ::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::MuseumConfig_ReelstriptsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::MuseumConfig_RtpEntry_DoNotUse* Arena::Create< ::natashapb::MuseumConfig_RtpEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::MuseumConfig_RtpEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::MuseumConfig* Arena::Create< ::natashapb::MuseumConfig >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::MuseumConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::TLODRTPConfig* Arena::Create< ::natashapb::TLODRTPConfig >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::TLODRTPConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse* Arena::Create< ::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::TLODConfig_ReelstriptsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::TLODConfig_RtpEntry_DoNotUse* Arena::Create< ::natashapb::TLODConfig_RtpEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::TLODConfig_RtpEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::TLODConfig* Arena::Create< ::natashapb::TLODConfig >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::TLODConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameConfig_ReelstriptsEntry_DoNotUse* Arena::Create< ::natashapb::GameConfig_ReelstriptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameConfig_ReelstriptsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameConfig_RtpEntry_DoNotUse* Arena::Create< ::natashapb::GameConfig_RtpEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameConfig_RtpEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::natashapb::GameConfig* Arena::Create< ::natashapb::GameConfig >(Arena* arena) {
  return Arena::CreateInternal< ::natashapb::GameConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
